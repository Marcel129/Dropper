
siewnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800a398  0800a398  0001a398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8dc  0800a8dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8e4  0800a8e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8e4  0800a8e4  0001a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a8ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001e0  0800aacc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800aacc  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e65  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f16  00000000  00000000  00037075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cb8  00000000  00000000  0003c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f94  00000000  00000000  0005e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d02c2  00000000  00000000  00074f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef4  00000000  00000000  001452a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a380 	.word	0x0800a380

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a380 	.word	0x0800a380

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9aa 	b.w	8000f48 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff99 	bl	8000b4c <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fd0f 	bl	8000668 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc90 	bl	8000574 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fd06 	bl	8000668 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb48 	bl	80002f8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <UART_Init>:
#include "UART_communication.h"

UART_structure _dropper_UART;

void UART_Init(UART_HandleTypeDef *huart){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	clearRxBuffer();
 8000f54:	f000 f866 	bl	8001024 <clearRxBuffer>
	clearTxBuffer();
 8000f58:	f000 f88c 	bl	8001074 <clearTxBuffer>

	_dropper_UART.UART_Handler = huart;
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <UART_Init+0x30>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	HAL_UART_Receive_IT(_dropper_UART.UART_Handler, &(_dropper_UART.rxTmpChar), 1);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <UART_Init+0x30>)
 8000f66:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4904      	ldr	r1, [pc, #16]	; (8000f80 <UART_Init+0x34>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 fa9e 	bl	80054b0 <HAL_UART_Receive_IT>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001fc 	.word	0x200001fc
 8000f80:	2000038c 	.word	0x2000038c

08000f84 <HAL_UART_RxCpltCallback>:

HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == _dropper_UART.UART_Handler->Instance){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000f92:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d138      	bne.n	800100e <HAL_UART_RxCpltCallback+0x8a>
		if(_dropper_UART.rxTmpChar == '\n' || _dropper_UART.rxTmpChar == '\r'){
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000f9e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	d004      	beq.n	8000fb0 <HAL_UART_RxCpltCallback+0x2c>
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fa8:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	d104      	bne.n	8000fba <HAL_UART_RxCpltCallback+0x36>
			_dropper_UART.msgReadyToRead = true;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
 8000fb8:	e021      	b.n	8000ffe <HAL_UART_RxCpltCallback+0x7a>
		}
		else{
			_dropper_UART.rxBuffer[_dropper_UART.rxBuffCursor] = _dropper_UART.rxTmpChar;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fbc:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fc4:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			_dropper_UART.rxBuffCursor = ((++_dropper_UART.rxBuffCursor)%RX_BUFFER_SIZE);
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fd2:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fdc:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fe2:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_UART_RxCpltCallback+0x98>)
 8000fe8:	fba2 1203 	umull	r1, r2, r2, r3
 8000fec:	0992      	lsrs	r2, r2, #6
 8000fee:	21c8      	movs	r1, #200	; 0xc8
 8000ff0:	fb01 f202 	mul.w	r2, r1, r2
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000ffa:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		}
		HAL_UART_Receive_IT(_dropper_UART.UART_Handler, &(_dropper_UART.rxTmpChar), 1);
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8001000:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001004:	2201      	movs	r2, #1
 8001006:	4906      	ldr	r1, [pc, #24]	; (8001020 <HAL_UART_RxCpltCallback+0x9c>)
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fa51 	bl	80054b0 <HAL_UART_Receive_IT>
	}
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001fc 	.word	0x200001fc
 800101c:	51eb851f 	.word	0x51eb851f
 8001020:	2000038c 	.word	0x2000038c

08001024 <clearRxBuffer>:

void clearRxBuffer(){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
	_dropper_UART.rxTmpChar = 0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <clearRxBuffer+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	_dropper_UART.rxBuffCursor = 0;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <clearRxBuffer+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	_dropper_UART.msgReadyToRead = false;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <clearRxBuffer+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	for(uint8_t i = 0; i<RX_BUFFER_SIZE; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e008      	b.n	800105a <clearRxBuffer+0x36>
		_dropper_UART.rxBuffer[i] = 0;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <clearRxBuffer+0x4c>)
 800104c:	4413      	add	r3, r2
 800104e:	2200      	movs	r2, #0
 8001050:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<RX_BUFFER_SIZE; i++){
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	3301      	adds	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2bc7      	cmp	r3, #199	; 0xc7
 800105e:	d9f3      	bls.n	8001048 <clearRxBuffer+0x24>
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200001fc 	.word	0x200001fc

08001074 <clearTxBuffer>:

void clearTxBuffer(){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<TX_BUFFER_SIZE; i++){
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e006      	b.n	800108e <clearTxBuffer+0x1a>
		_dropper_UART.txBuffer[i] = 0;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <clearTxBuffer+0x30>)
 8001084:	2100      	movs	r1, #0
 8001086:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<TX_BUFFER_SIZE; i++){
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3301      	adds	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2bc7      	cmp	r3, #199	; 0xc7
 8001092:	d9f5      	bls.n	8001080 <clearTxBuffer+0xc>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200001fc 	.word	0x200001fc

080010a8 <decodeMsg>:

int8_t decodeMsg(command *cmd){
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08d      	sub	sp, #52	; 0x34
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	uint8_t *p = NULL, *p_prev = NULL, tmpBuff[20] = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
	int8_t paramIdx = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	for(uint8_t i = 0; i<CMD_NAME_LENGHT_T; i++)cmd->cmdName[i] = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80010d6:	e009      	b.n	80010ec <decodeMsg+0x44>
 80010d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	2100      	movs	r1, #0
 80010e0:	54d1      	strb	r1, [r2, r3]
 80010e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010e6:	3301      	adds	r3, #1
 80010e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80010ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d9f1      	bls.n	80010d8 <decodeMsg+0x30>
	for(uint8_t i = 0; i<CMD_PARAMS_NUMBER_T; i++)cmd->params[i] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80010fa:	e010      	b.n	800111e <decodeMsg+0x76>
 80010fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	18d1      	adds	r1, r2, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
 8001114:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001118:	3301      	adds	r3, #1
 800111a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800111e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001122:	2b04      	cmp	r3, #4
 8001124:	d9ea      	bls.n	80010fc <decodeMsg+0x54>

	p = strchr(_dropper_UART.rxBuffer, ' ');
 8001126:	2120      	movs	r1, #32
 8001128:	483d      	ldr	r0, [pc, #244]	; (8001220 <decodeMsg+0x178>)
 800112a:	f006 fa45 	bl	80075b8 <strchr>
 800112e:	62f8      	str	r0, [r7, #44]	; 0x2c
	strncpy(cmd->cmdName, _dropper_UART.rxBuffer, 3);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	493a      	ldr	r1, [pc, #232]	; (8001220 <decodeMsg+0x178>)
 8001136:	4618      	mov	r0, r3
 8001138:	f006 fa53 	bl	80075e2 <strncpy>
	if(p == NULL) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <decodeMsg+0xa2>
		clearRxBuffer();
 8001142:	f7ff ff6f 	bl	8001024 <clearRxBuffer>
		return 0;//no arguments
 8001146:	2300      	movs	r3, #0
 8001148:	e065      	b.n	8001216 <decodeMsg+0x16e>
	}
	else if(p - _dropper_UART.rxBuffer != 3){
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	4a34      	ldr	r2, [pc, #208]	; (8001220 <decodeMsg+0x178>)
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	2b03      	cmp	r3, #3
 8001152:	d059      	beq.n	8001208 <decodeMsg+0x160>
		clearRxBuffer();
 8001154:	f7ff ff66 	bl	8001024 <clearRxBuffer>
		return -1; //cmd name is not valid, abort
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	e05b      	b.n	8001216 <decodeMsg+0x16e>
	}

	while(p != NULL){
		p_prev = p + 1;
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	3301      	adds	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
		p = strchr( p + 1, ' ' );
 8001164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001166:	3301      	adds	r3, #1
 8001168:	2120      	movs	r1, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f006 fa24 	bl	80075b8 <strchr>
 8001170:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(p == NULL){
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <decodeMsg+0xde>
			strcpy(tmpBuff, p_prev);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800117e:	4618      	mov	r0, r3
 8001180:	f006 fa27 	bl	80075d2 <strcpy>
 8001184:	e00c      	b.n	80011a0 <decodeMsg+0xf8>
		}
		else{
			int8_t len = p - p_prev;
 8001186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			strncpy(tmpBuff, p_prev, len);
 8001190:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fa21 	bl	80075e2 <strncpy>
		}
		cmd->params[paramIdx++] = atof(tmpBuff);
 80011a0:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80011a4:	b2d3      	uxtb	r3, r2
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80011ae:	4614      	mov	r4, r2
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 f9c9 	bl	800754c <atof>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	1c63      	adds	r3, r4, #1
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	ed83 7b00 	vstr	d7, [r3]

		if(paramIdx >= 5) {
 80011ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	dd04      	ble.n	80011e0 <decodeMsg+0x138>
			clearRxBuffer();
 80011d6:	f7ff ff25 	bl	8001024 <clearRxBuffer>
			return paramIdx;//too many arguments
 80011da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80011de:	e01a      	b.n	8001216 <decodeMsg+0x16e>
		}

		for(uint8_t i = 0; i<20; i++) tmpBuff[i] = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80011e6:	e00b      	b.n	8001200 <decodeMsg+0x158>
 80011e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011ec:	3330      	adds	r3, #48	; 0x30
 80011ee:	443b      	add	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	f803 2c24 	strb.w	r2, [r3, #-36]
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	3301      	adds	r3, #1
 80011fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001200:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001204:	2b13      	cmp	r3, #19
 8001206:	d9ef      	bls.n	80011e8 <decodeMsg+0x140>
	while(p != NULL){
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1a7      	bne.n	800115e <decodeMsg+0xb6>
	}

	clearRxBuffer();
 800120e:	f7ff ff09 	bl	8001024 <clearRxBuffer>
	return paramIdx;
 8001212:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8001216:	4618      	mov	r0, r3
 8001218:	3734      	adds	r7, #52	; 0x34
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	200002c4 	.word	0x200002c4

08001224 <UART_sendMsg>:

void UART_sendMsg(uint8_t * msg){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	clearTxBuffer();
 800122c:	f7ff ff22 	bl	8001074 <clearTxBuffer>
	uint16_t msgLen = strlen(msg);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ffff 	bl	8000234 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]
	//prevention from too large messages
	if(msgLen > TX_BUFFER_SIZE) msgLen = TX_BUFFER_SIZE;
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	2bc8      	cmp	r3, #200	; 0xc8
 800123e:	d901      	bls.n	8001244 <UART_sendMsg+0x20>
 8001240:	23c8      	movs	r3, #200	; 0xc8
 8001242:	81fb      	strh	r3, [r7, #14]
	strncpy(_dropper_UART.txBuffer, msg, msgLen);
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	461a      	mov	r2, r3
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <UART_sendMsg+0x44>)
 800124c:	f006 f9c9 	bl	80075e2 <strncpy>
	HAL_UART_Transmit(_dropper_UART.UART_Handler, _dropper_UART.txBuffer, msgLen, 100);
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <UART_sendMsg+0x44>)
 8001252:	f8d3 0194 	ldr.w	r0, [r3, #404]	; 0x194
 8001256:	89fa      	ldrh	r2, [r7, #14]
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	4903      	ldr	r1, [pc, #12]	; (8001268 <UART_sendMsg+0x44>)
 800125c:	f004 f89a 	bl	8005394 <HAL_UART_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200001fc 	.word	0x200001fc

0800126c <_dropper_StepIRQ>:
uint32_t stepCounter = 0;
bool isSeedSown = false;
_dropper dDropper;


void _dropper_StepIRQ(){
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	++stepCounter;
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <_dropper_StepIRQ+0x18>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <_dropper_StepIRQ+0x18>)
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	20000394 	.word	0x20000394

08001288 <_dropper_SeedSensorIRQ>:

void _dropper_SeedSensorIRQ(){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	isSeedSown = true;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <_dropper_SeedSensorIRQ+0x14>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000398 	.word	0x20000398

080012a0 <_dropper_HomingSensorIRQ>:

void _dropper_HomingSensorIRQ(){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	dDropper.state = HOME;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <_dropper_HomingSensorIRQ+0x14>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	701a      	strb	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	2000039c 	.word	0x2000039c

080012b8 <_dropper_Init>:

void _dropper_Init(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

	dDropper.channels[0].name = CHANNEL_1;
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <_dropper_Init+0x1e4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
	dDropper.channels[0].port = SEED_CHANNEL_1_PORT;
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <_dropper_Init+0x1e4>)
 80012c6:	4a76      	ldr	r2, [pc, #472]	; (80014a0 <_dropper_Init+0x1e8>)
 80012c8:	609a      	str	r2, [r3, #8]
	dDropper.channels[0].pin = SEED_CHANNEL_1_PIN;
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <_dropper_Init+0x1e4>)
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	819a      	strh	r2, [r3, #12]
	dDropper.channels[0].seedType = PELLETED;
 80012d2:	4b72      	ldr	r3, [pc, #456]	; (800149c <_dropper_Init+0x1e4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	715a      	strb	r2, [r3, #5]
	dDropper.channels[0].status = CHANNEL_CLOSED;
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <_dropper_Init+0x1e4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	719a      	strb	r2, [r3, #6]

	dDropper.channels[1].name = CHANNEL_2;
 80012de:	4b6f      	ldr	r3, [pc, #444]	; (800149c <_dropper_Init+0x1e4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	741a      	strb	r2, [r3, #16]
	dDropper.channels[1].port = SEED_CHANNEL_2_PORT;
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <_dropper_Init+0x1e4>)
 80012e6:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <_dropper_Init+0x1ec>)
 80012e8:	615a      	str	r2, [r3, #20]
	dDropper.channels[1].pin = SEED_CHANNEL_2_PIN;
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <_dropper_Init+0x1e4>)
 80012ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f0:	831a      	strh	r2, [r3, #24]
	dDropper.channels[1].seedType = PELLETED;
 80012f2:	4b6a      	ldr	r3, [pc, #424]	; (800149c <_dropper_Init+0x1e4>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	745a      	strb	r2, [r3, #17]
	dDropper.channels[1].status = CHANNEL_CLOSED;
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <_dropper_Init+0x1e4>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	749a      	strb	r2, [r3, #18]

	dDropper.channels[2].name = CHANNEL_3;
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <_dropper_Init+0x1e4>)
 8001300:	2202      	movs	r2, #2
 8001302:	771a      	strb	r2, [r3, #28]
	dDropper.channels[2].port = SEED_CHANNEL_3_PORT;
 8001304:	4b65      	ldr	r3, [pc, #404]	; (800149c <_dropper_Init+0x1e4>)
 8001306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800130a:	621a      	str	r2, [r3, #32]
	dDropper.channels[2].pin = SEED_CHANNEL_3_PIN;
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <_dropper_Init+0x1e4>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	849a      	strh	r2, [r3, #36]	; 0x24
	dDropper.channels[2].seedType = PELLETED;
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <_dropper_Init+0x1e4>)
 8001316:	2201      	movs	r2, #1
 8001318:	775a      	strb	r2, [r3, #29]
	dDropper.channels[2].status = CHANNEL_CLOSED;
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <_dropper_Init+0x1e4>)
 800131c:	2201      	movs	r2, #1
 800131e:	779a      	strb	r2, [r3, #30]

	dDropper.channels[3].name = CHANNEL_4;
 8001320:	4b5e      	ldr	r3, [pc, #376]	; (800149c <_dropper_Init+0x1e4>)
 8001322:	2203      	movs	r2, #3
 8001324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	dDropper.channels[3].port = SEED_CHANNEL_4_PORT;
 8001328:	4b5c      	ldr	r3, [pc, #368]	; (800149c <_dropper_Init+0x1e4>)
 800132a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
	dDropper.channels[3].pin = SEED_CHANNEL_4_PIN;
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <_dropper_Init+0x1e4>)
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	861a      	strh	r2, [r3, #48]	; 0x30
	dDropper.channels[3].seedType = CASUAL;
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <_dropper_Init+0x1e4>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	dDropper.channels[3].status = CHANNEL_CLOSED;
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <_dropper_Init+0x1e4>)
 8001342:	2201      	movs	r2, #1
 8001344:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	dDropper.channels[4].name = CHANNEL_5;
 8001348:	4b54      	ldr	r3, [pc, #336]	; (800149c <_dropper_Init+0x1e4>)
 800134a:	2204      	movs	r2, #4
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	dDropper.channels[4].port = SEED_CHANNEL_5_PORT;
 8001350:	4b52      	ldr	r3, [pc, #328]	; (800149c <_dropper_Init+0x1e4>)
 8001352:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <_dropper_Init+0x1ec>)
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
	dDropper.channels[4].pin = SEED_CHANNEL_5_PIN;
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <_dropper_Init+0x1e4>)
 8001358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135c:	879a      	strh	r2, [r3, #60]	; 0x3c
	dDropper.channels[4].seedType = CASUAL;
 800135e:	4b4f      	ldr	r3, [pc, #316]	; (800149c <_dropper_Init+0x1e4>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	dDropper.channels[4].status = CHANNEL_CLOSED;
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <_dropper_Init+0x1e4>)
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dDropper.channels[5].name = CHANNEL_6;
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <_dropper_Init+0x1e4>)
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dDropper.channels[5].port = SEED_CHANNEL_6_PORT;
 8001376:	4b49      	ldr	r3, [pc, #292]	; (800149c <_dropper_Init+0x1e4>)
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <_dropper_Init+0x1ec>)
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
	dDropper.channels[5].pin = SEED_CHANNEL_6_PIN;
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <_dropper_Init+0x1e4>)
 800137e:	2210      	movs	r2, #16
 8001380:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	dDropper.channels[5].seedType = CASUAL;
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <_dropper_Init+0x1e4>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	dDropper.channels[5].status = CHANNEL_CLOSED;
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <_dropper_Init+0x1e4>)
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42


	for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++){
 8001394:	2300      	movs	r3, #0
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	e018      	b.n	80013cc <_dropper_Init+0x114>
		HAL_GPIO_WritePin(dDropper.channels[i].port, dDropper.channels[i].pin, GPIO_PIN_SET);
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	493f      	ldr	r1, [pc, #252]	; (800149c <_dropper_Init+0x1e4>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3308      	adds	r3, #8
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	493b      	ldr	r1, [pc, #236]	; (800149c <_dropper_Init+0x1e4>)
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	330c      	adds	r3, #12
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	2201      	movs	r2, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	f001 fb55 	bl	8002a70 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++){
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3301      	adds	r3, #1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d9e3      	bls.n	800139a <_dropper_Init+0xe2>
	}

	dDropper.vibrateMotor.port = VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT;
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <_dropper_Init+0x1e4>)
 80013d4:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <_dropper_Init+0x1ec>)
 80013d6:	64da      	str	r2, [r3, #76]	; 0x4c
	dDropper.vibrateMotor.pin = VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN;
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <_dropper_Init+0x1e4>)
 80013da:	2220      	movs	r2, #32
 80013dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	dDropper.vibrateMotor.status = MOTOR_OFF;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <_dropper_Init+0x1e4>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2120      	movs	r1, #32
 80013ec:	482d      	ldr	r0, [pc, #180]	; (80014a4 <_dropper_Init+0x1ec>)
 80013ee:	f001 fb3f 	bl	8002a70 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_EN_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f001 fb39 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2102      	movs	r1, #2
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f001 fb33 	bl	8002a70 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DROPPER_STEPPER_EN_PORT, DROPPER_STEPPER_EN_PIN, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	4825      	ldr	r0, [pc, #148]	; (80014a4 <_dropper_Init+0x1ec>)
 8001410:	f001 fb2e 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <_dropper_Init+0x1e8>)
 800141a:	f001 fb29 	bl	8002a70 <HAL_GPIO_WritePin>

	//turn off other relays
	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PORT, VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PIN, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f001 fb22 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_9_GPIO_Port, RELAY_9_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <_dropper_Init+0x1e8>)
 8001434:	f001 fb1c 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_10_GPIO_Port, RELAY_10_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <_dropper_Init+0x1e8>)
 800143e:	f001 fb17 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_11_GPIO_Port, RELAY_11_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <_dropper_Init+0x1ec>)
 800144a:	f001 fb11 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_12_GPIO_Port, RELAY_12_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2104      	movs	r1, #4
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <_dropper_Init+0x1ec>)
 8001454:	f001 fb0c 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_13_GPIO_Port, RELAY_13_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <_dropper_Init+0x1ec>)
 800145e:	f001 fb07 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_14_GPIO_Port, RELAY_14_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	480e      	ldr	r0, [pc, #56]	; (80014a4 <_dropper_Init+0x1ec>)
 800146a:	f001 fb01 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_15_GPIO_Port, RELAY_15_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <_dropper_Init+0x1ec>)
 8001476:	f001 fafb 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_16_GPIO_Port, RELAY_16_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001480:	4808      	ldr	r0, [pc, #32]	; (80014a4 <_dropper_Init+0x1ec>)
 8001482:	f001 faf5 	bl	8002a70 <HAL_GPIO_WritePin>

	UART_Init(&huart1);
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <_dropper_Init+0x1f0>)
 8001488:	f7ff fd60 	bl	8000f4c <UART_Init>

	dDropper.state = INITIALIZED;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <_dropper_Init+0x1e4>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000039c 	.word	0x2000039c
 80014a0:	48000800 	.word	0x48000800
 80014a4:	48000400 	.word	0x48000400
 80014a8:	20000440 	.word	0x20000440

080014ac <_dropper_OpenChannel>:


void _dropper_OpenChannel(_dropperChannelName dC){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(dDropper.channels[dC].port, dDropper.channels[dC].pin, GPIO_PIN_RESET);
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	4911      	ldr	r1, [pc, #68]	; (8001500 <_dropper_OpenChannel+0x54>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3308      	adds	r3, #8
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <_dropper_OpenChannel+0x54>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	330c      	adds	r3, #12
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	f001 fac7 	bl	8002a70 <HAL_GPIO_WritePin>
	dDropper.channels[dC].status = CHANNEL_OPENED;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <_dropper_OpenChannel+0x54>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	3306      	adds	r3, #6
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000039c 	.word	0x2000039c

08001504 <_dropper_CloseChannel>:

void _dropper_CloseChannel(_dropperChannelName dC){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(dDropper.channels[dC].port, dDropper.channels[dC].pin, GPIO_PIN_SET);
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	4911      	ldr	r1, [pc, #68]	; (8001558 <_dropper_CloseChannel+0x54>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3308      	adds	r3, #8
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	79fa      	ldrb	r2, [r7, #7]
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <_dropper_CloseChannel+0x54>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	330c      	adds	r3, #12
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	f001 fa9b 	bl	8002a70 <HAL_GPIO_WritePin>
	dDropper.channels[dC].status = CHANNEL_CLOSED;
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <_dropper_CloseChannel+0x54>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3306      	adds	r3, #6
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000039c 	.word	0x2000039c

0800155c <_dropper_StartVibrate>:

void _dropper_StartVibrate(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(dDropper.vibrateMotor.port, dDropper.vibrateMotor.pin, GPIO_PIN_RESET);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_dropper_StartVibrate+0x24>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <_dropper_StartVibrate+0x24>)
 8001566:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800156a:	2200      	movs	r2, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fa7f 	bl	8002a70 <HAL_GPIO_WritePin>
	dDropper.vibrateMotor.status = MOTOR_ON;
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <_dropper_StartVibrate+0x24>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000039c 	.word	0x2000039c

08001584 <_dropper_StopVibrate>:
void _dropper_StopVibrate(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(dDropper.vibrateMotor.port, dDropper.vibrateMotor.pin, GPIO_PIN_SET);
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_dropper_StopVibrate+0x24>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <_dropper_StopVibrate+0x24>)
 800158e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001592:	2201      	movs	r2, #1
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fa6b 	bl	8002a70 <HAL_GPIO_WritePin>
	dDropper.vibrateMotor.status = MOTOR_OFF;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_dropper_StopVibrate+0x24>)
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000039c 	.word	0x2000039c

080015ac <_dropper_DrumSetMoveDirection>:
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
		break;
	}
}

void _dropper_DrumSetMoveDirection(_stepperMoveDirection md){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	switch(md){
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <_dropper_DrumSetMoveDirection+0x16>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d007      	beq.n	80015d0 <_dropper_DrumSetMoveDirection+0x24>
		break;
	case BACKWARD:
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_SET);
		break;
	}
}
 80015c0:	e00d      	b.n	80015de <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f001 fa51 	bl	8002a70 <HAL_GPIO_WritePin>
		break;
 80015ce:	e006      	b.n	80015de <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2101      	movs	r1, #1
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f001 fa4a 	bl	8002a70 <HAL_GPIO_WritePin>
		break;
 80015dc:	bf00      	nop
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <_dropper_RotateDrum_deg>:

_seedSowingStatus _dropper_RotateDrum_deg(float angle_deg){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]

	if(angle_deg < 0){
 80015f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	d509      	bpl.n	8001614 <_dropper_RotateDrum_deg+0x2c>
		_dropper_DrumSetMoveDirection(BACKWARD);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff ffd3 	bl	80015ac <_dropper_DrumSetMoveDirection>
		angle_deg = -angle_deg;
 8001606:	edd7 7a01 	vldr	s15, [r7, #4]
 800160a:	eef1 7a67 	vneg.f32	s15, s15
 800160e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001612:	e002      	b.n	800161a <_dropper_RotateDrum_deg+0x32>
	}
	else{
		_dropper_DrumSetMoveDirection(FORWARD);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ffc9 	bl	80015ac <_dropper_DrumSetMoveDirection>
	}

	uint32_t stepsToDo = (uint32_t)((angle_deg * (float)DRUM_STEPPER_MICROSTEPPING)/DEFAULT_ANGLE_PER_STEP);
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80016b0 <_dropper_RotateDrum_deg+0xc8>
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	ee17 0a90 	vmov	r0, s15
 800162a:	f7fe ffc5 	bl	80005b8 <__aeabi_f2d>
 800162e:	a31e      	add	r3, pc, #120	; (adr r3, 80016a8 <_dropper_RotateDrum_deg+0xc0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f942 	bl	80008bc <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff faac 	bl	8000b9c <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 800164c:	f002 fb16 	bl	8003c7c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 49);
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2231      	movs	r2, #49	; 0x31
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
	stepCounter = 0;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <_dropper_RotateDrum_deg+0xd0>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
	isSeedSown = false;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <_dropper_RotateDrum_deg+0xd4>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

	while(stepCounter < stepsToDo){
 8001664:	e00d      	b.n	8001682 <_dropper_RotateDrum_deg+0x9a>
		if(isSeedSown){
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_dropper_RotateDrum_deg+0xd4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <_dropper_RotateDrum_deg+0x9a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001676:	2100      	movs	r1, #0
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 800167a:	f002 fc57 	bl	8003f2c <HAL_TIM_PWM_Stop_IT>
			return SEED_SOWN;
 800167e:	2300      	movs	r3, #0
 8001680:	e00d      	b.n	800169e <_dropper_RotateDrum_deg+0xb6>
	while(stepCounter < stepsToDo){
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <_dropper_RotateDrum_deg+0xd0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8ec      	bhi.n	8001666 <_dropper_RotateDrum_deg+0x7e>
		}
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 8001698:	f002 fc48 	bl	8003f2c <HAL_TIM_PWM_Stop_IT>
	return SEED_ERR;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	cccccccd 	.word	0xcccccccd
 80016ac:	3ffccccc 	.word	0x3ffccccc
 80016b0:	42000000 	.word	0x42000000
 80016b4:	200003f4 	.word	0x200003f4
 80016b8:	20000394 	.word	0x20000394
 80016bc:	20000398 	.word	0x20000398

080016c0 <_dropper_SowSeeds>:
	while(stepCounter < stepsToDo);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
}

bool _dropper_SowSeeds(_dropperChannelName channel ){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]

	//pelleted seeds
	if(channel == CHANNEL_1 || channel == CHANNEL_2 || channel == CHANNEL_3){
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <_dropper_SowSeeds+0x1c>
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d002      	beq.n	80016dc <_dropper_SowSeeds+0x1c>
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d13a      	bne.n	8001752 <_dropper_SowSeeds+0x92>

		_seedSowingStatus isSown = SEED_ERR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
		_stepperMoveDirection nextDirection = FORWARD;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73bb      	strb	r3, [r7, #14]

		_dropper_OpenChannel(channel);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fee0 	bl	80014ac <_dropper_OpenChannel>

		uint8_t moves = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	737b      	strb	r3, [r7, #13]

		while(moves < 12 && isSown == SEED_ERR){
 80016f0:	e016      	b.n	8001720 <_dropper_SowSeeds+0x60>
			if(nextDirection == FORWARD){
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <_dropper_SowSeeds+0x50>
				isSown = _dropper_RotateDrum_deg(30);
 80016f8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80016fc:	f7ff ff74 	bl	80015e8 <_dropper_RotateDrum_deg>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
				nextDirection = BACKWARD;
 8001704:	2301      	movs	r3, #1
 8001706:	73bb      	strb	r3, [r7, #14]
				++moves;
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	3301      	adds	r3, #1
 800170c:	737b      	strb	r3, [r7, #13]
 800170e:	e007      	b.n	8001720 <_dropper_SowSeeds+0x60>
			}
			else{
				isSown = _dropper_RotateDrum_deg(-15);
 8001710:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8001714:	f7ff ff68 	bl	80015e8 <_dropper_RotateDrum_deg>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
				nextDirection = FORWARD;
 800171c:	2300      	movs	r3, #0
 800171e:	73bb      	strb	r3, [r7, #14]
		while(moves < 12 && isSown == SEED_ERR){
 8001720:	7b7b      	ldrb	r3, [r7, #13]
 8001722:	2b0b      	cmp	r3, #11
 8001724:	d802      	bhi.n	800172c <_dropper_SowSeeds+0x6c>
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d0e2      	beq.n	80016f2 <_dropper_SowSeeds+0x32>
			}
		}

		_dropper_StartVibrate();
 800172c:	f7ff ff16 	bl	800155c <_dropper_StartVibrate>
		HAL_Delay(400);
 8001730:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001734:	f000 fe28 	bl	8002388 <HAL_Delay>
		_dropper_StopVibrate();
 8001738:	f7ff ff24 	bl	8001584 <_dropper_StopVibrate>

		_dropper_CloseChannel(channel);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fee0 	bl	8001504 <_dropper_CloseChannel>

		return isSown;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	e01f      	b.n	8001792 <_dropper_SowSeeds+0xd2>
	}

	//casual seeds
	else if(channel == CHANNEL_4 || channel == CHANNEL_5 || channel == CHANNEL_6){
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d005      	beq.n	8001764 <_dropper_SowSeeds+0xa4>
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d002      	beq.n	8001764 <_dropper_SowSeeds+0xa4>
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d116      	bne.n	8001792 <_dropper_SowSeeds+0xd2>
		_dropper_OpenChannel(channel);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fea0 	bl	80014ac <_dropper_OpenChannel>
		HAL_Delay(100); //wait until the channel is open
 800176c:	2064      	movs	r0, #100	; 0x64
 800176e:	f000 fe0b 	bl	8002388 <HAL_Delay>
		_dropper_StartVibrate(CASUAL);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fef2 	bl	800155c <_dropper_StartVibrate>
		HAL_Delay(SOWING_TIME_FOR_CASUAL_SEEDS_MS);
 8001778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177c:	f000 fe04 	bl	8002388 <HAL_Delay>
		_dropper_StopVibrate(CASUAL);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff feff 	bl	8001584 <_dropper_StopVibrate>
		_dropper_CloseChannel(channel);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff febb 	bl	8001504 <_dropper_CloseChannel>

		return SEED_SOWN;
 800178e:	2300      	movs	r3, #0
 8001790:	e7ff      	b.n	8001792 <_dropper_SowSeeds+0xd2>
	}
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <_dropper_execCmd>:

}

///////////////////////////////////////////////////////////////////////////////////////////

void _dropper_execCmd(){
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b08f      	sub	sp, #60	; 0x3c
 80017a0:	af00      	add	r7, sp, #0
	command cmd;
	int8_t paramsNo = decodeMsg(&cmd);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc7f 	bl	80010a8 <decodeMsg>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(paramsNo == -1){
 80017b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d103      	bne.n	80017c2 <_dropper_execCmd+0x26>
		UART_sendMsg(REJECTION_MSG);
 80017ba:	482e      	ldr	r0, [pc, #184]	; (8001874 <_dropper_execCmd+0xd8>)
 80017bc:	f7ff fd32 	bl	8001224 <UART_sendMsg>
 80017c0:	e054      	b.n	800186c <_dropper_execCmd+0xd0>
		return; //invalid command
	}

	if(strcmp(cmd.cmdName, CMD_HOME) == 0){
 80017c2:	463b      	mov	r3, r7
 80017c4:	492c      	ldr	r1, [pc, #176]	; (8001878 <_dropper_execCmd+0xdc>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fd2a 	bl	8000220 <strcmp>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <_dropper_execCmd+0x42>
		UART_sendMsg(CONFIRMATION_MSG);
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <_dropper_execCmd+0xe0>)
 80017d4:	f7ff fd26 	bl	8001224 <UART_sendMsg>
		_dropper_execCmd_HomeDropper();
 80017d8:	f000 f8aa 	bl	8001930 <_dropper_execCmd_HomeDropper>
 80017dc:	e046      	b.n	800186c <_dropper_execCmd+0xd0>
	}
	else if(strcmp(cmd.cmdName, CMD_HELP) == 0){
 80017de:	463b      	mov	r3, r7
 80017e0:	4927      	ldr	r1, [pc, #156]	; (8001880 <_dropper_execCmd+0xe4>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fd1c 	bl	8000220 <strcmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <_dropper_execCmd+0x5e>
		UART_sendMsg(CONFIRMATION_MSG);
 80017ee:	4823      	ldr	r0, [pc, #140]	; (800187c <_dropper_execCmd+0xe0>)
 80017f0:	f7ff fd18 	bl	8001224 <UART_sendMsg>
		_dropper_execCmd_Help();
 80017f4:	f000 f84c 	bl	8001890 <_dropper_execCmd_Help>
 80017f8:	e038      	b.n	800186c <_dropper_execCmd+0xd0>
	}
	else if(strcmp(cmd.cmdName, CMD_SEND_STATUS) == 0){
 80017fa:	463b      	mov	r3, r7
 80017fc:	4921      	ldr	r1, [pc, #132]	; (8001884 <_dropper_execCmd+0xe8>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fd0e 	bl	8000220 <strcmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <_dropper_execCmd+0x7a>
		UART_sendMsg(CONFIRMATION_MSG);
 800180a:	481c      	ldr	r0, [pc, #112]	; (800187c <_dropper_execCmd+0xe0>)
 800180c:	f7ff fd0a 	bl	8001224 <UART_sendMsg>
		_dropper_execCmd_GetStatus();
 8001810:	f000 f848 	bl	80018a4 <_dropper_execCmd_GetStatus>
 8001814:	e02a      	b.n	800186c <_dropper_execCmd+0xd0>
	}
	else if(strcmp(cmd.cmdName, CMD_SOW) == 0){
 8001816:	463b      	mov	r3, r7
 8001818:	491b      	ldr	r1, [pc, #108]	; (8001888 <_dropper_execCmd+0xec>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd00 	bl	8000220 <strcmp>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11f      	bne.n	8001866 <_dropper_execCmd+0xca>
		if(paramsNo != 2){
 8001826:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <_dropper_execCmd+0x9a>
			UART_sendMsg(INVALID_ARGUMET_MSG);
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <_dropper_execCmd+0xf0>)
 8001830:	f7ff fcf8 	bl	8001224 <UART_sendMsg>
 8001834:	e01a      	b.n	800186c <_dropper_execCmd+0xd0>
		}
		else{
			UART_sendMsg(CONFIRMATION_MSG);
 8001836:	4811      	ldr	r0, [pc, #68]	; (800187c <_dropper_execCmd+0xe0>)
 8001838:	f7ff fcf4 	bl	8001224 <UART_sendMsg>
			_dropper_execCmd_Sow((uint8_t)cmd.params[0], (uint8_t)cmd.params[1]);
 800183c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f9aa 	bl	8000b9c <__aeabi_d2uiz>
 8001848:	4603      	mov	r3, r0
 800184a:	b2dc      	uxtb	r4, r3
 800184c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f9a2 	bl	8000b9c <__aeabi_d2uiz>
 8001858:	4603      	mov	r3, r0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4619      	mov	r1, r3
 800185e:	4620      	mov	r0, r4
 8001860:	f000 f828 	bl	80018b4 <_dropper_execCmd_Sow>
 8001864:	e002      	b.n	800186c <_dropper_execCmd+0xd0>
		}
	}
	else{
		UART_sendMsg(REJECTION_MSG);
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <_dropper_execCmd+0xd8>)
 8001868:	f7ff fcdc 	bl	8001224 <UART_sendMsg>
	}
}
 800186c:	373c      	adds	r7, #60	; 0x3c
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	0800a398 	.word	0x0800a398
 8001878:	0800a3a0 	.word	0x0800a3a0
 800187c:	0800a3a4 	.word	0x0800a3a4
 8001880:	0800a3ac 	.word	0x0800a3ac
 8001884:	0800a3b0 	.word	0x0800a3b0
 8001888:	0800a3b4 	.word	0x0800a3b4
 800188c:	0800a3b8 	.word	0x0800a3b8

08001890 <_dropper_execCmd_Help>:

void _dropper_execCmd_Help(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	UART_sendMsg(HELP_TEXT);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <_dropper_execCmd_Help+0x10>)
 8001896:	f7ff fcc5 	bl	8001224 <UART_sendMsg>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0800a3cc 	.word	0x0800a3cc

080018a4 <_dropper_execCmd_GetStatus>:

void _dropper_execCmd_GetStatus(){
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_dropper_execCmd_Sow>:

void _dropper_execCmd_Sow(uint8_t channelNo, uint8_t noOfSeeds){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	4613      	mov	r3, r2
 80018c2:	71bb      	strb	r3, [r7, #6]
	if(channelNo > NUMBER_OF_CHANNELS || channelNo < 1){
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d802      	bhi.n	80018d0 <_dropper_execCmd_Sow+0x1c>
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <_dropper_execCmd_Sow+0x24>
		UART_sendMsg(INVALID_ARGUMET_MSG);
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <_dropper_execCmd_Sow+0x70>)
 80018d2:	f7ff fca7 	bl	8001224 <UART_sendMsg>
		return;
 80018d6:	e021      	b.n	800191c <_dropper_execCmd_Sow+0x68>
	}

	if(noOfSeeds > MAX_SOWS_AT_ONCE) noOfSeeds = MAX_SOWS_AT_ONCE;
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b0a      	cmp	r3, #10
 80018dc:	d901      	bls.n	80018e2 <_dropper_execCmd_Sow+0x2e>
 80018de:	230a      	movs	r3, #10
 80018e0:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i = 0; i<noOfSeeds; i++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e015      	b.n	8001914 <_dropper_execCmd_Sow+0x60>
		if(_dropper_SowSeeds((_dropperChannelName)channelNo - 1) == SEED_SOWN){
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fee6 	bl	80016c0 <_dropper_SowSeeds>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <_dropper_execCmd_Sow+0x54>
			UART_sendMsg(CMD_EXEC_SUCCESFULLY_MSG);
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <_dropper_execCmd_Sow+0x74>)
 8001902:	f7ff fc8f 	bl	8001224 <UART_sendMsg>
 8001906:	e002      	b.n	800190e <_dropper_execCmd_Sow+0x5a>
		}
		else{
			UART_sendMsg(CMD_EXEC_FAILED_MSG);
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <_dropper_execCmd_Sow+0x78>)
 800190a:	f7ff fc8b 	bl	8001224 <UART_sendMsg>
	for(uint8_t i = 0; i<noOfSeeds; i++){
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	3301      	adds	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3e5      	bcc.n	80018e8 <_dropper_execCmd_Sow+0x34>
		}
	}

}
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	0800a3b8 	.word	0x0800a3b8
 8001928:	0800a440 	.word	0x0800a440
 800192c:	0800a454 	.word	0x0800a454

08001930 <_dropper_execCmd_HomeDropper>:

void _dropper_execCmd_SowExt(uint8_t channelNo, uint8_t noOfSeeds, uint8_t potNo){

}

void _dropper_execCmd_HomeDropper(){
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a78      	ldr	r2, [pc, #480]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800196e:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a72      	ldr	r2, [pc, #456]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a6c      	ldr	r2, [pc, #432]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a60      	ldr	r2, [pc, #384]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <MX_GPIO_Init+0x1fc>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 80019ce:	2200      	movs	r2, #0
 80019d0:	f240 7123 	movw	r1, #1827	; 0x723
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f001 f84a 	bl	8002a70 <HAL_GPIO_WritePin>
                          |RELAY_3_Pin|RELAY_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 80019dc:	2200      	movs	r2, #0
 80019de:	f64e 6176 	movw	r1, #61046	; 0xee76
 80019e2:	4857      	ldr	r0, [pc, #348]	; (8001b40 <MX_GPIO_Init+0x200>)
 80019e4:	f001 f844 	bl	8002a70 <HAL_GPIO_WritePin>
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80019ee:	4855      	ldr	r0, [pc, #340]	; (8001b44 <MX_GPIO_Init+0x204>)
 80019f0:	f001 f83e 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SENSOR_9_Pin|SENSOR_10_Pin;
 80019f4:	f242 030c 	movw	r3, #8204	; 0x200c
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	484e      	ldr	r0, [pc, #312]	; (8001b44 <MX_GPIO_Init+0x204>)
 8001a0a:	f000 feaf 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 8001a0e:	f240 7323 	movw	r3, #1827	; 0x723
 8001a12:	617b      	str	r3, [r7, #20]
                          |RELAY_3_Pin|RELAY_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f000 fe9f 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a2e:	230c      	movs	r3, #12
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f000 fe8e 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_12_Pin|SENSOR_6_Pin;
 8001a50:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f000 fe80 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_11_Pin|SENSOR_7_Pin|SENSOR_8_Pin;
 8001a6c:	f241 0381 	movw	r3, #4225	; 0x1081
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	482f      	ldr	r0, [pc, #188]	; (8001b40 <MX_GPIO_Init+0x200>)
 8001a82:	f000 fe73 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 8001a86:	f64e 6376 	movw	r3, #61046	; 0xee76
 8001a8a:	617b      	str	r3, [r7, #20]
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4828      	ldr	r0, [pc, #160]	; (8001b40 <MX_GPIO_Init+0x200>)
 8001aa0:	f000 fe64 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin;
 8001aa4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4821      	ldr	r0, [pc, #132]	; (8001b44 <MX_GPIO_Init+0x204>)
 8001abe:	f000 fe55 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_5_Pin;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_5_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ada:	f000 fe47 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENSOR_3_Pin|SENSOR_1_Pin|SENSOR_2_Pin;
 8001ade:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4813      	ldr	r0, [pc, #76]	; (8001b44 <MX_GPIO_Init+0x204>)
 8001af6:	f000 fe39 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_4_Pin;
 8001afa:	2304      	movs	r3, #4
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001afe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_4_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_GPIO_Init+0x208>)
 8001b10:	f000 fe2c 	bl	800276c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2008      	movs	r0, #8
 8001b1a:	f000 fd32 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b1e:	2008      	movs	r0, #8
 8001b20:	f000 fd49 	bl	80025b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2028      	movs	r0, #40	; 0x28
 8001b2a:	f000 fd2a 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b2e:	2028      	movs	r0, #40	; 0x28
 8001b30:	f000 fd41 	bl	80025b6 <HAL_NVIC_EnableIRQ>

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00

08001b4c <HAL_TIM_PWM_PulseFinishedCallback>:
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		_dropper_StepIRQ();
 8001b5e:	f7ff fb85 	bl	800126c <_dropper_StepIRQ>
	}
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40000400 	.word	0x40000400

08001b70 <HAL_GPIO_EXTI_Callback>:

uint8_t channelNo[4] = {0};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == SEED_SENSOR_CHANNEL_1_PIN	 ||
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_EXTI_Callback+0x22>
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_EXTI_Callback+0x22>
			GPIO_Pin == SEED_SENSOR_CHANNEL_2_PIN ||
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b90:	d102      	bne.n	8001b98 <HAL_GPIO_EXTI_Callback+0x28>
			GPIO_Pin == SEED_SENSOR_CHANNEL_3_PIN){
		_dropper_SeedSensorIRQ();
 8001b92:	f7ff fb79 	bl	8001288 <_dropper_SeedSensorIRQ>
	}
	else if(GPIO_Pin == DROPPER_HOMING_SENSOR_PIN){
		_dropper_HomingSensorIRQ();
	}
}
 8001b96:	e004      	b.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_Pin == DROPPER_HOMING_SENSOR_PIN){
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x32>
		_dropper_HomingSensorIRQ();
 8001b9e:	f7ff fb7f 	bl	80012a0 <_dropper_HomingSensorIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bb2:	f000 fb78 	bl	80022a6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bb6:	f000 f821 	bl	8001bfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bba:	f7ff fec1 	bl	8001940 <MX_GPIO_Init>
	MX_TIM3_Init();
 8001bbe:	f000 f9bf 	bl	8001f40 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001bc2:	f000 fa9b 	bl	80020fc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	_dropper_Init();
 8001bc6:	f7ff fb77 	bl	80012b8 <_dropper_Init>
	HAL_Delay(2000);
 8001bca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bce:	f000 fbdb 	bl	8002388 <HAL_Delay>
	_dropperChannelName m_channels[] = {CHANNEL_1, CHANNEL_2, CHANNEL_3};
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <main+0x48>)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	4611      	mov	r1, r2
 8001bda:	8019      	strh	r1, [r3, #0]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	0c12      	lsrs	r2, r2, #16
 8001be0:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(_dropper_UART.msgReadyToRead){
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <main+0x4c>)
 8001be4:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0fa      	beq.n	8001be2 <main+0x36>
			_dropper_execCmd();
 8001bec:	f7ff fdd6 	bl	800179c <_dropper_execCmd>
		if(_dropper_UART.msgReadyToRead){
 8001bf0:	e7f7      	b.n	8001be2 <main+0x36>
 8001bf2:	bf00      	nop
 8001bf4:	0800a468 	.word	0x0800a468
 8001bf8:	200001fc 	.word	0x200001fc

08001bfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 0318 	add.w	r3, r7, #24
 8001c06:	2238      	movs	r2, #56	; 0x38
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fccc 	bl	80075a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 ff56 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c36:	2302      	movs	r3, #2
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001c3e:	2355      	movs	r3, #85	; 0x55
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fff0 	bl	8002c38 <HAL_RCC_OscConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001c5e:	f000 f818 	bl	8001c92 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c62:	230f      	movs	r3, #15
 8001c64:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c66:	2303      	movs	r3, #3
 8001c68:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2104      	movs	r1, #4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f001 faee 	bl	800325c <HAL_RCC_ClockConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001c86:	f000 f804 	bl	8001c92 <Error_Handler>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	3750      	adds	r7, #80	; 0x50
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c96:	b672      	cpsid	i
}
 8001c98:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c9a:	e7fe      	b.n	8001c9a <Error_Handler+0x8>

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cd2:	f000 ffa1 	bl	8002c18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 fb0c 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_4_Pin);
 8001d3c:	2004      	movs	r0, #4
 8001d3e:	f000 feaf 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TIM3_IRQHandler+0x10>)
 8001d4e:	f002 f9d7 	bl	8004100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200003f4 	.word	0x200003f4

08001d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <USART1_IRQHandler+0x10>)
 8001d62:	f003 fbf1 	bl	8005548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000440 	.word	0x20000440

08001d70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_3_Pin);
 8001d74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d78:	f000 fe92 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_1_Pin);
 8001d7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d80:	f000 fe8e 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_2_Pin);
 8001d84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d88:	f000 fe8a 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return 1;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_kill>:

int _kill(int pid, int sig)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001daa:	f005 fbd3 	bl	8007554 <__errno>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2216      	movs	r2, #22
 8001db2:	601a      	str	r2, [r3, #0]
  return -1;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_exit>:

void _exit (int status)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe7 	bl	8001da0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd2:	e7fe      	b.n	8001dd2 <_exit+0x12>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de6:	f3af 8000 	nop.w
 8001dea:	4601      	mov	r1, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf0      	blt.n	8001de6 <_read+0x12>
  }

  return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e009      	b.n	8001e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf1      	blt.n	8001e20 <_write+0x12>
  }
  return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_isatty>:

int _isatty(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f005 fb38 	bl	8007554 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2001c000 	.word	0x2001c000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	200003f0 	.word	0x200003f0
 8001f18:	200004e8 	.word	0x200004e8

08001f1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	615a      	str	r2, [r3, #20]
 8001f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f72:	4b32      	ldr	r3, [pc, #200]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f74:	4a32      	ldr	r2, [pc, #200]	; (8002040 <MX_TIM3_Init+0x100>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001f78:	4b30      	ldr	r3, [pc, #192]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f7a:	22a9      	movs	r2, #169	; 0xa9
 8001f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f98:	4828      	ldr	r0, [pc, #160]	; (800203c <MX_TIM3_Init+0xfc>)
 8001f9a:	f001 fdb7 	bl	8003b0c <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001fa4:	f7ff fe75 	bl	8001c92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <MX_TIM3_Init+0xfc>)
 8001fb6:	f002 fb07 	bl	80045c8 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fc0:	f7ff fe67 	bl	8001c92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fc4:	481d      	ldr	r0, [pc, #116]	; (800203c <MX_TIM3_Init+0xfc>)
 8001fc6:	f001 fdf8 	bl	8003bba <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fd0:	f7ff fe5f 	bl	8001c92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4816      	ldr	r0, [pc, #88]	; (800203c <MX_TIM3_Init+0xfc>)
 8001fe4:	f003 f8b2 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fee:	f7ff fe50 	bl	8001c92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff2:	2360      	movs	r3, #96	; 0x60
 8001ff4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <MX_TIM3_Init+0xfc>)
 800200a:	f002 f9c9 	bl	80043a0 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002014:	f7ff fe3d 	bl	8001c92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	2204      	movs	r2, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4807      	ldr	r0, [pc, #28]	; (800203c <MX_TIM3_Init+0xfc>)
 8002020:	f002 f9be 	bl	80043a0 <HAL_TIM_PWM_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800202a:	f7ff fe32 	bl	8001c92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800202e:	4803      	ldr	r0, [pc, #12]	; (800203c <MX_TIM3_Init+0xfc>)
 8002030:	f000 f82e 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8002034:	bf00      	nop
 8002036:	3738      	adds	r7, #56	; 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200003f4 	.word	0x200003f4
 8002040:	40000400 	.word	0x40000400

08002044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_TIM_Base_MspInit+0x44>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d113      	bne.n	800207e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_TIM_Base_MspInit+0x48>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_TIM_Base_MspInit+0x48>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_TIM_Base_MspInit+0x48>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	201d      	movs	r0, #29
 8002074:	f000 fa85 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002078:	201d      	movs	r0, #29
 800207a:	f000 fa9c 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40000400 	.word	0x40000400
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_TIM_MspPostInit+0x64>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11c      	bne.n	80020ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_TIM_MspPostInit+0x68>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_TIM_MspPostInit+0x68>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_TIM_MspPostInit+0x68>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23c0      	movs	r3, #192	; 0xc0
 80020cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020da:	2302      	movs	r3, #2
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f000 fb40 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40021000 	.word	0x40021000

080020fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002102:	4a23      	ldr	r2, [pc, #140]	; (8002190 <MX_USART1_UART_Init+0x94>)
 8002104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800210c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_USART1_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002122:	220c      	movs	r2, #12
 8002124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <MX_USART1_UART_Init+0x90>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_USART1_UART_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002144:	4811      	ldr	r0, [pc, #68]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002146:	f003 f8d5 	bl	80052f4 <HAL_UART_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002150:	f7ff fd9f 	bl	8001c92 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002154:	2100      	movs	r1, #0
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <MX_USART1_UART_Init+0x90>)
 8002158:	f005 f92d 	bl	80073b6 <HAL_UARTEx_SetTxFifoThreshold>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002162:	f7ff fd96 	bl	8001c92 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002166:	2100      	movs	r1, #0
 8002168:	4808      	ldr	r0, [pc, #32]	; (800218c <MX_USART1_UART_Init+0x90>)
 800216a:	f005 f962 	bl	8007432 <HAL_UARTEx_SetRxFifoThreshold>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002174:	f7ff fd8d 	bl	8001c92 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_USART1_UART_Init+0x90>)
 800217a:	f005 f8e3 	bl	8007344 <HAL_UARTEx_DisableFifoMode>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002184:	f7ff fd85 	bl	8001c92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000440 	.word	0x20000440
 8002190:	40013800 	.word	0x40013800

08002194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b09e      	sub	sp, #120	; 0x78
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2250      	movs	r2, #80	; 0x50
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f005 f9f7 	bl	80075a8 <memset>
  if(uartHandle->Instance==USART1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_UART_MspInit+0xb4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d13d      	bne.n	8002240 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fa5f 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021dc:	f7ff fd59 	bl	8001c92 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_UART_MspInit+0xb8>)
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_UART_MspInit+0xb8>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ea:	6613      	str	r3, [r2, #96]	; 0x60
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_UART_MspInit+0xb8>)
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_UART_MspInit+0xb8>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a13      	ldr	r2, [pc, #76]	; (800224c <HAL_UART_MspInit+0xb8>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_UART_MspInit+0xb8>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002210:	2330      	movs	r3, #48	; 0x30
 8002212:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002220:	2307      	movs	r3, #7
 8002222:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002228:	4619      	mov	r1, r3
 800222a:	4809      	ldr	r0, [pc, #36]	; (8002250 <HAL_UART_MspInit+0xbc>)
 800222c:	f000 fa9e 	bl	800276c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	2025      	movs	r0, #37	; 0x25
 8002236:	f000 f9a4 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800223a:	2025      	movs	r0, #37	; 0x25
 800223c:	f000 f9bb 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002240:	bf00      	nop
 8002242:	3778      	adds	r7, #120	; 0x78
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40013800 	.word	0x40013800
 800224c:	40021000 	.word	0x40021000
 8002250:	48000800 	.word	0x48000800

08002254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002256:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002258:	f7ff fe60 	bl	8001f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <LoopForever+0x6>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	; (8002294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <LoopForever+0xe>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	; (80022a0 <LoopForever+0x16>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002282:	f005 f96d 	bl	8007560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002286:	f7ff fc91 	bl	8001bac <main>

0800228a <LoopForever>:

LoopForever:
    b LoopForever
 800228a:	e7fe      	b.n	800228a <LoopForever>
  ldr   r0, =_estack
 800228c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002298:	0800a8ec 	.word	0x0800a8ec
  ldr r2, =_sbss
 800229c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80022a0:	200004e8 	.word	0x200004e8

080022a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_2_IRQHandler>

080022a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f95b 	bl	800256c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f80e 	bl	80022d8 <HAL_InitTick>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	e001      	b.n	80022cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c8:	f7ff fce8 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022cc:	79fb      	ldrb	r3, [r7, #7]

}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_InitTick+0x68>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d022      	beq.n	8002332 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_InitTick+0x6c>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_InitTick+0x68>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f966 	bl	80025d2 <HAL_SYSTICK_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10f      	bne.n	800232c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	d809      	bhi.n	8002326 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002312:	2200      	movs	r2, #0
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	f000 f932 	bl	8002582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_InitTick+0x70>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e007      	b.n	8002336 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e004      	b.n	8002336 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e001      	b.n	8002336 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000008 	.word	0x20000008
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_IncTick+0x1c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x20>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4413      	add	r3, r2
 800235a:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_IncTick+0x1c>)
 800235c:	6013      	str	r3, [r2, #0]
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	200004d4 	.word	0x200004d4
 800236c:	20000008 	.word	0x20000008

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200004d4 	.word	0x200004d4

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff ffee 	bl	8002370 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d004      	beq.n	80023ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_Delay+0x40>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ac:	bf00      	nop
 80023ae:	f7ff ffdf 	bl	8002370 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d8f7      	bhi.n	80023ae <HAL_Delay+0x26>
  {
  }
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000008 	.word	0x20000008

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <__NVIC_EnableIRQ+0x38>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d301      	bcc.n	800253e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253a:	2301      	movs	r3, #1
 800253c:	e00f      	b.n	800255e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <SysTick_Config+0x40>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002546:	210f      	movs	r1, #15
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f7ff ff8e 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Config+0x40>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SysTick_Config+0x40>)
 8002558:	2207      	movs	r2, #7
 800255a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff29 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff40 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff90 	bl	80024c0 <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff5f 	bl	800246c <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff33 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffa4 	bl	8002528 <SysTick_Config>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d005      	beq.n	800260e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2204      	movs	r2, #4
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e037      	b.n	800267e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 020e 	bic.w	r2, r2, #14
 800261c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800265a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002672:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800267c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d00d      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e047      	b.n	8002760 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800271c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800273e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
    }
  }
  return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800277a:	e15a      	b.n	8002a32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 814c 	beq.w	8002a2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d005      	beq.n	80027ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d130      	bne.n	800280e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e2:	2201      	movs	r2, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0201 	and.w	r2, r3, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b03      	cmp	r3, #3
 8002818:	d017      	beq.n	800284a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d123      	bne.n	800289e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	6939      	ldr	r1, [r7, #16]
 800289a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e0:	4b5b      	ldr	r3, [pc, #364]	; (8002a50 <HAL_GPIO_Init+0x2e4>)
 80028e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e4:	4a5a      	ldr	r2, [pc, #360]	; (8002a50 <HAL_GPIO_Init+0x2e4>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6613      	str	r3, [r2, #96]	; 0x60
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_GPIO_Init+0x2e4>)
 80028ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f8:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002922:	d01f      	beq.n	8002964 <HAL_GPIO_Init+0x1f8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x2ec>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d019      	beq.n	8002960 <HAL_GPIO_Init+0x1f4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_GPIO_Init+0x2f0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_GPIO_Init+0x1f0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x2f4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00d      	beq.n	8002958 <HAL_GPIO_Init+0x1ec>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_GPIO_Init+0x2f8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <HAL_GPIO_Init+0x1e8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_GPIO_Init+0x2fc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_GPIO_Init+0x1e4>
 800294c:	2305      	movs	r3, #5
 800294e:	e00a      	b.n	8002966 <HAL_GPIO_Init+0x1fa>
 8002950:	2306      	movs	r3, #6
 8002952:	e008      	b.n	8002966 <HAL_GPIO_Init+0x1fa>
 8002954:	2304      	movs	r3, #4
 8002956:	e006      	b.n	8002966 <HAL_GPIO_Init+0x1fa>
 8002958:	2303      	movs	r3, #3
 800295a:	e004      	b.n	8002966 <HAL_GPIO_Init+0x1fa>
 800295c:	2302      	movs	r3, #2
 800295e:	e002      	b.n	8002966 <HAL_GPIO_Init+0x1fa>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_GPIO_Init+0x1fa>
 8002964:	2300      	movs	r3, #0
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	f002 0203 	and.w	r2, r2, #3
 800296c:	0092      	lsls	r2, r2, #2
 800296e:	4093      	lsls	r3, r2
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002976:	4937      	ldr	r1, [pc, #220]	; (8002a54 <HAL_GPIO_Init+0x2e8>)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002984:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <HAL_GPIO_Init+0x300>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a8:	4a30      	ldr	r2, [pc, #192]	; (8002a6c <HAL_GPIO_Init+0x300>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_GPIO_Init+0x300>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <HAL_GPIO_Init+0x300>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_GPIO_Init+0x300>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_GPIO_Init+0x300>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_GPIO_Init+0x300>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a26:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <HAL_GPIO_Init+0x300>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f ae9d 	bne.w	800277c <HAL_GPIO_Init+0x10>
  }
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010000 	.word	0x40010000
 8002a58:	48000400 	.word	0x48000400
 8002a5c:	48000800 	.word	0x48000800
 8002a60:	48000c00 	.word	0x48000c00
 8002a64:	48001000 	.word	0x48001000
 8002a68:	48001400 	.word	0x48001400
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f856 	bl	8001b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40010400 	.word	0x40010400

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d141      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d131      	bne.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afc:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b04:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b0c:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2232      	movs	r2, #50	; 0x32
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a3f      	ldr	r2, [pc, #252]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0c9b      	lsrs	r3, r3, #18
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b22:	e002      	b.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d102      	bne.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f2      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4a:	d158      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e057      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b56:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b60:	e04d      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b68:	d141      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d131      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2232      	movs	r2, #50	; 0x32
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	e002      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d102      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d112      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e011      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bec:	e007      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	20000000 	.word	0x20000000
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c26:	6093      	str	r3, [r2, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e2fe      	b.n	8003248 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d075      	beq.n	8002d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c60:	4b94      	ldr	r3, [pc, #592]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3e>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_OscConfig+0x44>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d10b      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	4b8d      	ldr	r3, [pc, #564]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05b      	beq.n	8002d40 <HAL_RCC_OscConfig+0x108>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d157      	bne.n	8002d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e2d9      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x74>
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a84      	ldr	r2, [pc, #528]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x98>
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7e      	ldr	r2, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b7c      	ldr	r3, [pc, #496]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7b      	ldr	r2, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cd0:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a74      	ldr	r2, [pc, #464]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fb3e 	bl	8002370 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7ff fb3a 	bl	8002370 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e29e      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xc0>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7ff fb2a 	bl	8002370 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7ff fb26 	bl	8002370 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e28a      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d32:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0xe8>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d075      	beq.n	8002e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_OscConfig+0x136>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_OscConfig+0x13c>
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11f      	bne.n	8002db4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d74:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x154>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e25d      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	4946      	ldr	r1, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_RCC_OscConfig+0x280>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fa97 	bl	80022d8 <HAL_InitTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d043      	beq.n	8002e38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e249      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fad2 	bl	8002370 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7ff face 	bl	8002370 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e232      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de2:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	492d      	ldr	r1, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e01a      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7ff faae 	bl	8002370 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7ff faaa 	bl	8002370 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e20e      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1e0>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d041      	beq.n	8002eca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fa87 	bl	8002370 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e66:	f7ff fa83 	bl	8002370 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1e7      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ef      	beq.n	8002e66 <HAL_RCC_OscConfig+0x22e>
 8002e86:	e020      	b.n	8002eca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7ff fa6a 	bl	8002370 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e9e:	e00d      	b.n	8002ebc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7ff fa66 	bl	8002370 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d906      	bls.n	8002ebc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1ca      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ebc:	4b8c      	ldr	r3, [pc, #560]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ea      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a6 	beq.w	8003024 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002edc:	4b84      	ldr	r3, [pc, #528]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_OscConfig+0x2b4>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x2b6>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b7f      	ldr	r3, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0e:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7ff fa23 	bl	8002370 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7ff fa1f 	bl	8002370 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e183      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x4bc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d108      	bne.n	8002f66 <HAL_RCC_OscConfig+0x32e>
 8002f54:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f64:	e024      	b.n	8002fb0 <HAL_RCC_OscConfig+0x378>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d110      	bne.n	8002f90 <HAL_RCC_OscConfig+0x358>
 8002f6e:	4b60      	ldr	r3, [pc, #384]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	4a5a      	ldr	r2, [pc, #360]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x378>
 8002f90:	4b57      	ldr	r3, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4a56      	ldr	r2, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d016      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7ff f9da 	bl	8002370 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7ff f9d6 	bl	8002370 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e138      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ed      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x388>
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7ff f9c3 	bl	8002370 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7ff f9bf 	bl	8002370 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e121      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1ed      	bne.n	8002fee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003012:	7ffb      	ldrb	r3, [r7, #31]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003018:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a34      	ldr	r2, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d03c      	beq.n	80030aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01c      	beq.n	8003072 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003038:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800303e:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7ff f992 	bl	8002370 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003050:	f7ff f98e 	bl	8002370 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0f2      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ef      	beq.n	8003050 <HAL_RCC_OscConfig+0x418>
 8003070:	e01b      	b.n	80030aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7ff f975 	bl	8002370 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308a:	f7ff f971 	bl	8002370 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0d5      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 800309e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ef      	bne.n	800308a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80c9 	beq.w	8003246 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	f000 8083 	beq.w	80031c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d15e      	bne.n	8003188 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7ff f94b 	bl	8002370 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e00c      	b.n	80030f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7ff f947 	bl	8002370 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d905      	bls.n	80030f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0ab      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ec      	bne.n	80030de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_RCC_OscConfig+0x61c>)
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6a11      	ldr	r1, [r2, #32]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003114:	3a01      	subs	r2, #1
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800311e:	0212      	lsls	r2, r2, #8
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003126:	0852      	lsrs	r2, r2, #1
 8003128:	3a01      	subs	r2, #1
 800312a:	0552      	lsls	r2, r2, #21
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	0652      	lsls	r2, r2, #25
 8003138:	4311      	orrs	r1, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800313e:	06d2      	lsls	r2, r2, #27
 8003140:	430a      	orrs	r2, r1
 8003142:	4943      	ldr	r1, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a40      	ldr	r2, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7ff f906 	bl	8002370 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7ff f902 	bl	8002370 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e066      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x530>
 8003186:	e05e      	b.n	8003246 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a30      	ldr	r2, [pc, #192]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 800318e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7ff f8ec 	bl	8002370 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7ff f8e8 	bl	8002370 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04c      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	4924      	ldr	r1, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x620>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
 80031c6:	e03e      	b.n	8003246 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e039      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x618>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d12c      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	3b01      	subs	r3, #1
 80031f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d123      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d11b      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d113      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d109      	bne.n	8003242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	019f800c 	.word	0x019f800c
 8003258:	feeefffc 	.word	0xfeeefffc

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e11e      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b91      	ldr	r3, [pc, #580]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b8e      	ldr	r3, [pc, #568]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 020f 	bic.w	r2, r3, #15
 800328a:	498c      	ldr	r1, [pc, #560]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b8a      	ldr	r3, [pc, #552]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e106      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d073      	beq.n	8003398 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d129      	bne.n	800330c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0f4      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032c8:	f000 f99e 	bl	8003608 <RCC_GetSysClockFreqFromPLLSource>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4a7c      	ldr	r2, [pc, #496]	; (80034c4 <HAL_RCC_ClockConfig+0x268>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d93f      	bls.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032d6:	4b7a      	ldr	r3, [pc, #488]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d033      	beq.n	8003356 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d12f      	bne.n	8003356 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032f6:	4b72      	ldr	r3, [pc, #456]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fe:	4a70      	ldr	r2, [pc, #448]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e024      	b.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003314:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0c6      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0be      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003334:	f000 f8ce 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4a61      	ldr	r2, [pc, #388]	; (80034c4 <HAL_RCC_ClockConfig+0x268>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d909      	bls.n	8003356 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800334a:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 800334c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003350:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b5a      	ldr	r3, [pc, #360]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4957      	ldr	r1, [pc, #348]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7ff f802 	bl	8002370 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe fffe 	bl	8002370 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e095      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033d0:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4936      	ldr	r1, [pc, #216]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
 80033ea:	e008      	b.n	80033fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d105      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033f2:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d21d      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340c:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 020f 	bic.w	r2, r3, #15
 8003414:	4929      	ldr	r1, [pc, #164]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800341c:	f7fe ffa8 	bl	8002370 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe ffa4 	bl	8002370 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e03b      	b.n	80034b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d1ed      	bne.n	8003424 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4917      	ldr	r1, [pc, #92]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490f      	ldr	r1, [pc, #60]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003486:	f000 f825 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 800348a:	4602      	mov	r2, r0
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_ClockConfig+0x264>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	490c      	ldr	r1, [pc, #48]	; (80034c8 <HAL_RCC_ClockConfig+0x26c>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x270>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_RCC_ClockConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe ff14 	bl	80022d8 <HAL_InitTick>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	04c4b400 	.word	0x04c4b400
 80034c8:	0800a46c 	.word	0x0800a46c
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034da:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e047      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e03e      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d136      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3301      	adds	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003528:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003532:	68d2      	ldr	r2, [r2, #12]
 8003534:	0a12      	lsrs	r2, r2, #8
 8003536:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
      break;
 8003540:	e00c      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	0a12      	lsrs	r2, r2, #8
 8003550:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0e5b      	lsrs	r3, r3, #25
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	3301      	adds	r3, #1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e001      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800357c:	693b      	ldr	r3, [r7, #16]
}
 800357e:	4618      	mov	r0, r3
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	00f42400 	.word	0x00f42400
 8003594:	016e3600 	.word	0x016e3600

08003598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b4:	f7ff fff0 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	0800a47c 	.word	0x0800a47c

080035dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e0:	f7ff ffda 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0adb      	lsrs	r3, r3, #11
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4904      	ldr	r1, [pc, #16]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	0800a47c 	.word	0x0800a47c

08003608 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d10c      	bne.n	8003646 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	0a12      	lsrs	r2, r2, #8
 800363a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]
    break;
 8003644:	e00c      	b.n	8003660 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	0a12      	lsrs	r2, r2, #8
 8003654:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    break;
 800365e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0e5b      	lsrs	r3, r3, #25
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800367a:	687b      	ldr	r3, [r7, #4]
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40021000 	.word	0x40021000
 800368c:	016e3600 	.word	0x016e3600
 8003690:	00f42400 	.word	0x00f42400

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800369c:	2300      	movs	r3, #0
 800369e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8098 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6593      	str	r3, [r2, #88]	; 0x58
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036da:	2301      	movs	r3, #1
 80036dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ea:	f7fe fe41 	bl	8002370 <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f0:	e009      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f2:	f7fe fe3d 	bl	8002370 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d902      	bls.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	74fb      	strb	r3, [r7, #19]
        break;
 8003704:	e005      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d159      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01e      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d019      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003760:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fe fdfd 	bl	8002370 <HAL_GetTick>
 8003776:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003778:	e00b      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fdf9 	bl	8002370 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d902      	bls.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	74fb      	strb	r3, [r7, #19]
            break;
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ec      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4ba7      	ldr	r3, [pc, #668]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4aa6      	ldr	r2, [pc, #664]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	4ba1      	ldr	r3, [pc, #644]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 0203 	bic.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	499d      	ldr	r1, [pc, #628]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003810:	4b98      	ldr	r3, [pc, #608]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 020c 	bic.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4995      	ldr	r1, [pc, #596]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003832:	4b90      	ldr	r3, [pc, #576]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	498c      	ldr	r1, [pc, #560]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003854:	4b87      	ldr	r3, [pc, #540]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	4984      	ldr	r1, [pc, #528]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	497b      	ldr	r1, [pc, #492]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003898:	4b76      	ldr	r3, [pc, #472]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4973      	ldr	r1, [pc, #460]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	496a      	ldr	r1, [pc, #424]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4962      	ldr	r1, [pc, #392]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038fe:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	4959      	ldr	r1, [pc, #356]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003920:	4b54      	ldr	r3, [pc, #336]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	4951      	ldr	r1, [pc, #324]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393e:	2b00      	cmp	r3, #0
 8003940:	d015      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4948      	ldr	r1, [pc, #288]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003960:	d105      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003962:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	4a43      	ldr	r2, [pc, #268]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d015      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800397a:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	493a      	ldr	r1, [pc, #232]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d105      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4a35      	ldr	r2, [pc, #212]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d015      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	492c      	ldr	r1, [pc, #176]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d0:	d105      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039dc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d015      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	491e      	ldr	r1, [pc, #120]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a08:	d105      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a14:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d015      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	4910      	ldr	r1, [pc, #64]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a40:	d105      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4902      	ldr	r1, [pc, #8]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	e001      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a74:	40021000 	.word	0x40021000
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4918      	ldr	r1, [pc, #96]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ade:	490a      	ldr	r1, [pc, #40]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e049      	b.n	8003bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fe fa86 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 fe68 	bl	8004820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e049      	b.n	8003c60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f841 	bl	8003c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 fe11 	bl	8004820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_TIM_PWM_Start_IT+0x28>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e03c      	b.n	8003d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d109      	bne.n	8003cbe <HAL_TIM_PWM_Start_IT+0x42>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e02f      	b.n	8003d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d109      	bne.n	8003cd8 <HAL_TIM_PWM_Start_IT+0x5c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e022      	b.n	8003d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b0c      	cmp	r3, #12
 8003cdc:	d109      	bne.n	8003cf2 <HAL_TIM_PWM_Start_IT+0x76>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	e015      	b.n	8003d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start_IT+0x90>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e008      	b.n	8003d1e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0ec      	b.n	8003f00 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start_IT+0xba>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d34:	e023      	b.n	8003d7e <HAL_TIM_PWM_Start_IT+0x102>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start_IT+0xca>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	e01b      	b.n	8003d7e <HAL_TIM_PWM_Start_IT+0x102>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start_IT+0xda>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d54:	e013      	b.n	8003d7e <HAL_TIM_PWM_Start_IT+0x102>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start_IT+0xea>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d64:	e00b      	b.n	8003d7e <HAL_TIM_PWM_Start_IT+0x102>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_PWM_Start_IT+0xfa>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d74:	e003      	b.n	8003d7e <HAL_TIM_PWM_Start_IT+0x102>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d841      	bhi.n	8003e08 <HAL_TIM_PWM_Start_IT+0x18c>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_TIM_PWM_Start_IT+0x110>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003e09 	.word	0x08003e09
 8003d94:	08003e09 	.word	0x08003e09
 8003d98:	08003e09 	.word	0x08003e09
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003e09 	.word	0x08003e09
 8003da4:	08003e09 	.word	0x08003e09
 8003da8:	08003e09 	.word	0x08003e09
 8003dac:	08003de5 	.word	0x08003de5
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003df7 	.word	0x08003df7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0202 	orr.w	r2, r2, #2
 8003dce:	60da      	str	r2, [r3, #12]
      break;
 8003dd0:	e01d      	b.n	8003e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0204 	orr.w	r2, r2, #4
 8003de0:	60da      	str	r2, [r3, #12]
      break;
 8003de2:	e014      	b.n	8003e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0208 	orr.w	r2, r2, #8
 8003df2:	60da      	str	r2, [r3, #12]
      break;
 8003df4:	e00b      	b.n	8003e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0210 	orr.w	r2, r2, #16
 8003e04:	60da      	str	r2, [r3, #12]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d174      	bne.n	8003efe <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 f96f 	bl	8005100 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a36      	ldr	r2, [pc, #216]	; (8003f0c <HAL_TIM_PWM_Start_IT+0x290>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a35      	ldr	r2, [pc, #212]	; (8003f10 <HAL_TIM_PWM_Start_IT+0x294>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a33      	ldr	r2, [pc, #204]	; (8003f14 <HAL_TIM_PWM_Start_IT+0x298>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <HAL_TIM_PWM_Start_IT+0x29c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a30      	ldr	r2, [pc, #192]	; (8003f1c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_Start_IT+0x1e6>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_TIM_PWM_Start_IT+0x1e8>
 8003e62:	2300      	movs	r3, #0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01d      	beq.n	8003ebe <HAL_TIM_PWM_Start_IT+0x242>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d018      	beq.n	8003ebe <HAL_TIM_PWM_Start_IT+0x242>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_TIM_PWM_Start_IT+0x242>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_TIM_PWM_Start_IT+0x242>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_TIM_PWM_Start_IT+0x290>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_TIM_PWM_Start_IT+0x242>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIM_PWM_Start_IT+0x294>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_TIM_PWM_Start_IT+0x242>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d115      	bne.n	8003eea <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	d015      	beq.n	8003efc <HAL_TIM_PWM_Start_IT+0x280>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed6:	d011      	beq.n	8003efc <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	e008      	b.n	8003efc <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e000      	b.n	8003efe <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400
 8003f18:	40014800 	.word	0x40014800
 8003f1c:	40015000 	.word	0x40015000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	00010007 	.word	0x00010007

08003f2c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d841      	bhi.n	8003fc4 <HAL_TIM_PWM_Stop_IT+0x98>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f7d 	.word	0x08003f7d
 8003f4c:	08003fc5 	.word	0x08003fc5
 8003f50:	08003fc5 	.word	0x08003fc5
 8003f54:	08003fc5 	.word	0x08003fc5
 8003f58:	08003f8f 	.word	0x08003f8f
 8003f5c:	08003fc5 	.word	0x08003fc5
 8003f60:	08003fc5 	.word	0x08003fc5
 8003f64:	08003fc5 	.word	0x08003fc5
 8003f68:	08003fa1 	.word	0x08003fa1
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	08003fb3 	.word	0x08003fb3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0202 	bic.w	r2, r2, #2
 8003f8a:	60da      	str	r2, [r3, #12]
      break;
 8003f8c:	e01d      	b.n	8003fca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0204 	bic.w	r2, r2, #4
 8003f9c:	60da      	str	r2, [r3, #12]
      break;
 8003f9e:	e014      	b.n	8003fca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0208 	bic.w	r2, r2, #8
 8003fae:	60da      	str	r2, [r3, #12]
      break;
 8003fb0:	e00b      	b.n	8003fca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0210 	bic.w	r2, r2, #16
 8003fc0:	60da      	str	r2, [r3, #12]
      break;
 8003fc2:	e002      	b.n	8003fca <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 8086 	bne.w	80040de <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 f890 	bl	8005100 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_TIM_PWM_Stop_IT+0xf0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_TIM_PWM_Stop_IT+0xf0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_TIM_PWM_Stop_IT+0xf0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3c      	ldr	r2, [pc, #240]	; (80040f4 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a39      	ldr	r2, [pc, #228]	; (80040fc <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <HAL_TIM_PWM_Stop_IT+0xf4>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_TIM_PWM_Stop_IT+0xf6>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a1a      	ldr	r2, [r3, #32]
 800402c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	f244 4344 	movw	r3, #17476	; 0x4444
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	f244 4344 	movw	r3, #17476	; 0x4444
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Stop_IT+0x16a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	e023      	b.n	80040de <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Stop_IT+0x17a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	e01b      	b.n	80040de <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Stop_IT+0x18a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	e013      	b.n	80040de <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Stop_IT+0x19a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c4:	e00b      	b.n	80040de <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Stop_IT+0x1aa>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	e003      	b.n	80040de <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	40015000 	.word	0x40015000

08004100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0202 	mvn.w	r2, #2
 8004134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb54 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fb46 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fd fcf7 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d020      	beq.n	80041b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01b      	beq.n	80041b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0204 	mvn.w	r2, #4
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fb2e 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fb20 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7fd fcd1 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d020      	beq.n	80041fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0208 	mvn.w	r2, #8
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2204      	movs	r2, #4
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fb08 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fafa 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fd fcab 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	d020      	beq.n	8004248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01b      	beq.n	8004248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0210 	mvn.w	r2, #16
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2208      	movs	r2, #8
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fae2 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fad4 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7fd fc85 	bl	8001b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00c      	beq.n	800426c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0201 	mvn.w	r2, #1
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fab2 	bl	80047d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fff1 	bl	800527c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00c      	beq.n	80042be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 ffe9 	bl	8005290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00c      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa95 	bl	800480c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0220 	mvn.w	r2, #32
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 ffb1 	bl	8005268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 ffbd 	bl	80052a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 ffb5 	bl	80052b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 ffad 	bl	80052cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00c      	beq.n	8004396 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800438e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 ffa5 	bl	80052e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0ff      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b14      	cmp	r3, #20
 80043ca:	f200 80f0 	bhi.w	80045ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004429 	.word	0x08004429
 80043d8:	080045af 	.word	0x080045af
 80043dc:	080045af 	.word	0x080045af
 80043e0:	080045af 	.word	0x080045af
 80043e4:	08004469 	.word	0x08004469
 80043e8:	080045af 	.word	0x080045af
 80043ec:	080045af 	.word	0x080045af
 80043f0:	080045af 	.word	0x080045af
 80043f4:	080044ab 	.word	0x080044ab
 80043f8:	080045af 	.word	0x080045af
 80043fc:	080045af 	.word	0x080045af
 8004400:	080045af 	.word	0x080045af
 8004404:	080044eb 	.word	0x080044eb
 8004408:	080045af 	.word	0x080045af
 800440c:	080045af 	.word	0x080045af
 8004410:	080045af 	.word	0x080045af
 8004414:	0800452d 	.word	0x0800452d
 8004418:	080045af 	.word	0x080045af
 800441c:	080045af 	.word	0x080045af
 8004420:	080045af 	.word	0x080045af
 8004424:	0800456d 	.word	0x0800456d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 faa0 	bl	8004974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0208 	orr.w	r2, r2, #8
 8004442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0204 	bic.w	r2, r2, #4
 8004452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6999      	ldr	r1, [r3, #24]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	619a      	str	r2, [r3, #24]
      break;
 8004466:	e0a5      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fb1a 	bl	8004aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6999      	ldr	r1, [r3, #24]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	021a      	lsls	r2, r3, #8
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	619a      	str	r2, [r3, #24]
      break;
 80044a8:	e084      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb8d 	bl	8004bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0208 	orr.w	r2, r2, #8
 80044c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0204 	bic.w	r2, r2, #4
 80044d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69d9      	ldr	r1, [r3, #28]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	61da      	str	r2, [r3, #28]
      break;
 80044e8:	e064      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fbff 	bl	8004cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69d9      	ldr	r1, [r3, #28]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	61da      	str	r2, [r3, #28]
      break;
 800452a:	e043      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fc72 	bl	8004e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0208 	orr.w	r2, r2, #8
 8004546:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0204 	bic.w	r2, r2, #4
 8004556:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800456a:	e023      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fcbc 	bl	8004ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004586:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004596:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045ac:	e002      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
      break;
 80045b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop

080045c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0e6      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1ea>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a67      	ldr	r2, [pc, #412]	; (80047bc <HAL_TIM_ConfigClockSource+0x1f4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f000 80b1 	beq.w	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 8004624:	4a65      	ldr	r2, [pc, #404]	; (80047bc <HAL_TIM_ConfigClockSource+0x1f4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	f200 80b6 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800462c:	4a64      	ldr	r2, [pc, #400]	; (80047c0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	f000 80a9 	beq.w	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 8004634:	4a62      	ldr	r2, [pc, #392]	; (80047c0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	f200 80ae 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800463c:	4a61      	ldr	r2, [pc, #388]	; (80047c4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	f000 80a1 	beq.w	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 8004644:	4a5f      	ldr	r2, [pc, #380]	; (80047c4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	f200 80a6 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800464c:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_TIM_ConfigClockSource+0x200>)
 800464e:	4293      	cmp	r3, r2
 8004650:	f000 8099 	beq.w	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 8004654:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_TIM_ConfigClockSource+0x200>)
 8004656:	4293      	cmp	r3, r2
 8004658:	f200 809e 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800465c:	4a5b      	ldr	r2, [pc, #364]	; (80047cc <HAL_TIM_ConfigClockSource+0x204>)
 800465e:	4293      	cmp	r3, r2
 8004660:	f000 8091 	beq.w	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 8004664:	4a59      	ldr	r2, [pc, #356]	; (80047cc <HAL_TIM_ConfigClockSource+0x204>)
 8004666:	4293      	cmp	r3, r2
 8004668:	f200 8096 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800466c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004670:	f000 8089 	beq.w	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 8004674:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004678:	f200 808e 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d03e      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0x138>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004686:	f200 8087 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	f000 8086 	beq.w	800479e <HAL_TIM_ConfigClockSource+0x1d6>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d87f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 8004698:	2b70      	cmp	r3, #112	; 0x70
 800469a:	d01a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x10a>
 800469c:	2b70      	cmp	r3, #112	; 0x70
 800469e:	d87b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 80046a0:	2b60      	cmp	r3, #96	; 0x60
 80046a2:	d050      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x17e>
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d877      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 80046a8:	2b50      	cmp	r3, #80	; 0x50
 80046aa:	d03c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x15e>
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d873      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d058      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x19e>
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d86f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d064      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d867      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d05a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x1be>
 80046d0:	e062      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f000 fced 	bl	80050c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04f      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f000 fcd6 	bl	80050c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fc48 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	; 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fca1 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004744:	e02c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	461a      	mov	r2, r3
 8004754:	f000 fc67 	bl	8005026 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	; 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fc91 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004764:	e01c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 fc28 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fc81 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 fc78 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800479e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	00100070 	.word	0x00100070
 80047c0:	00100050 	.word	0x00100050
 80047c4:	00100040 	.word	0x00100040
 80047c8:	00100030 	.word	0x00100030
 80047cc:	00100020 	.word	0x00100020

080047d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a48      	ldr	r2, [pc, #288]	; (8004954 <TIM_Base_SetConfig+0x134>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483e:	d00f      	beq.n	8004860 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a45      	ldr	r2, [pc, #276]	; (8004958 <TIM_Base_SetConfig+0x138>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a44      	ldr	r2, [pc, #272]	; (800495c <TIM_Base_SetConfig+0x13c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a43      	ldr	r2, [pc, #268]	; (8004960 <TIM_Base_SetConfig+0x140>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a42      	ldr	r2, [pc, #264]	; (8004964 <TIM_Base_SetConfig+0x144>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d108      	bne.n	8004872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a37      	ldr	r2, [pc, #220]	; (8004954 <TIM_Base_SetConfig+0x134>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01f      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004880:	d01b      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a34      	ldr	r2, [pc, #208]	; (8004958 <TIM_Base_SetConfig+0x138>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d017      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a33      	ldr	r2, [pc, #204]	; (800495c <TIM_Base_SetConfig+0x13c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a32      	ldr	r2, [pc, #200]	; (8004960 <TIM_Base_SetConfig+0x140>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a32      	ldr	r2, [pc, #200]	; (8004968 <TIM_Base_SetConfig+0x148>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a31      	ldr	r2, [pc, #196]	; (800496c <TIM_Base_SetConfig+0x14c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a30      	ldr	r2, [pc, #192]	; (8004970 <TIM_Base_SetConfig+0x150>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0x9a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <TIM_Base_SetConfig+0x144>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a18      	ldr	r2, [pc, #96]	; (8004954 <TIM_Base_SetConfig+0x134>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <TIM_Base_SetConfig+0x100>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <TIM_Base_SetConfig+0x140>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_Base_SetConfig+0x100>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a19      	ldr	r2, [pc, #100]	; (8004968 <TIM_Base_SetConfig+0x148>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_Base_SetConfig+0x100>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <TIM_Base_SetConfig+0x14c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_Base_SetConfig+0x100>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <TIM_Base_SetConfig+0x150>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0x100>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <TIM_Base_SetConfig+0x144>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
  }
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40013400 	.word	0x40013400
 8004964:	40015000 	.word	0x40015000
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800

08004974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0201 	bic.w	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 0302 	bic.w	r3, r3, #2
 80049c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <TIM_OC1_SetConfig+0x11c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <TIM_OC1_SetConfig+0x88>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <TIM_OC1_SetConfig+0x120>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00f      	beq.n	80049fc <TIM_OC1_SetConfig+0x88>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a2e      	ldr	r2, [pc, #184]	; (8004a98 <TIM_OC1_SetConfig+0x124>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00b      	beq.n	80049fc <TIM_OC1_SetConfig+0x88>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a2d      	ldr	r2, [pc, #180]	; (8004a9c <TIM_OC1_SetConfig+0x128>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_OC1_SetConfig+0x88>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_OC1_SetConfig+0x12c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_OC1_SetConfig+0x88>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_OC1_SetConfig+0x130>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d10c      	bne.n	8004a16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0308 	bic.w	r3, r3, #8
 8004a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <TIM_OC1_SetConfig+0x11c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <TIM_OC1_SetConfig+0xd2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <TIM_OC1_SetConfig+0x120>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00f      	beq.n	8004a46 <TIM_OC1_SetConfig+0xd2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <TIM_OC1_SetConfig+0x124>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <TIM_OC1_SetConfig+0xd2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1a      	ldr	r2, [pc, #104]	; (8004a9c <TIM_OC1_SetConfig+0x128>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <TIM_OC1_SetConfig+0xd2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <TIM_OC1_SetConfig+0x12c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC1_SetConfig+0xd2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <TIM_OC1_SetConfig+0x130>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d111      	bne.n	8004a6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40013400 	.word	0x40013400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	40015000 	.word	0x40015000

08004aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f023 0210 	bic.w	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <TIM_OC2_SetConfig+0x110>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_OC2_SetConfig+0x74>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a2b      	ldr	r2, [pc, #172]	; (8004bbc <TIM_OC2_SetConfig+0x114>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0x74>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <TIM_OC2_SetConfig+0x118>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10d      	bne.n	8004b38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1f      	ldr	r2, [pc, #124]	; (8004bb8 <TIM_OC2_SetConfig+0x110>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <TIM_OC2_SetConfig+0xc0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1e      	ldr	r2, [pc, #120]	; (8004bbc <TIM_OC2_SetConfig+0x114>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00f      	beq.n	8004b68 <TIM_OC2_SetConfig+0xc0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <TIM_OC2_SetConfig+0x11c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <TIM_OC2_SetConfig+0xc0>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <TIM_OC2_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_OC2_SetConfig+0xc0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <TIM_OC2_SetConfig+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC2_SetConfig+0xc0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <TIM_OC2_SetConfig+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d113      	bne.n	8004b90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40015000 	.word	0x40015000
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800

08004bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	; (8004cdc <TIM_OC3_SetConfig+0x10c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_OC3_SetConfig+0x72>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <TIM_OC3_SetConfig+0x110>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC3_SetConfig+0x72>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <TIM_OC3_SetConfig+0x114>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10d      	bne.n	8004c5e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <TIM_OC3_SetConfig+0x10c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <TIM_OC3_SetConfig+0xbe>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <TIM_OC3_SetConfig+0x110>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_OC3_SetConfig+0xbe>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <TIM_OC3_SetConfig+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_OC3_SetConfig+0xbe>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <TIM_OC3_SetConfig+0x11c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_OC3_SetConfig+0xbe>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <TIM_OC3_SetConfig+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_OC3_SetConfig+0xbe>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <TIM_OC3_SetConfig+0x114>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40015000 	.word	0x40015000
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	40014800 	.word	0x40014800

08004cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	031b      	lsls	r3, r3, #12
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <TIM_OC4_SetConfig+0x110>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_OC4_SetConfig+0x74>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <TIM_OC4_SetConfig+0x114>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_OC4_SetConfig+0x74>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <TIM_OC4_SetConfig+0x118>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d10d      	bne.n	8004d84 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <TIM_OC4_SetConfig+0x110>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <TIM_OC4_SetConfig+0xc0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <TIM_OC4_SetConfig+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00f      	beq.n	8004db4 <TIM_OC4_SetConfig+0xc0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <TIM_OC4_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <TIM_OC4_SetConfig+0xc0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <TIM_OC4_SetConfig+0x120>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <TIM_OC4_SetConfig+0xc0>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <TIM_OC4_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_OC4_SetConfig+0xc0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <TIM_OC4_SetConfig+0x118>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d113      	bne.n	8004ddc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	019b      	lsls	r3, r3, #6
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40015000 	.word	0x40015000
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <TIM_OC5_SetConfig+0xbc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_OC5_SetConfig+0x82>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a18      	ldr	r2, [pc, #96]	; (8004edc <TIM_OC5_SetConfig+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_OC5_SetConfig+0x82>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <TIM_OC5_SetConfig+0xc4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_OC5_SetConfig+0x82>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <TIM_OC5_SetConfig+0xc8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_OC5_SetConfig+0x82>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TIM_OC5_SetConfig+0xcc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC5_SetConfig+0x82>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM_OC5_SetConfig+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d109      	bne.n	8004eb2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40014400 	.word	0x40014400
 8004ee8:	40014800 	.word	0x40014800
 8004eec:	40015000 	.word	0x40015000

08004ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	051b      	lsls	r3, r3, #20
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <TIM_OC6_SetConfig+0xc0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <TIM_OC6_SetConfig+0x84>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <TIM_OC6_SetConfig+0xc4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00f      	beq.n	8004f74 <TIM_OC6_SetConfig+0x84>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <TIM_OC6_SetConfig+0xc8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <TIM_OC6_SetConfig+0x84>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <TIM_OC6_SetConfig+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_OC6_SetConfig+0x84>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <TIM_OC6_SetConfig+0xd0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_OC6_SetConfig+0x84>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <TIM_OC6_SetConfig+0xd4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d109      	bne.n	8004f88 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800
 8004fc4:	40015000 	.word	0x40015000

08004fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 030a 	bic.w	r3, r3, #10
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f023 0210 	bic.w	r2, r3, #16
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005062:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800509c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f043 0307 	orr.w	r3, r3, #7
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	021a      	lsls	r2, r3, #8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	609a      	str	r2, [r3, #8]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2201      	movs	r2, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	43db      	mvns	r3, r3
 8005122:	401a      	ands	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	431a      	orrs	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e06f      	b.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a31      	ldr	r2, [pc, #196]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a30      	ldr	r2, [pc, #192]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e4:	d018      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a15      	ldr	r2, [pc, #84]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a16      	ldr	r2, [pc, #88]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10c      	bne.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40013400 	.word	0x40013400
 8005258:	40015000 	.word	0x40015000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40014000 	.word	0x40014000

08005268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e042      	b.n	800538c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fc ff3b 	bl	8002194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2224      	movs	r2, #36	; 0x24
 8005322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 ff42 	bl	80061c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fc43 	bl	8005bd0 <UART_SetConfig>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e01b      	b.n	800538c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 ffc1 	bl	800630c <UART_CheckIdleState>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d17b      	bne.n	80054a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_UART_Transmit+0x26>
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e074      	b.n	80054a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2221      	movs	r2, #33	; 0x21
 80053ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fc ffcf 	bl	8002370 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Transmit+0x6c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005408:	e030      	b.n	800546c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f001 f823 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e03d      	b.n	80054a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3302      	adds	r3, #2
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e007      	b.n	800545a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1c8      	bne.n	800540a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2200      	movs	r2, #0
 8005480:	2140      	movs	r1, #64	; 0x40
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 ffec 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e006      	b.n	80054a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d137      	bne.n	8005538 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Receive_IT+0x24>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e030      	b.n	800553a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_UART_Receive_IT+0x94>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01f      	beq.n	8005528 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d018      	beq.n	8005528 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	613b      	str	r3, [r7, #16]
   return(result);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	69f9      	ldr	r1, [r7, #28]
 800551a:	6a3a      	ldr	r2, [r7, #32]
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	61bb      	str	r3, [r7, #24]
   return(result);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e6      	bne.n	80054f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	461a      	mov	r2, r3
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f001 f804 	bl	800653c <UART_Start_Receive_IT>
 8005534:	4603      	mov	r3, r0
 8005536:	e000      	b.n	800553a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3728      	adds	r7, #40	; 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40008000 	.word	0x40008000

08005548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0ba      	sub	sp, #232	; 0xe8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800556e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005572:	f640 030f 	movw	r3, #2063	; 0x80f
 8005576:	4013      	ands	r3, r2
 8005578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800557c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11b      	bne.n	80055bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800559c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 82e3 	beq.w	8005b78 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
      }
      return;
 80055ba:	e2dd      	b.n	8005b78 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8123 	beq.w	800580c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80055ca:	4b8d      	ldr	r3, [pc, #564]	; (8005800 <HAL_UART_IRQHandler+0x2b8>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055d6:	4b8b      	ldr	r3, [pc, #556]	; (8005804 <HAL_UART_IRQHandler+0x2bc>)
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8116 	beq.w	800580c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0xc8>
 80055ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2201      	movs	r2, #1
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d011      	beq.n	8005640 <HAL_UART_IRQHandler+0xf8>
 800561c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <HAL_UART_IRQHandler+0x128>
 800564c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2204      	movs	r2, #4
 800565e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f043 0202 	orr.w	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d017      	beq.n	80056ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005688:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800568c:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <HAL_UART_IRQHandler+0x2b8>)
 800568e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2208      	movs	r2, #8
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f043 0208 	orr.w	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <HAL_UART_IRQHandler+0x196>
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8249 	beq.w	8005b7c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d013      	beq.n	800571e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800573e:	2b00      	cmp	r3, #0
 8005740:	d054      	beq.n	80057ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 f81c 	bl	8006780 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d146      	bne.n	80057e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800576c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800578e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800579a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1d9      	bne.n	8005756 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_UART_IRQHandler+0x2c0>)
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fc ff6d 	bl	800269c <HAL_DMA_Abort_IT>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80057d6:	4610      	mov	r0, r2
 80057d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057da:	e00f      	b.n	80057fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f9e1 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e2:	e00b      	b.n	80057fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f9dd 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ea:	e007      	b.n	80057fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f9d9 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80057fa:	e1bf      	b.n	8005b7c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e1bd      	b.n	8005b7c <HAL_UART_IRQHandler+0x634>
 8005800:	10000001 	.word	0x10000001
 8005804:	04000120 	.word	0x04000120
 8005808:	0800684d 	.word	0x0800684d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 8153 	bne.w	8005abc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 814c 	beq.w	8005abc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8145 	beq.w	8005abc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2210      	movs	r2, #16
 8005838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	f040 80bb 	bne.w	80059c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 818f 	beq.w	8005b80 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005868:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586c:	429a      	cmp	r2, r3
 800586e:	f080 8187 	bcs.w	8005b80 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 8087 	bne.w	800599e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1da      	bne.n	8005890 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e1      	bne.n	80058da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800593a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800593c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800596a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596c:	f023 0310 	bic.w	r3, r3, #16
 8005970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800597e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005980:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800598c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e4      	bne.n	800595c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005998:	4618      	mov	r0, r3
 800599a:	f7fc fe26 	bl	80025ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8fd 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059be:	e0df      	b.n	8005b80 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80d1 	beq.w	8005b84 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80059e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80cc 	beq.w	8005b84 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e4      	bne.n	80059ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	623b      	str	r3, [r7, #32]
   return(result);
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e1      	bne.n	8005a22 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0310 	bic.w	r3, r3, #16
 8005a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e4      	bne.n	8005a72 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f87f 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aba:	e063      	b.n	8005b84 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x59e>
 8005ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 fc12 	bl	8007308 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ae4:	e051      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d014      	beq.n	8005b1c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d03a      	beq.n	8005b88 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
    }
    return;
 8005b1a:	e035      	b.n	8005b88 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <HAL_UART_IRQHandler+0x5f4>
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fe9f 	bl	8006878 <UART_EndTransmit_IT>
    return;
 8005b3a:	e026      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <HAL_UART_IRQHandler+0x614>
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 fbeb 	bl	8007330 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b5a:	e016      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d010      	beq.n	8005b8a <HAL_UART_IRQHandler+0x642>
 8005b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da0c      	bge.n	8005b8a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fbd3 	bl	800731c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b76:	e008      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
      return;
 8005b78:	bf00      	nop
 8005b7a:	e006      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
    return;
 8005b7c:	bf00      	nop
 8005b7e:	e004      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
      return;
 8005b80:	bf00      	nop
 8005b82:	e002      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
      return;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <HAL_UART_IRQHandler+0x642>
    return;
 8005b88:	bf00      	nop
  }
}
 8005b8a:	37e8      	adds	r7, #232	; 0xe8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd4:	b08c      	sub	sp, #48	; 0x30
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4baa      	ldr	r3, [pc, #680]	; (8005ea8 <UART_SetConfig+0x2d8>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a9f      	ldr	r2, [pc, #636]	; (8005eac <UART_SetConfig+0x2dc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f023 010f 	bic.w	r1, r3, #15
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a90      	ldr	r2, [pc, #576]	; (8005eb0 <UART_SetConfig+0x2e0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d125      	bne.n	8005cc0 <UART_SetConfig+0xf0>
 8005c74:	4b8f      	ldr	r3, [pc, #572]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d81a      	bhi.n	8005cb8 <UART_SetConfig+0xe8>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0xb8>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	08005ca1 	.word	0x08005ca1
 8005c94:	08005cb1 	.word	0x08005cb1
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9e:	e116      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca6:	e112      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cae:	e10e      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb6:	e10a      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cbe:	e106      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a7c      	ldr	r2, [pc, #496]	; (8005eb8 <UART_SetConfig+0x2e8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d138      	bne.n	8005d3c <UART_SetConfig+0x16c>
 8005cca:	4b7a      	ldr	r3, [pc, #488]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	2b0c      	cmp	r3, #12
 8005cd6:	d82d      	bhi.n	8005d34 <UART_SetConfig+0x164>
 8005cd8:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x110>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005d15 	.word	0x08005d15
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	08005d35 	.word	0x08005d35
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d25 	.word	0x08005d25
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d35 	.word	0x08005d35
 8005cfc:	08005d35 	.word	0x08005d35
 8005d00:	08005d1d 	.word	0x08005d1d
 8005d04:	08005d35 	.word	0x08005d35
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d2d 	.word	0x08005d2d
 8005d14:	2300      	movs	r3, #0
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	e0d8      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d22:	e0d4      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2a:	e0d0      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d32:	e0cc      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3a:	e0c8      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5e      	ldr	r2, [pc, #376]	; (8005ebc <UART_SetConfig+0x2ec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d125      	bne.n	8005d92 <UART_SetConfig+0x1c2>
 8005d46:	4b5b      	ldr	r3, [pc, #364]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d50:	2b30      	cmp	r3, #48	; 0x30
 8005d52:	d016      	beq.n	8005d82 <UART_SetConfig+0x1b2>
 8005d54:	2b30      	cmp	r3, #48	; 0x30
 8005d56:	d818      	bhi.n	8005d8a <UART_SetConfig+0x1ba>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d00a      	beq.n	8005d72 <UART_SetConfig+0x1a2>
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d814      	bhi.n	8005d8a <UART_SetConfig+0x1ba>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <UART_SetConfig+0x19a>
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d008      	beq.n	8005d7a <UART_SetConfig+0x1aa>
 8005d68:	e00f      	b.n	8005d8a <UART_SetConfig+0x1ba>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d70:	e0ad      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d72:	2302      	movs	r3, #2
 8005d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d78:	e0a9      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d80:	e0a5      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d82:	2308      	movs	r3, #8
 8005d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d88:	e0a1      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d90:	e09d      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a4a      	ldr	r2, [pc, #296]	; (8005ec0 <UART_SetConfig+0x2f0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d125      	bne.n	8005de8 <UART_SetConfig+0x218>
 8005d9c:	4b45      	ldr	r3, [pc, #276]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005da6:	2bc0      	cmp	r3, #192	; 0xc0
 8005da8:	d016      	beq.n	8005dd8 <UART_SetConfig+0x208>
 8005daa:	2bc0      	cmp	r3, #192	; 0xc0
 8005dac:	d818      	bhi.n	8005de0 <UART_SetConfig+0x210>
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d00a      	beq.n	8005dc8 <UART_SetConfig+0x1f8>
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d814      	bhi.n	8005de0 <UART_SetConfig+0x210>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <UART_SetConfig+0x1f0>
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d008      	beq.n	8005dd0 <UART_SetConfig+0x200>
 8005dbe:	e00f      	b.n	8005de0 <UART_SetConfig+0x210>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e082      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dce:	e07e      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd6:	e07a      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dde:	e076      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de6:	e072      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a35      	ldr	r2, [pc, #212]	; (8005ec4 <UART_SetConfig+0x2f4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d12a      	bne.n	8005e48 <UART_SetConfig+0x278>
 8005df2:	4b30      	ldr	r3, [pc, #192]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e00:	d01a      	beq.n	8005e38 <UART_SetConfig+0x268>
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e06:	d81b      	bhi.n	8005e40 <UART_SetConfig+0x270>
 8005e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0c:	d00c      	beq.n	8005e28 <UART_SetConfig+0x258>
 8005e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e12:	d815      	bhi.n	8005e40 <UART_SetConfig+0x270>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <UART_SetConfig+0x250>
 8005e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1c:	d008      	beq.n	8005e30 <UART_SetConfig+0x260>
 8005e1e:	e00f      	b.n	8005e40 <UART_SetConfig+0x270>
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e052      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2e:	e04e      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e04a      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e046      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e042      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <UART_SetConfig+0x2dc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d13a      	bne.n	8005ec8 <UART_SetConfig+0x2f8>
 8005e52:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e60:	d01a      	beq.n	8005e98 <UART_SetConfig+0x2c8>
 8005e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e66:	d81b      	bhi.n	8005ea0 <UART_SetConfig+0x2d0>
 8005e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6c:	d00c      	beq.n	8005e88 <UART_SetConfig+0x2b8>
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e72:	d815      	bhi.n	8005ea0 <UART_SetConfig+0x2d0>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <UART_SetConfig+0x2b0>
 8005e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7c:	d008      	beq.n	8005e90 <UART_SetConfig+0x2c0>
 8005e7e:	e00f      	b.n	8005ea0 <UART_SetConfig+0x2d0>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e86:	e022      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8e:	e01e      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e01a      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e016      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e012      	b.n	8005ece <UART_SetConfig+0x2fe>
 8005ea8:	cfff69f3 	.word	0xcfff69f3
 8005eac:	40008000 	.word	0x40008000
 8005eb0:	40013800 	.word	0x40013800
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40004400 	.word	0x40004400
 8005ebc:	40004800 	.word	0x40004800
 8005ec0:	40004c00 	.word	0x40004c00
 8005ec4:	40005000 	.word	0x40005000
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4aae      	ldr	r2, [pc, #696]	; (800618c <UART_SetConfig+0x5bc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	f040 8097 	bne.w	8006008 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d823      	bhi.n	8005f2a <UART_SetConfig+0x35a>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0x318>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f2b 	.word	0x08005f2b
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f2b 	.word	0x08005f2b
 8005ef8:	08005f1b 	.word	0x08005f1b
 8005efc:	08005f2b 	.word	0x08005f2b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f2b 	.word	0x08005f2b
 8005f08:	08005f23 	.word	0x08005f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0c:	f7fd fb50 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f12:	e010      	b.n	8005f36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f14:	4b9e      	ldr	r3, [pc, #632]	; (8006190 <UART_SetConfig+0x5c0>)
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f18:	e00d      	b.n	8005f36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f1a:	f7fd fadb 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8005f1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f20:	e009      	b.n	8005f36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f28:	e005      	b.n	8005f36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8130 	beq.w	800619e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4a94      	ldr	r2, [pc, #592]	; (8006194 <UART_SetConfig+0x5c4>)
 8005f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4413      	add	r3, r2
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d305      	bcc.n	8005f6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d903      	bls.n	8005f76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f74:	e113      	b.n	800619e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2200      	movs	r2, #0
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	60fa      	str	r2, [r7, #12]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	4a84      	ldr	r2, [pc, #528]	; (8006194 <UART_SetConfig+0x5c4>)
 8005f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f98:	f7fa fe20 	bl	8000bdc <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	020b      	lsls	r3, r1, #8
 8005fae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fb2:	0202      	lsls	r2, r0, #8
 8005fb4:	6979      	ldr	r1, [r7, #20]
 8005fb6:	6849      	ldr	r1, [r1, #4]
 8005fb8:	0849      	lsrs	r1, r1, #1
 8005fba:	2000      	movs	r0, #0
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	eb12 0804 	adds.w	r8, r2, r4
 8005fc4:	eb43 0905 	adc.w	r9, r3, r5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	469a      	mov	sl, r3
 8005fd0:	4693      	mov	fp, r2
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	465b      	mov	r3, fp
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa fdff 	bl	8000bdc <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fec:	d308      	bcc.n	8006000 <UART_SetConfig+0x430>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff4:	d204      	bcs.n	8006000 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a3a      	ldr	r2, [r7, #32]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	e0ce      	b.n	800619e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006006:	e0ca      	b.n	800619e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006010:	d166      	bne.n	80060e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006016:	2b08      	cmp	r3, #8
 8006018:	d827      	bhi.n	800606a <UART_SetConfig+0x49a>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x450>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006045 	.word	0x08006045
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006055 	.word	0x08006055
 800602c:	0800606b 	.word	0x0800606b
 8006030:	0800605b 	.word	0x0800605b
 8006034:	0800606b 	.word	0x0800606b
 8006038:	0800606b 	.word	0x0800606b
 800603c:	0800606b 	.word	0x0800606b
 8006040:	08006063 	.word	0x08006063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fd fab4 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800604a:	e014      	b.n	8006076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800604c:	f7fd fac6 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8006050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006052:	e010      	b.n	8006076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006054:	4b4e      	ldr	r3, [pc, #312]	; (8006190 <UART_SetConfig+0x5c0>)
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006058:	e00d      	b.n	8006076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800605a:	f7fd fa3b 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006060:	e009      	b.n	8006076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006068:	e005      	b.n	8006076 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8090 	beq.w	800619e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	4a44      	ldr	r2, [pc, #272]	; (8006194 <UART_SetConfig+0x5c4>)
 8006084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006088:	461a      	mov	r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006090:	005a      	lsls	r2, r3, #1
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	441a      	add	r2, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	2b0f      	cmp	r3, #15
 80060a8:	d916      	bls.n	80060d8 <UART_SetConfig+0x508>
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b0:	d212      	bcs.n	80060d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f023 030f 	bic.w	r3, r3, #15
 80060ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	085b      	lsrs	r3, r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	8bfb      	ldrh	r3, [r7, #30]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	8bfa      	ldrh	r2, [r7, #30]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	e062      	b.n	800619e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060de:	e05e      	b.n	800619e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d828      	bhi.n	800613a <UART_SetConfig+0x56a>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0x520>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	0800613b 	.word	0x0800613b
 8006100:	0800612b 	.word	0x0800612b
 8006104:	0800613b 	.word	0x0800613b
 8006108:	0800613b 	.word	0x0800613b
 800610c:	0800613b 	.word	0x0800613b
 8006110:	08006133 	.word	0x08006133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006114:	f7fd fa4c 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8006118:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800611a:	e014      	b.n	8006146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800611c:	f7fd fa5e 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8006120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006122:	e010      	b.n	8006146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006124:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <UART_SetConfig+0x5c0>)
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006128:	e00d      	b.n	8006146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612a:	f7fd f9d3 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 800612e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006130:	e009      	b.n	8006146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006138:	e005      	b.n	8006146 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006144:	bf00      	nop
    }

    if (pclk != 0U)
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d028      	beq.n	800619e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	4a10      	ldr	r2, [pc, #64]	; (8006194 <UART_SetConfig+0x5c4>)
 8006152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006156:	461a      	mov	r2, r3
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	fbb3 f2f2 	udiv	r2, r3, r2
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	441a      	add	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d910      	bls.n	8006198 <UART_SetConfig+0x5c8>
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d20c      	bcs.n	8006198 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	b29a      	uxth	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60da      	str	r2, [r3, #12]
 8006188:	e009      	b.n	800619e <UART_SetConfig+0x5ce>
 800618a:	bf00      	nop
 800618c:	40008000 	.word	0x40008000
 8006190:	00f42400 	.word	0x00f42400
 8006194:	0800a484 	.word	0x0800a484
      }
      else
      {
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2200      	movs	r2, #0
 80061b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80061ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3730      	adds	r7, #48	; 0x30
 80061c2:	46bd      	mov	sp, r7
 80061c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01a      	beq.n	80062de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c6:	d10a      	bne.n	80062de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b098      	sub	sp, #96	; 0x60
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800631c:	f7fc f828 	bl	8002370 <HAL_GetTick>
 8006320:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b08      	cmp	r3, #8
 800632e:	d12f      	bne.n	8006390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006338:	2200      	movs	r2, #0
 800633a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f88e 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d022      	beq.n	8006390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635e:	653b      	str	r3, [r7, #80]	; 0x50
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006368:	647b      	str	r3, [r7, #68]	; 0x44
 800636a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800636e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e6      	bne.n	800634a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e063      	b.n	8006458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d149      	bne.n	8006432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a6:	2200      	movs	r2, #0
 80063a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f857 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d03c      	beq.n	8006432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	623b      	str	r3, [r7, #32]
   return(result);
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d6:	633b      	str	r3, [r7, #48]	; 0x30
 80063d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e6      	bne.n	80063b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	64bb      	str	r3, [r7, #72]	; 0x48
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3308      	adds	r3, #8
 8006408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800640a:	61fa      	str	r2, [r7, #28]
 800640c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	69b9      	ldr	r1, [r7, #24]
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	617b      	str	r3, [r7, #20]
   return(result);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e012      	b.n	8006458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3758      	adds	r7, #88	; 0x58
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006470:	e04f      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d04b      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fb ff79 	bl	8002370 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <UART_WaitOnFlagUntilTimeout+0x30>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e04e      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d037      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d034      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d031      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d110      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f95b 	bl	8006780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2208      	movs	r2, #8
 80064ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e029      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ec:	d111      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f941 	bl	8006780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e00f      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	429a      	cmp	r2, r3
 800652e:	d0a0      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800653c:	b480      	push	{r7}
 800653e:	b0a3      	sub	sp, #140	; 0x8c
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d10e      	bne.n	800658e <UART_Start_Receive_IT+0x52>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <UART_Start_Receive_IT+0x48>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800657e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006582:	e02d      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	22ff      	movs	r2, #255	; 0xff
 8006588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800658c:	e028      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <UART_Start_Receive_IT+0x76>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <UART_Start_Receive_IT+0x6c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065a6:	e01b      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	227f      	movs	r2, #127	; 0x7f
 80065ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065b0:	e016      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ba:	d10d      	bne.n	80065d8 <UART_Start_Receive_IT+0x9c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <UART_Start_Receive_IT+0x92>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	227f      	movs	r2, #127	; 0x7f
 80065c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065cc:	e008      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	223f      	movs	r2, #63	; 0x3f
 80065d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065d6:	e003      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2222      	movs	r2, #34	; 0x22
 80065ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006614:	673a      	str	r2, [r7, #112]	; 0x70
 8006616:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800661a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e3      	bne.n	80065f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006630:	d14f      	bne.n	80066d2 <UART_Start_Receive_IT+0x196>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	429a      	cmp	r2, r3
 800663c:	d349      	bcc.n	80066d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d107      	bne.n	8006658 <UART_Start_Receive_IT+0x11c>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a47      	ldr	r2, [pc, #284]	; (8006770 <UART_Start_Receive_IT+0x234>)
 8006654:	675a      	str	r2, [r3, #116]	; 0x74
 8006656:	e002      	b.n	800665e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a46      	ldr	r2, [pc, #280]	; (8006774 <UART_Start_Receive_IT+0x238>)
 800665c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01a      	beq.n	800669c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800668a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800668e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e4      	bne.n	8006666 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80066be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e5      	bne.n	800669c <UART_Start_Receive_IT+0x160>
 80066d0:	e046      	b.n	8006760 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	d107      	bne.n	80066ec <UART_Start_Receive_IT+0x1b0>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a24      	ldr	r2, [pc, #144]	; (8006778 <UART_Start_Receive_IT+0x23c>)
 80066e8:	675a      	str	r2, [r3, #116]	; 0x74
 80066ea:	e002      	b.n	80066f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a23      	ldr	r2, [pc, #140]	; (800677c <UART_Start_Receive_IT+0x240>)
 80066f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d019      	beq.n	800672e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800670e:	677b      	str	r3, [r7, #116]	; 0x74
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
 800671a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800671e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e6      	bne.n	80066fa <UART_Start_Receive_IT+0x1be>
 800672c:	e018      	b.n	8006760 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f043 0320 	orr.w	r3, r3, #32
 8006742:	67bb      	str	r3, [r7, #120]	; 0x78
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	69f9      	ldr	r1, [r7, #28]
 8006752:	6a3a      	ldr	r2, [r7, #32]
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	61bb      	str	r3, [r7, #24]
   return(result);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e6      	bne.n	800672e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	378c      	adds	r7, #140	; 0x8c
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	08006fa1 	.word	0x08006fa1
 8006774:	08006c41 	.word	0x08006c41
 8006778:	08006a89 	.word	0x08006a89
 800677c:	080068d1 	.word	0x080068d1

08006780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b095      	sub	sp, #84	; 0x54
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800679c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a6:	643b      	str	r3, [r7, #64]	; 0x40
 80067a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e6      	bne.n	8006788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e3      	bne.n	80067ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d118      	bne.n	800682c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	60bb      	str	r3, [r7, #8]
   return(result);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f023 0310 	bic.w	r3, r3, #16
 800680e:	647b      	str	r3, [r7, #68]	; 0x44
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6979      	ldr	r1, [r7, #20]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	613b      	str	r3, [r7, #16]
   return(result);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e6      	bne.n	80067fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006840:	bf00      	nop
 8006842:	3754      	adds	r7, #84	; 0x54
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff f99a 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	60bb      	str	r3, [r7, #8]
   return(result);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	613b      	str	r3, [r7, #16]
   return(result);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff f965 	bl	8005b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c6:	bf00      	nop
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b09c      	sub	sp, #112	; 0x70
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e8:	2b22      	cmp	r3, #34	; 0x22
 80068ea:	f040 80be 	bne.w	8006a6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068fc:	b2d9      	uxtb	r1, r3
 80068fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006902:	b2da      	uxtb	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006908:	400a      	ands	r2, r1
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 80a1 	bne.w	8006a7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694c:	66bb      	str	r3, [r7, #104]	; 0x68
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006956:	65bb      	str	r3, [r7, #88]	; 0x58
 8006958:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800695c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	667b      	str	r3, [r7, #100]	; 0x64
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800698a:	647a      	str	r2, [r7, #68]	; 0x44
 800698c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a33      	ldr	r2, [pc, #204]	; (8006a84 <UART_RxISR_8BIT+0x1b4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d01f      	beq.n	80069fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d018      	beq.n	80069fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	623b      	str	r3, [r7, #32]
   return(result);
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069de:	663b      	str	r3, [r7, #96]	; 0x60
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069e8:	633b      	str	r3, [r7, #48]	; 0x30
 80069ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d12e      	bne.n	8006a62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	69b9      	ldr	r1, [r7, #24]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	617b      	str	r3, [r7, #20]
   return(result);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e6      	bne.n	8006a0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b10      	cmp	r3, #16
 8006a48:	d103      	bne.n	8006a52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff f8ac 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a60:	e00b      	b.n	8006a7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fa fa8e 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8006a68:	e007      	b.n	8006a7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	619a      	str	r2, [r3, #24]
}
 8006a7a:	bf00      	nop
 8006a7c:	3770      	adds	r7, #112	; 0x70
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40008000 	.word	0x40008000

08006a88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b09c      	sub	sp, #112	; 0x70
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa0:	2b22      	cmp	r3, #34	; 0x22
 8006aa2:	f040 80be 	bne.w	8006c22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ab6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006aba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006abe:	4013      	ands	r3, r2
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	1c9a      	adds	r2, r3, #2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 80a1 	bne.w	8006c32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b04:	667b      	str	r3, [r7, #100]	; 0x64
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	663b      	str	r3, [r7, #96]	; 0x60
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b42:	643a      	str	r2, [r7, #64]	; 0x40
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a33      	ldr	r2, [pc, #204]	; (8006c3c <UART_RxISR_16BIT+0x1b4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01f      	beq.n	8006bb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d12e      	bne.n	8006c1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f023 0310 	bic.w	r3, r3, #16
 8006bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6979      	ldr	r1, [r7, #20]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	613b      	str	r3, [r7, #16]
   return(result);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d103      	bne.n	8006c0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2210      	movs	r2, #16
 8006c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fe ffd0 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c18:	e00b      	b.n	8006c32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fa f9b2 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8006c20:	e007      	b.n	8006c32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0208 	orr.w	r2, r2, #8
 8006c30:	619a      	str	r2, [r3, #24]
}
 8006c32:	bf00      	nop
 8006c34:	3770      	adds	r7, #112	; 0x70
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40008000 	.word	0x40008000

08006c40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b0ac      	sub	sp, #176	; 0xb0
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c76:	2b22      	cmp	r3, #34	; 0x22
 8006c78:	f040 8182 	bne.w	8006f80 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c86:	e125      	b.n	8006ed4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006c96:	b2d9      	uxtb	r1, r3
 8006c98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	400a      	ands	r2, r1
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d053      	beq.n	8006d82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d011      	beq.n	8006d0a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	f043 0201 	orr.w	r2, r3, #1
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d011      	beq.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2202      	movs	r2, #2
 8006d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	f043 0204 	orr.w	r2, r3, #4
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2204      	movs	r2, #4
 8006d58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f043 0202 	orr.w	r2, r3, #2
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d006      	beq.n	8006d82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fe ff15 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 80a2 	bne.w	8006ed4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006db4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006db8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e4      	bne.n	8006d90 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3308      	adds	r3, #8
 8006dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dee:	66ba      	str	r2, [r7, #104]	; 0x68
 8006df0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006df4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e1      	bne.n	8006dc6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a5f      	ldr	r2, [pc, #380]	; (8006f98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d021      	beq.n	8006e64 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01a      	beq.n	8006e64 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e50:	657b      	str	r3, [r7, #84]	; 0x54
 8006e52:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e4      	bne.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d130      	bne.n	8006ece <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	f023 0310 	bic.w	r3, r3, #16
 8006e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e94:	643b      	str	r3, [r7, #64]	; 0x40
 8006e96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e4      	bne.n	8006e72 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d103      	bne.n	8006ebe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2210      	movs	r2, #16
 8006ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fe fe76 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
 8006ecc:	e002      	b.n	8006ed4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fa f858 	bl	8000f84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ed4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f47f aecf 	bne.w	8006c88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ef0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ef4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d049      	beq.n	8006f90 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f02:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d242      	bcs.n	8006f90 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e3      	bne.n	8006f0a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006f46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f043 0320 	orr.w	r3, r3, #32
 8006f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	613b      	str	r3, [r7, #16]
   return(result);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e4      	bne.n	8006f48 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f7e:	e007      	b.n	8006f90 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0208 	orr.w	r2, r2, #8
 8006f8e:	619a      	str	r2, [r3, #24]
}
 8006f90:	bf00      	nop
 8006f92:	37b0      	adds	r7, #176	; 0xb0
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40008000 	.word	0x40008000
 8006f9c:	080068d1 	.word	0x080068d1

08006fa0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b0ae      	sub	sp, #184	; 0xb8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	2b22      	cmp	r3, #34	; 0x22
 8006fd8:	f040 8186 	bne.w	80072e8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fe2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fe6:	e129      	b.n	800723c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ffa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006ffe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007002:	4013      	ands	r3, r2
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800700a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	1c9a      	adds	r2, r3, #2
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d053      	beq.n	80070e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800703e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d011      	beq.n	800706e <UART_RxISR_16BIT_FIFOEN+0xce>
 800704a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800704e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2201      	movs	r2, #1
 800705c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007064:	f043 0201 	orr.w	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800706e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d011      	beq.n	800709e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800707a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2202      	movs	r2, #2
 800708c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007094:	f043 0204 	orr.w	r2, r3, #4
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800709e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d011      	beq.n	80070ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80070aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2204      	movs	r2, #4
 80070bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c4:	f043 0202 	orr.w	r2, r3, #2
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d006      	beq.n	80070e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fe fd63 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f040 80a4 	bne.w	800723c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800711a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800711e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e2      	bne.n	80070f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800713e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007156:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800715c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e1      	bne.n	800712e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a5f      	ldr	r2, [pc, #380]	; (8007300 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d021      	beq.n	80071cc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d01a      	beq.n	80071cc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e4      	bne.n	8007196 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d130      	bne.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	f023 0310 	bic.w	r3, r3, #16
 80071ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
 80071fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e4      	bne.n	80071da <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d103      	bne.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2210      	movs	r2, #16
 8007224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe fcc2 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
 8007234:	e002      	b.n	800723c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 fea4 	bl	8000f84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800723c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	f47f aecb 	bne.w	8006fe8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007258:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800725c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007260:	2b00      	cmp	r3, #0
 8007262:	d049      	beq.n	80072f8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800726a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800726e:	429a      	cmp	r2, r3
 8007270:	d242      	bcs.n	80072f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	623b      	str	r3, [r7, #32]
   return(result);
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007296:	633a      	str	r2, [r7, #48]	; 0x30
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800729c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e3      	bne.n	8007272 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a15      	ldr	r2, [pc, #84]	; (8007304 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80072ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f043 0320 	orr.w	r3, r3, #32
 80072c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	69b9      	ldr	r1, [r7, #24]
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	617b      	str	r3, [r7, #20]
   return(result);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e4      	bne.n	80072b0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072e6:	e007      	b.n	80072f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0208 	orr.w	r2, r2, #8
 80072f6:	619a      	str	r2, [r3, #24]
}
 80072f8:	bf00      	nop
 80072fa:	37b8      	adds	r7, #184	; 0xb8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40008000 	.word	0x40008000
 8007304:	08006a89 	.word	0x08006a89

08007308 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_UARTEx_DisableFifoMode+0x16>
 8007356:	2302      	movs	r3, #2
 8007358:	e027      	b.n	80073aa <HAL_UARTEx_DisableFifoMode+0x66>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2224      	movs	r2, #36	; 0x24
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007388:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e02d      	b.n	800742a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2224      	movs	r2, #36	; 0x24
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f850 	bl	80074b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007446:	2302      	movs	r3, #2
 8007448:	e02d      	b.n	80074a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2224      	movs	r2, #36	; 0x24
 8007456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f812 	bl	80074b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d108      	bne.n	80074d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074d0:	e031      	b.n	8007536 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074d2:	2308      	movs	r3, #8
 80074d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074d6:	2308      	movs	r3, #8
 80074d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	0e5b      	lsrs	r3, r3, #25
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	0f5b      	lsrs	r3, r3, #29
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	7b3a      	ldrb	r2, [r7, #12]
 80074fe:	4911      	ldr	r1, [pc, #68]	; (8007544 <UARTEx_SetNbDataToProcess+0x94>)
 8007500:	5c8a      	ldrb	r2, [r1, r2]
 8007502:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007506:	7b3a      	ldrb	r2, [r7, #12]
 8007508:	490f      	ldr	r1, [pc, #60]	; (8007548 <UARTEx_SetNbDataToProcess+0x98>)
 800750a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800750c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007510:	b29a      	uxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	7b7a      	ldrb	r2, [r7, #13]
 800751c:	4909      	ldr	r1, [pc, #36]	; (8007544 <UARTEx_SetNbDataToProcess+0x94>)
 800751e:	5c8a      	ldrb	r2, [r1, r2]
 8007520:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007524:	7b7a      	ldrb	r2, [r7, #13]
 8007526:	4908      	ldr	r1, [pc, #32]	; (8007548 <UARTEx_SetNbDataToProcess+0x98>)
 8007528:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800752a:	fb93 f3f2 	sdiv	r3, r3, r2
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	0800a49c 	.word	0x0800a49c
 8007548:	0800a4a4 	.word	0x0800a4a4

0800754c <atof>:
 800754c:	2100      	movs	r1, #0
 800754e:	f000 be7d 	b.w	800824c <strtod>
	...

08007554 <__errno>:
 8007554:	4b01      	ldr	r3, [pc, #4]	; (800755c <__errno+0x8>)
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	2000000c 	.word	0x2000000c

08007560 <__libc_init_array>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	4d0d      	ldr	r5, [pc, #52]	; (8007598 <__libc_init_array+0x38>)
 8007564:	4c0d      	ldr	r4, [pc, #52]	; (800759c <__libc_init_array+0x3c>)
 8007566:	1b64      	subs	r4, r4, r5
 8007568:	10a4      	asrs	r4, r4, #2
 800756a:	2600      	movs	r6, #0
 800756c:	42a6      	cmp	r6, r4
 800756e:	d109      	bne.n	8007584 <__libc_init_array+0x24>
 8007570:	4d0b      	ldr	r5, [pc, #44]	; (80075a0 <__libc_init_array+0x40>)
 8007572:	4c0c      	ldr	r4, [pc, #48]	; (80075a4 <__libc_init_array+0x44>)
 8007574:	f002 ff04 	bl	800a380 <_init>
 8007578:	1b64      	subs	r4, r4, r5
 800757a:	10a4      	asrs	r4, r4, #2
 800757c:	2600      	movs	r6, #0
 800757e:	42a6      	cmp	r6, r4
 8007580:	d105      	bne.n	800758e <__libc_init_array+0x2e>
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	f855 3b04 	ldr.w	r3, [r5], #4
 8007588:	4798      	blx	r3
 800758a:	3601      	adds	r6, #1
 800758c:	e7ee      	b.n	800756c <__libc_init_array+0xc>
 800758e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007592:	4798      	blx	r3
 8007594:	3601      	adds	r6, #1
 8007596:	e7f2      	b.n	800757e <__libc_init_array+0x1e>
 8007598:	0800a8e4 	.word	0x0800a8e4
 800759c:	0800a8e4 	.word	0x0800a8e4
 80075a0:	0800a8e4 	.word	0x0800a8e4
 80075a4:	0800a8e8 	.word	0x0800a8e8

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <strchr>:
 80075b8:	b2c9      	uxtb	r1, r1
 80075ba:	4603      	mov	r3, r0
 80075bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c0:	b11a      	cbz	r2, 80075ca <strchr+0x12>
 80075c2:	428a      	cmp	r2, r1
 80075c4:	d1f9      	bne.n	80075ba <strchr+0x2>
 80075c6:	4618      	mov	r0, r3
 80075c8:	4770      	bx	lr
 80075ca:	2900      	cmp	r1, #0
 80075cc:	bf18      	it	ne
 80075ce:	2300      	movne	r3, #0
 80075d0:	e7f9      	b.n	80075c6 <strchr+0xe>

080075d2 <strcpy>:
 80075d2:	4603      	mov	r3, r0
 80075d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d8:	f803 2b01 	strb.w	r2, [r3], #1
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d1f9      	bne.n	80075d4 <strcpy+0x2>
 80075e0:	4770      	bx	lr

080075e2 <strncpy>:
 80075e2:	b510      	push	{r4, lr}
 80075e4:	3901      	subs	r1, #1
 80075e6:	4603      	mov	r3, r0
 80075e8:	b132      	cbz	r2, 80075f8 <strncpy+0x16>
 80075ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075ee:	f803 4b01 	strb.w	r4, [r3], #1
 80075f2:	3a01      	subs	r2, #1
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d1f7      	bne.n	80075e8 <strncpy+0x6>
 80075f8:	441a      	add	r2, r3
 80075fa:	2100      	movs	r1, #0
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d100      	bne.n	8007602 <strncpy+0x20>
 8007600:	bd10      	pop	{r4, pc}
 8007602:	f803 1b01 	strb.w	r1, [r3], #1
 8007606:	e7f9      	b.n	80075fc <strncpy+0x1a>

08007608 <sulp>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	4604      	mov	r4, r0
 800760c:	460d      	mov	r5, r1
 800760e:	ec45 4b10 	vmov	d0, r4, r5
 8007612:	4616      	mov	r6, r2
 8007614:	f001 fd28 	bl	8009068 <__ulp>
 8007618:	ec51 0b10 	vmov	r0, r1, d0
 800761c:	b17e      	cbz	r6, 800763e <sulp+0x36>
 800761e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007626:	2b00      	cmp	r3, #0
 8007628:	dd09      	ble.n	800763e <sulp+0x36>
 800762a:	051b      	lsls	r3, r3, #20
 800762c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007630:	2400      	movs	r4, #0
 8007632:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007636:	4622      	mov	r2, r4
 8007638:	462b      	mov	r3, r5
 800763a:	f7f9 f815 	bl	8000668 <__aeabi_dmul>
 800763e:	bd70      	pop	{r4, r5, r6, pc}

08007640 <_strtod_l>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	ed2d 8b02 	vpush	{d8}
 8007648:	b09d      	sub	sp, #116	; 0x74
 800764a:	461f      	mov	r7, r3
 800764c:	2300      	movs	r3, #0
 800764e:	9318      	str	r3, [sp, #96]	; 0x60
 8007650:	4ba2      	ldr	r3, [pc, #648]	; (80078dc <_strtod_l+0x29c>)
 8007652:	9213      	str	r2, [sp, #76]	; 0x4c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	4604      	mov	r4, r0
 800765a:	4618      	mov	r0, r3
 800765c:	4688      	mov	r8, r1
 800765e:	f7f8 fde9 	bl	8000234 <strlen>
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	4605      	mov	r5, r0
 8007668:	f04f 0b00 	mov.w	fp, #0
 800766c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	2a2b      	cmp	r2, #43	; 0x2b
 8007676:	d04e      	beq.n	8007716 <_strtod_l+0xd6>
 8007678:	d83b      	bhi.n	80076f2 <_strtod_l+0xb2>
 800767a:	2a0d      	cmp	r2, #13
 800767c:	d834      	bhi.n	80076e8 <_strtod_l+0xa8>
 800767e:	2a08      	cmp	r2, #8
 8007680:	d834      	bhi.n	80076ec <_strtod_l+0xac>
 8007682:	2a00      	cmp	r2, #0
 8007684:	d03e      	beq.n	8007704 <_strtod_l+0xc4>
 8007686:	2300      	movs	r3, #0
 8007688:	930a      	str	r3, [sp, #40]	; 0x28
 800768a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800768c:	7833      	ldrb	r3, [r6, #0]
 800768e:	2b30      	cmp	r3, #48	; 0x30
 8007690:	f040 80b0 	bne.w	80077f4 <_strtod_l+0x1b4>
 8007694:	7873      	ldrb	r3, [r6, #1]
 8007696:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800769a:	2b58      	cmp	r3, #88	; 0x58
 800769c:	d168      	bne.n	8007770 <_strtod_l+0x130>
 800769e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	ab18      	add	r3, sp, #96	; 0x60
 80076a4:	9702      	str	r7, [sp, #8]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4a8d      	ldr	r2, [pc, #564]	; (80078e0 <_strtod_l+0x2a0>)
 80076aa:	ab19      	add	r3, sp, #100	; 0x64
 80076ac:	a917      	add	r1, sp, #92	; 0x5c
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fe40 	bl	8008334 <__gethex>
 80076b4:	f010 0707 	ands.w	r7, r0, #7
 80076b8:	4605      	mov	r5, r0
 80076ba:	d005      	beq.n	80076c8 <_strtod_l+0x88>
 80076bc:	2f06      	cmp	r7, #6
 80076be:	d12c      	bne.n	800771a <_strtod_l+0xda>
 80076c0:	3601      	adds	r6, #1
 80076c2:	2300      	movs	r3, #0
 80076c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80076c6:	930a      	str	r3, [sp, #40]	; 0x28
 80076c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 8590 	bne.w	80081f0 <_strtod_l+0xbb0>
 80076d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d2:	b1eb      	cbz	r3, 8007710 <_strtod_l+0xd0>
 80076d4:	4652      	mov	r2, sl
 80076d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076da:	ec43 2b10 	vmov	d0, r2, r3
 80076de:	b01d      	add	sp, #116	; 0x74
 80076e0:	ecbd 8b02 	vpop	{d8}
 80076e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e8:	2a20      	cmp	r2, #32
 80076ea:	d1cc      	bne.n	8007686 <_strtod_l+0x46>
 80076ec:	3301      	adds	r3, #1
 80076ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80076f0:	e7be      	b.n	8007670 <_strtod_l+0x30>
 80076f2:	2a2d      	cmp	r2, #45	; 0x2d
 80076f4:	d1c7      	bne.n	8007686 <_strtod_l+0x46>
 80076f6:	2201      	movs	r2, #1
 80076f8:	920a      	str	r2, [sp, #40]	; 0x28
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1c2      	bne.n	800768a <_strtod_l+0x4a>
 8007704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007706:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 856e 	bne.w	80081ec <_strtod_l+0xbac>
 8007710:	4652      	mov	r2, sl
 8007712:	465b      	mov	r3, fp
 8007714:	e7e1      	b.n	80076da <_strtod_l+0x9a>
 8007716:	2200      	movs	r2, #0
 8007718:	e7ee      	b.n	80076f8 <_strtod_l+0xb8>
 800771a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800771c:	b13a      	cbz	r2, 800772e <_strtod_l+0xee>
 800771e:	2135      	movs	r1, #53	; 0x35
 8007720:	a81a      	add	r0, sp, #104	; 0x68
 8007722:	f001 fdac 	bl	800927e <__copybits>
 8007726:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007728:	4620      	mov	r0, r4
 800772a:	f001 f96b 	bl	8008a04 <_Bfree>
 800772e:	3f01      	subs	r7, #1
 8007730:	2f04      	cmp	r7, #4
 8007732:	d806      	bhi.n	8007742 <_strtod_l+0x102>
 8007734:	e8df f007 	tbb	[pc, r7]
 8007738:	1714030a 	.word	0x1714030a
 800773c:	0a          	.byte	0x0a
 800773d:	00          	.byte	0x00
 800773e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007742:	0728      	lsls	r0, r5, #28
 8007744:	d5c0      	bpl.n	80076c8 <_strtod_l+0x88>
 8007746:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800774a:	e7bd      	b.n	80076c8 <_strtod_l+0x88>
 800774c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007750:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007756:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800775a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800775e:	e7f0      	b.n	8007742 <_strtod_l+0x102>
 8007760:	f8df b180 	ldr.w	fp, [pc, #384]	; 80078e4 <_strtod_l+0x2a4>
 8007764:	e7ed      	b.n	8007742 <_strtod_l+0x102>
 8007766:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800776a:	f04f 3aff 	mov.w	sl, #4294967295
 800776e:	e7e8      	b.n	8007742 <_strtod_l+0x102>
 8007770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	9217      	str	r2, [sp, #92]	; 0x5c
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	2b30      	cmp	r3, #48	; 0x30
 800777a:	d0f9      	beq.n	8007770 <_strtod_l+0x130>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0a3      	beq.n	80076c8 <_strtod_l+0x88>
 8007780:	2301      	movs	r3, #1
 8007782:	f04f 0900 	mov.w	r9, #0
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800778a:	9308      	str	r3, [sp, #32]
 800778c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007790:	464f      	mov	r7, r9
 8007792:	220a      	movs	r2, #10
 8007794:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007796:	7806      	ldrb	r6, [r0, #0]
 8007798:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800779c:	b2d9      	uxtb	r1, r3
 800779e:	2909      	cmp	r1, #9
 80077a0:	d92a      	bls.n	80077f8 <_strtod_l+0x1b8>
 80077a2:	9905      	ldr	r1, [sp, #20]
 80077a4:	462a      	mov	r2, r5
 80077a6:	f001 fe73 	bl	8009490 <strncmp>
 80077aa:	b398      	cbz	r0, 8007814 <_strtod_l+0x1d4>
 80077ac:	2000      	movs	r0, #0
 80077ae:	4632      	mov	r2, r6
 80077b0:	463d      	mov	r5, r7
 80077b2:	9005      	str	r0, [sp, #20]
 80077b4:	4603      	mov	r3, r0
 80077b6:	2a65      	cmp	r2, #101	; 0x65
 80077b8:	d001      	beq.n	80077be <_strtod_l+0x17e>
 80077ba:	2a45      	cmp	r2, #69	; 0x45
 80077bc:	d118      	bne.n	80077f0 <_strtod_l+0x1b0>
 80077be:	b91d      	cbnz	r5, 80077c8 <_strtod_l+0x188>
 80077c0:	9a04      	ldr	r2, [sp, #16]
 80077c2:	4302      	orrs	r2, r0
 80077c4:	d09e      	beq.n	8007704 <_strtod_l+0xc4>
 80077c6:	2500      	movs	r5, #0
 80077c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80077cc:	f108 0201 	add.w	r2, r8, #1
 80077d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80077d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80077d6:	2a2b      	cmp	r2, #43	; 0x2b
 80077d8:	d075      	beq.n	80078c6 <_strtod_l+0x286>
 80077da:	2a2d      	cmp	r2, #45	; 0x2d
 80077dc:	d07b      	beq.n	80078d6 <_strtod_l+0x296>
 80077de:	f04f 0c00 	mov.w	ip, #0
 80077e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077e6:	2909      	cmp	r1, #9
 80077e8:	f240 8082 	bls.w	80078f0 <_strtod_l+0x2b0>
 80077ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80077f0:	2600      	movs	r6, #0
 80077f2:	e09d      	b.n	8007930 <_strtod_l+0x2f0>
 80077f4:	2300      	movs	r3, #0
 80077f6:	e7c4      	b.n	8007782 <_strtod_l+0x142>
 80077f8:	2f08      	cmp	r7, #8
 80077fa:	bfd8      	it	le
 80077fc:	9907      	ldrle	r1, [sp, #28]
 80077fe:	f100 0001 	add.w	r0, r0, #1
 8007802:	bfda      	itte	le
 8007804:	fb02 3301 	mlale	r3, r2, r1, r3
 8007808:	9307      	strle	r3, [sp, #28]
 800780a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800780e:	3701      	adds	r7, #1
 8007810:	9017      	str	r0, [sp, #92]	; 0x5c
 8007812:	e7bf      	b.n	8007794 <_strtod_l+0x154>
 8007814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007816:	195a      	adds	r2, r3, r5
 8007818:	9217      	str	r2, [sp, #92]	; 0x5c
 800781a:	5d5a      	ldrb	r2, [r3, r5]
 800781c:	2f00      	cmp	r7, #0
 800781e:	d037      	beq.n	8007890 <_strtod_l+0x250>
 8007820:	9005      	str	r0, [sp, #20]
 8007822:	463d      	mov	r5, r7
 8007824:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007828:	2b09      	cmp	r3, #9
 800782a:	d912      	bls.n	8007852 <_strtod_l+0x212>
 800782c:	2301      	movs	r3, #1
 800782e:	e7c2      	b.n	80077b6 <_strtod_l+0x176>
 8007830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	9217      	str	r2, [sp, #92]	; 0x5c
 8007836:	785a      	ldrb	r2, [r3, #1]
 8007838:	3001      	adds	r0, #1
 800783a:	2a30      	cmp	r2, #48	; 0x30
 800783c:	d0f8      	beq.n	8007830 <_strtod_l+0x1f0>
 800783e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007842:	2b08      	cmp	r3, #8
 8007844:	f200 84d9 	bhi.w	80081fa <_strtod_l+0xbba>
 8007848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800784a:	9005      	str	r0, [sp, #20]
 800784c:	2000      	movs	r0, #0
 800784e:	9308      	str	r3, [sp, #32]
 8007850:	4605      	mov	r5, r0
 8007852:	3a30      	subs	r2, #48	; 0x30
 8007854:	f100 0301 	add.w	r3, r0, #1
 8007858:	d014      	beq.n	8007884 <_strtod_l+0x244>
 800785a:	9905      	ldr	r1, [sp, #20]
 800785c:	4419      	add	r1, r3
 800785e:	9105      	str	r1, [sp, #20]
 8007860:	462b      	mov	r3, r5
 8007862:	eb00 0e05 	add.w	lr, r0, r5
 8007866:	210a      	movs	r1, #10
 8007868:	4573      	cmp	r3, lr
 800786a:	d113      	bne.n	8007894 <_strtod_l+0x254>
 800786c:	182b      	adds	r3, r5, r0
 800786e:	2b08      	cmp	r3, #8
 8007870:	f105 0501 	add.w	r5, r5, #1
 8007874:	4405      	add	r5, r0
 8007876:	dc1c      	bgt.n	80078b2 <_strtod_l+0x272>
 8007878:	9907      	ldr	r1, [sp, #28]
 800787a:	230a      	movs	r3, #10
 800787c:	fb03 2301 	mla	r3, r3, r1, r2
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	2300      	movs	r3, #0
 8007884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007886:	1c51      	adds	r1, r2, #1
 8007888:	9117      	str	r1, [sp, #92]	; 0x5c
 800788a:	7852      	ldrb	r2, [r2, #1]
 800788c:	4618      	mov	r0, r3
 800788e:	e7c9      	b.n	8007824 <_strtod_l+0x1e4>
 8007890:	4638      	mov	r0, r7
 8007892:	e7d2      	b.n	800783a <_strtod_l+0x1fa>
 8007894:	2b08      	cmp	r3, #8
 8007896:	dc04      	bgt.n	80078a2 <_strtod_l+0x262>
 8007898:	9e07      	ldr	r6, [sp, #28]
 800789a:	434e      	muls	r6, r1
 800789c:	9607      	str	r6, [sp, #28]
 800789e:	3301      	adds	r3, #1
 80078a0:	e7e2      	b.n	8007868 <_strtod_l+0x228>
 80078a2:	f103 0c01 	add.w	ip, r3, #1
 80078a6:	f1bc 0f10 	cmp.w	ip, #16
 80078aa:	bfd8      	it	le
 80078ac:	fb01 f909 	mulle.w	r9, r1, r9
 80078b0:	e7f5      	b.n	800789e <_strtod_l+0x25e>
 80078b2:	2d10      	cmp	r5, #16
 80078b4:	bfdc      	itt	le
 80078b6:	230a      	movle	r3, #10
 80078b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80078bc:	e7e1      	b.n	8007882 <_strtod_l+0x242>
 80078be:	2300      	movs	r3, #0
 80078c0:	9305      	str	r3, [sp, #20]
 80078c2:	2301      	movs	r3, #1
 80078c4:	e77c      	b.n	80077c0 <_strtod_l+0x180>
 80078c6:	f04f 0c00 	mov.w	ip, #0
 80078ca:	f108 0202 	add.w	r2, r8, #2
 80078ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80078d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80078d4:	e785      	b.n	80077e2 <_strtod_l+0x1a2>
 80078d6:	f04f 0c01 	mov.w	ip, #1
 80078da:	e7f6      	b.n	80078ca <_strtod_l+0x28a>
 80078dc:	0800a588 	.word	0x0800a588
 80078e0:	0800a4bc 	.word	0x0800a4bc
 80078e4:	7ff00000 	.word	0x7ff00000
 80078e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078ea:	1c51      	adds	r1, r2, #1
 80078ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80078ee:	7852      	ldrb	r2, [r2, #1]
 80078f0:	2a30      	cmp	r2, #48	; 0x30
 80078f2:	d0f9      	beq.n	80078e8 <_strtod_l+0x2a8>
 80078f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80078f8:	2908      	cmp	r1, #8
 80078fa:	f63f af79 	bhi.w	80077f0 <_strtod_l+0x1b0>
 80078fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007904:	9206      	str	r2, [sp, #24]
 8007906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007908:	1c51      	adds	r1, r2, #1
 800790a:	9117      	str	r1, [sp, #92]	; 0x5c
 800790c:	7852      	ldrb	r2, [r2, #1]
 800790e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007912:	2e09      	cmp	r6, #9
 8007914:	d937      	bls.n	8007986 <_strtod_l+0x346>
 8007916:	9e06      	ldr	r6, [sp, #24]
 8007918:	1b89      	subs	r1, r1, r6
 800791a:	2908      	cmp	r1, #8
 800791c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007920:	dc02      	bgt.n	8007928 <_strtod_l+0x2e8>
 8007922:	4576      	cmp	r6, lr
 8007924:	bfa8      	it	ge
 8007926:	4676      	movge	r6, lr
 8007928:	f1bc 0f00 	cmp.w	ip, #0
 800792c:	d000      	beq.n	8007930 <_strtod_l+0x2f0>
 800792e:	4276      	negs	r6, r6
 8007930:	2d00      	cmp	r5, #0
 8007932:	d14d      	bne.n	80079d0 <_strtod_l+0x390>
 8007934:	9904      	ldr	r1, [sp, #16]
 8007936:	4301      	orrs	r1, r0
 8007938:	f47f aec6 	bne.w	80076c8 <_strtod_l+0x88>
 800793c:	2b00      	cmp	r3, #0
 800793e:	f47f aee1 	bne.w	8007704 <_strtod_l+0xc4>
 8007942:	2a69      	cmp	r2, #105	; 0x69
 8007944:	d027      	beq.n	8007996 <_strtod_l+0x356>
 8007946:	dc24      	bgt.n	8007992 <_strtod_l+0x352>
 8007948:	2a49      	cmp	r2, #73	; 0x49
 800794a:	d024      	beq.n	8007996 <_strtod_l+0x356>
 800794c:	2a4e      	cmp	r2, #78	; 0x4e
 800794e:	f47f aed9 	bne.w	8007704 <_strtod_l+0xc4>
 8007952:	499f      	ldr	r1, [pc, #636]	; (8007bd0 <_strtod_l+0x590>)
 8007954:	a817      	add	r0, sp, #92	; 0x5c
 8007956:	f000 ff45 	bl	80087e4 <__match>
 800795a:	2800      	cmp	r0, #0
 800795c:	f43f aed2 	beq.w	8007704 <_strtod_l+0xc4>
 8007960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b28      	cmp	r3, #40	; 0x28
 8007966:	d12d      	bne.n	80079c4 <_strtod_l+0x384>
 8007968:	499a      	ldr	r1, [pc, #616]	; (8007bd4 <_strtod_l+0x594>)
 800796a:	aa1a      	add	r2, sp, #104	; 0x68
 800796c:	a817      	add	r0, sp, #92	; 0x5c
 800796e:	f000 ff4d 	bl	800880c <__hexnan>
 8007972:	2805      	cmp	r0, #5
 8007974:	d126      	bne.n	80079c4 <_strtod_l+0x384>
 8007976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007978:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800797c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007980:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007984:	e6a0      	b.n	80076c8 <_strtod_l+0x88>
 8007986:	210a      	movs	r1, #10
 8007988:	fb01 2e0e 	mla	lr, r1, lr, r2
 800798c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007990:	e7b9      	b.n	8007906 <_strtod_l+0x2c6>
 8007992:	2a6e      	cmp	r2, #110	; 0x6e
 8007994:	e7db      	b.n	800794e <_strtod_l+0x30e>
 8007996:	4990      	ldr	r1, [pc, #576]	; (8007bd8 <_strtod_l+0x598>)
 8007998:	a817      	add	r0, sp, #92	; 0x5c
 800799a:	f000 ff23 	bl	80087e4 <__match>
 800799e:	2800      	cmp	r0, #0
 80079a0:	f43f aeb0 	beq.w	8007704 <_strtod_l+0xc4>
 80079a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a6:	498d      	ldr	r1, [pc, #564]	; (8007bdc <_strtod_l+0x59c>)
 80079a8:	3b01      	subs	r3, #1
 80079aa:	a817      	add	r0, sp, #92	; 0x5c
 80079ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80079ae:	f000 ff19 	bl	80087e4 <__match>
 80079b2:	b910      	cbnz	r0, 80079ba <_strtod_l+0x37a>
 80079b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079b6:	3301      	adds	r3, #1
 80079b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80079ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007bec <_strtod_l+0x5ac>
 80079be:	f04f 0a00 	mov.w	sl, #0
 80079c2:	e681      	b.n	80076c8 <_strtod_l+0x88>
 80079c4:	4886      	ldr	r0, [pc, #536]	; (8007be0 <_strtod_l+0x5a0>)
 80079c6:	f001 fd4b 	bl	8009460 <nan>
 80079ca:	ec5b ab10 	vmov	sl, fp, d0
 80079ce:	e67b      	b.n	80076c8 <_strtod_l+0x88>
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	9807      	ldr	r0, [sp, #28]
 80079d4:	1af3      	subs	r3, r6, r3
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	bf08      	it	eq
 80079da:	462f      	moveq	r7, r5
 80079dc:	2d10      	cmp	r5, #16
 80079de:	9306      	str	r3, [sp, #24]
 80079e0:	46a8      	mov	r8, r5
 80079e2:	bfa8      	it	ge
 80079e4:	f04f 0810 	movge.w	r8, #16
 80079e8:	f7f8 fdc4 	bl	8000574 <__aeabi_ui2d>
 80079ec:	2d09      	cmp	r5, #9
 80079ee:	4682      	mov	sl, r0
 80079f0:	468b      	mov	fp, r1
 80079f2:	dd13      	ble.n	8007a1c <_strtod_l+0x3dc>
 80079f4:	4b7b      	ldr	r3, [pc, #492]	; (8007be4 <_strtod_l+0x5a4>)
 80079f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80079fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079fe:	f7f8 fe33 	bl	8000668 <__aeabi_dmul>
 8007a02:	4682      	mov	sl, r0
 8007a04:	4648      	mov	r0, r9
 8007a06:	468b      	mov	fp, r1
 8007a08:	f7f8 fdb4 	bl	8000574 <__aeabi_ui2d>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4650      	mov	r0, sl
 8007a12:	4659      	mov	r1, fp
 8007a14:	f7f8 fc72 	bl	80002fc <__adddf3>
 8007a18:	4682      	mov	sl, r0
 8007a1a:	468b      	mov	fp, r1
 8007a1c:	2d0f      	cmp	r5, #15
 8007a1e:	dc38      	bgt.n	8007a92 <_strtod_l+0x452>
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f43f ae50 	beq.w	80076c8 <_strtod_l+0x88>
 8007a28:	dd24      	ble.n	8007a74 <_strtod_l+0x434>
 8007a2a:	2b16      	cmp	r3, #22
 8007a2c:	dc0b      	bgt.n	8007a46 <_strtod_l+0x406>
 8007a2e:	496d      	ldr	r1, [pc, #436]	; (8007be4 <_strtod_l+0x5a4>)
 8007a30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a38:	4652      	mov	r2, sl
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	f7f8 fe14 	bl	8000668 <__aeabi_dmul>
 8007a40:	4682      	mov	sl, r0
 8007a42:	468b      	mov	fp, r1
 8007a44:	e640      	b.n	80076c8 <_strtod_l+0x88>
 8007a46:	9a06      	ldr	r2, [sp, #24]
 8007a48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	db20      	blt.n	8007a92 <_strtod_l+0x452>
 8007a50:	4c64      	ldr	r4, [pc, #400]	; (8007be4 <_strtod_l+0x5a4>)
 8007a52:	f1c5 050f 	rsb	r5, r5, #15
 8007a56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a62:	f7f8 fe01 	bl	8000668 <__aeabi_dmul>
 8007a66:	9b06      	ldr	r3, [sp, #24]
 8007a68:	1b5d      	subs	r5, r3, r5
 8007a6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a72:	e7e3      	b.n	8007a3c <_strtod_l+0x3fc>
 8007a74:	9b06      	ldr	r3, [sp, #24]
 8007a76:	3316      	adds	r3, #22
 8007a78:	db0b      	blt.n	8007a92 <_strtod_l+0x452>
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	1b9e      	subs	r6, r3, r6
 8007a7e:	4b59      	ldr	r3, [pc, #356]	; (8007be4 <_strtod_l+0x5a4>)
 8007a80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007a84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a88:	4650      	mov	r0, sl
 8007a8a:	4659      	mov	r1, fp
 8007a8c:	f7f8 ff16 	bl	80008bc <__aeabi_ddiv>
 8007a90:	e7d6      	b.n	8007a40 <_strtod_l+0x400>
 8007a92:	9b06      	ldr	r3, [sp, #24]
 8007a94:	eba5 0808 	sub.w	r8, r5, r8
 8007a98:	4498      	add	r8, r3
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	dd74      	ble.n	8007b8a <_strtod_l+0x54a>
 8007aa0:	f018 030f 	ands.w	r3, r8, #15
 8007aa4:	d00a      	beq.n	8007abc <_strtod_l+0x47c>
 8007aa6:	494f      	ldr	r1, [pc, #316]	; (8007be4 <_strtod_l+0x5a4>)
 8007aa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007aac:	4652      	mov	r2, sl
 8007aae:	465b      	mov	r3, fp
 8007ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab4:	f7f8 fdd8 	bl	8000668 <__aeabi_dmul>
 8007ab8:	4682      	mov	sl, r0
 8007aba:	468b      	mov	fp, r1
 8007abc:	f038 080f 	bics.w	r8, r8, #15
 8007ac0:	d04f      	beq.n	8007b62 <_strtod_l+0x522>
 8007ac2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007ac6:	dd22      	ble.n	8007b0e <_strtod_l+0x4ce>
 8007ac8:	2500      	movs	r5, #0
 8007aca:	462e      	mov	r6, r5
 8007acc:	9507      	str	r5, [sp, #28]
 8007ace:	9505      	str	r5, [sp, #20]
 8007ad0:	2322      	movs	r3, #34	; 0x22
 8007ad2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007bec <_strtod_l+0x5ac>
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	f04f 0a00 	mov.w	sl, #0
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f43f adf2 	beq.w	80076c8 <_strtod_l+0x88>
 8007ae4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 ff8c 	bl	8008a04 <_Bfree>
 8007aec:	9905      	ldr	r1, [sp, #20]
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 ff88 	bl	8008a04 <_Bfree>
 8007af4:	4631      	mov	r1, r6
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 ff84 	bl	8008a04 <_Bfree>
 8007afc:	9907      	ldr	r1, [sp, #28]
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 ff80 	bl	8008a04 <_Bfree>
 8007b04:	4629      	mov	r1, r5
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 ff7c 	bl	8008a04 <_Bfree>
 8007b0c:	e5dc      	b.n	80076c8 <_strtod_l+0x88>
 8007b0e:	4b36      	ldr	r3, [pc, #216]	; (8007be8 <_strtod_l+0x5a8>)
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	2300      	movs	r3, #0
 8007b14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	4699      	mov	r9, r3
 8007b1e:	f1b8 0f01 	cmp.w	r8, #1
 8007b22:	dc21      	bgt.n	8007b68 <_strtod_l+0x528>
 8007b24:	b10b      	cbz	r3, 8007b2a <_strtod_l+0x4ea>
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	; (8007be8 <_strtod_l+0x5a8>)
 8007b2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007b30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007b34:	4652      	mov	r2, sl
 8007b36:	465b      	mov	r3, fp
 8007b38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007b3c:	f7f8 fd94 	bl	8000668 <__aeabi_dmul>
 8007b40:	4b2a      	ldr	r3, [pc, #168]	; (8007bec <_strtod_l+0x5ac>)
 8007b42:	460a      	mov	r2, r1
 8007b44:	400b      	ands	r3, r1
 8007b46:	492a      	ldr	r1, [pc, #168]	; (8007bf0 <_strtod_l+0x5b0>)
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	4682      	mov	sl, r0
 8007b4c:	d8bc      	bhi.n	8007ac8 <_strtod_l+0x488>
 8007b4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b52:	428b      	cmp	r3, r1
 8007b54:	bf86      	itte	hi
 8007b56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007bf4 <_strtod_l+0x5b4>
 8007b5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b62:	2300      	movs	r3, #0
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	e084      	b.n	8007c72 <_strtod_l+0x632>
 8007b68:	f018 0f01 	tst.w	r8, #1
 8007b6c:	d005      	beq.n	8007b7a <_strtod_l+0x53a>
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f7f8 fd78 	bl	8000668 <__aeabi_dmul>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	9a04      	ldr	r2, [sp, #16]
 8007b7c:	3208      	adds	r2, #8
 8007b7e:	f109 0901 	add.w	r9, r9, #1
 8007b82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b86:	9204      	str	r2, [sp, #16]
 8007b88:	e7c9      	b.n	8007b1e <_strtod_l+0x4de>
 8007b8a:	d0ea      	beq.n	8007b62 <_strtod_l+0x522>
 8007b8c:	f1c8 0800 	rsb	r8, r8, #0
 8007b90:	f018 020f 	ands.w	r2, r8, #15
 8007b94:	d00a      	beq.n	8007bac <_strtod_l+0x56c>
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <_strtod_l+0x5a4>)
 8007b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fe8a 	bl	80008bc <__aeabi_ddiv>
 8007ba8:	4682      	mov	sl, r0
 8007baa:	468b      	mov	fp, r1
 8007bac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007bb0:	d0d7      	beq.n	8007b62 <_strtod_l+0x522>
 8007bb2:	f1b8 0f1f 	cmp.w	r8, #31
 8007bb6:	dd1f      	ble.n	8007bf8 <_strtod_l+0x5b8>
 8007bb8:	2500      	movs	r5, #0
 8007bba:	462e      	mov	r6, r5
 8007bbc:	9507      	str	r5, [sp, #28]
 8007bbe:	9505      	str	r5, [sp, #20]
 8007bc0:	2322      	movs	r3, #34	; 0x22
 8007bc2:	f04f 0a00 	mov.w	sl, #0
 8007bc6:	f04f 0b00 	mov.w	fp, #0
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	e786      	b.n	8007adc <_strtod_l+0x49c>
 8007bce:	bf00      	nop
 8007bd0:	0800a4b9 	.word	0x0800a4b9
 8007bd4:	0800a4d0 	.word	0x0800a4d0
 8007bd8:	0800a4b0 	.word	0x0800a4b0
 8007bdc:	0800a4b3 	.word	0x0800a4b3
 8007be0:	0800a747 	.word	0x0800a747
 8007be4:	0800a638 	.word	0x0800a638
 8007be8:	0800a610 	.word	0x0800a610
 8007bec:	7ff00000 	.word	0x7ff00000
 8007bf0:	7ca00000 	.word	0x7ca00000
 8007bf4:	7fefffff 	.word	0x7fefffff
 8007bf8:	f018 0310 	ands.w	r3, r8, #16
 8007bfc:	bf18      	it	ne
 8007bfe:	236a      	movne	r3, #106	; 0x6a
 8007c00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007fb0 <_strtod_l+0x970>
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	4650      	mov	r0, sl
 8007c08:	4659      	mov	r1, fp
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f018 0f01 	tst.w	r8, #1
 8007c10:	d004      	beq.n	8007c1c <_strtod_l+0x5dc>
 8007c12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007c16:	f7f8 fd27 	bl	8000668 <__aeabi_dmul>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007c20:	f109 0908 	add.w	r9, r9, #8
 8007c24:	d1f2      	bne.n	8007c0c <_strtod_l+0x5cc>
 8007c26:	b10b      	cbz	r3, 8007c2c <_strtod_l+0x5ec>
 8007c28:	4682      	mov	sl, r0
 8007c2a:	468b      	mov	fp, r1
 8007c2c:	9b04      	ldr	r3, [sp, #16]
 8007c2e:	b1c3      	cbz	r3, 8007c62 <_strtod_l+0x622>
 8007c30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	4659      	mov	r1, fp
 8007c3c:	dd11      	ble.n	8007c62 <_strtod_l+0x622>
 8007c3e:	2b1f      	cmp	r3, #31
 8007c40:	f340 8124 	ble.w	8007e8c <_strtod_l+0x84c>
 8007c44:	2b34      	cmp	r3, #52	; 0x34
 8007c46:	bfde      	ittt	le
 8007c48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c4c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c50:	fa03 f202 	lslle.w	r2, r3, r2
 8007c54:	f04f 0a00 	mov.w	sl, #0
 8007c58:	bfcc      	ite	gt
 8007c5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c5e:	ea02 0b01 	andle.w	fp, r2, r1
 8007c62:	2200      	movs	r2, #0
 8007c64:	2300      	movs	r3, #0
 8007c66:	4650      	mov	r0, sl
 8007c68:	4659      	mov	r1, fp
 8007c6a:	f7f8 ff65 	bl	8000b38 <__aeabi_dcmpeq>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d1a2      	bne.n	8007bb8 <_strtod_l+0x578>
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	9908      	ldr	r1, [sp, #32]
 8007c78:	462b      	mov	r3, r5
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 ff29 	bl	8008ad4 <__s2b>
 8007c82:	9007      	str	r0, [sp, #28]
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f af1f 	beq.w	8007ac8 <_strtod_l+0x488>
 8007c8a:	9b05      	ldr	r3, [sp, #20]
 8007c8c:	1b9e      	subs	r6, r3, r6
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfb4      	ite	lt
 8007c94:	4633      	movlt	r3, r6
 8007c96:	2300      	movge	r3, #0
 8007c98:	930c      	str	r3, [sp, #48]	; 0x30
 8007c9a:	9b06      	ldr	r3, [sp, #24]
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ca2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ca4:	462e      	mov	r6, r5
 8007ca6:	9b07      	ldr	r3, [sp, #28]
 8007ca8:	4620      	mov	r0, r4
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	f000 fe6a 	bl	8008984 <_Balloc>
 8007cb0:	9005      	str	r0, [sp, #20]
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f43f af0c 	beq.w	8007ad0 <_strtod_l+0x490>
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	3202      	adds	r2, #2
 8007cbe:	f103 010c 	add.w	r1, r3, #12
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	f000 fe4f 	bl	8008968 <memcpy>
 8007cca:	ec4b ab10 	vmov	d0, sl, fp
 8007cce:	aa1a      	add	r2, sp, #104	; 0x68
 8007cd0:	a919      	add	r1, sp, #100	; 0x64
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f001 fa44 	bl	8009160 <__d2b>
 8007cd8:	ec4b ab18 	vmov	d8, sl, fp
 8007cdc:	9018      	str	r0, [sp, #96]	; 0x60
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f aef6 	beq.w	8007ad0 <_strtod_l+0x490>
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 ff8e 	bl	8008c08 <__i2b>
 8007cec:	4606      	mov	r6, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f43f aeee 	beq.w	8007ad0 <_strtod_l+0x490>
 8007cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf6:	9904      	ldr	r1, [sp, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bfab      	itete	ge
 8007cfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007cfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007d00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007d06:	bfac      	ite	ge
 8007d08:	eb03 0902 	addge.w	r9, r3, r2
 8007d0c:	1ad7      	sublt	r7, r2, r3
 8007d0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d10:	eba3 0801 	sub.w	r8, r3, r1
 8007d14:	4490      	add	r8, r2
 8007d16:	4ba1      	ldr	r3, [pc, #644]	; (8007f9c <_strtod_l+0x95c>)
 8007d18:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d1c:	4598      	cmp	r8, r3
 8007d1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d22:	f280 80c7 	bge.w	8007eb4 <_strtod_l+0x874>
 8007d26:	eba3 0308 	sub.w	r3, r3, r8
 8007d2a:	2b1f      	cmp	r3, #31
 8007d2c:	eba2 0203 	sub.w	r2, r2, r3
 8007d30:	f04f 0101 	mov.w	r1, #1
 8007d34:	f300 80b1 	bgt.w	8007e9a <_strtod_l+0x85a>
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9308      	str	r3, [sp, #32]
 8007d42:	eb09 0802 	add.w	r8, r9, r2
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	45c1      	cmp	r9, r8
 8007d4a:	4417      	add	r7, r2
 8007d4c:	441f      	add	r7, r3
 8007d4e:	464b      	mov	r3, r9
 8007d50:	bfa8      	it	ge
 8007d52:	4643      	movge	r3, r8
 8007d54:	42bb      	cmp	r3, r7
 8007d56:	bfa8      	it	ge
 8007d58:	463b      	movge	r3, r7
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfc2      	ittt	gt
 8007d5e:	eba8 0803 	subgt.w	r8, r8, r3
 8007d62:	1aff      	subgt	r7, r7, r3
 8007d64:	eba9 0903 	subgt.w	r9, r9, r3
 8007d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dd17      	ble.n	8007d9e <_strtod_l+0x75e>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	461a      	mov	r2, r3
 8007d72:	4620      	mov	r0, r4
 8007d74:	f001 f808 	bl	8008d88 <__pow5mult>
 8007d78:	4606      	mov	r6, r0
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	f43f aea8 	beq.w	8007ad0 <_strtod_l+0x490>
 8007d80:	4601      	mov	r1, r0
 8007d82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 ff55 	bl	8008c34 <__multiply>
 8007d8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f43f ae9f 	beq.w	8007ad0 <_strtod_l+0x490>
 8007d92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fe35 	bl	8008a04 <_Bfree>
 8007d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9c:	9318      	str	r3, [sp, #96]	; 0x60
 8007d9e:	f1b8 0f00 	cmp.w	r8, #0
 8007da2:	f300 808c 	bgt.w	8007ebe <_strtod_l+0x87e>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dd08      	ble.n	8007dbe <_strtod_l+0x77e>
 8007dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dae:	9905      	ldr	r1, [sp, #20]
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 ffe9 	bl	8008d88 <__pow5mult>
 8007db6:	9005      	str	r0, [sp, #20]
 8007db8:	2800      	cmp	r0, #0
 8007dba:	f43f ae89 	beq.w	8007ad0 <_strtod_l+0x490>
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	dd08      	ble.n	8007dd4 <_strtod_l+0x794>
 8007dc2:	9905      	ldr	r1, [sp, #20]
 8007dc4:	463a      	mov	r2, r7
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f001 f838 	bl	8008e3c <__lshift>
 8007dcc:	9005      	str	r0, [sp, #20]
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f ae7e 	beq.w	8007ad0 <_strtod_l+0x490>
 8007dd4:	f1b9 0f00 	cmp.w	r9, #0
 8007dd8:	dd08      	ble.n	8007dec <_strtod_l+0x7ac>
 8007dda:	4631      	mov	r1, r6
 8007ddc:	464a      	mov	r2, r9
 8007dde:	4620      	mov	r0, r4
 8007de0:	f001 f82c 	bl	8008e3c <__lshift>
 8007de4:	4606      	mov	r6, r0
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f ae72 	beq.w	8007ad0 <_strtod_l+0x490>
 8007dec:	9a05      	ldr	r2, [sp, #20]
 8007dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007df0:	4620      	mov	r0, r4
 8007df2:	f001 f8af 	bl	8008f54 <__mdiff>
 8007df6:	4605      	mov	r5, r0
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f43f ae69 	beq.w	8007ad0 <_strtod_l+0x490>
 8007dfe:	68c3      	ldr	r3, [r0, #12]
 8007e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e02:	2300      	movs	r3, #0
 8007e04:	60c3      	str	r3, [r0, #12]
 8007e06:	4631      	mov	r1, r6
 8007e08:	f001 f888 	bl	8008f1c <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	da60      	bge.n	8007ed2 <_strtod_l+0x892>
 8007e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e12:	ea53 030a 	orrs.w	r3, r3, sl
 8007e16:	f040 8082 	bne.w	8007f1e <_strtod_l+0x8de>
 8007e1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d17d      	bne.n	8007f1e <_strtod_l+0x8de>
 8007e22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e26:	0d1b      	lsrs	r3, r3, #20
 8007e28:	051b      	lsls	r3, r3, #20
 8007e2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e2e:	d976      	bls.n	8007f1e <_strtod_l+0x8de>
 8007e30:	696b      	ldr	r3, [r5, #20]
 8007e32:	b913      	cbnz	r3, 8007e3a <_strtod_l+0x7fa>
 8007e34:	692b      	ldr	r3, [r5, #16]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	dd71      	ble.n	8007f1e <_strtod_l+0x8de>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 fffc 	bl	8008e3c <__lshift>
 8007e44:	4631      	mov	r1, r6
 8007e46:	4605      	mov	r5, r0
 8007e48:	f001 f868 	bl	8008f1c <__mcmp>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	dd66      	ble.n	8007f1e <_strtod_l+0x8de>
 8007e50:	9904      	ldr	r1, [sp, #16]
 8007e52:	4a53      	ldr	r2, [pc, #332]	; (8007fa0 <_strtod_l+0x960>)
 8007e54:	465b      	mov	r3, fp
 8007e56:	2900      	cmp	r1, #0
 8007e58:	f000 8081 	beq.w	8007f5e <_strtod_l+0x91e>
 8007e5c:	ea02 010b 	and.w	r1, r2, fp
 8007e60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e64:	dc7b      	bgt.n	8007f5e <_strtod_l+0x91e>
 8007e66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e6a:	f77f aea9 	ble.w	8007bc0 <_strtod_l+0x580>
 8007e6e:	4b4d      	ldr	r3, [pc, #308]	; (8007fa4 <_strtod_l+0x964>)
 8007e70:	4650      	mov	r0, sl
 8007e72:	4659      	mov	r1, fp
 8007e74:	2200      	movs	r2, #0
 8007e76:	f7f8 fbf7 	bl	8000668 <__aeabi_dmul>
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4303      	orrs	r3, r0
 8007e7e:	bf08      	it	eq
 8007e80:	2322      	moveq	r3, #34	; 0x22
 8007e82:	4682      	mov	sl, r0
 8007e84:	468b      	mov	fp, r1
 8007e86:	bf08      	it	eq
 8007e88:	6023      	streq	r3, [r4, #0]
 8007e8a:	e62b      	b.n	8007ae4 <_strtod_l+0x4a4>
 8007e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	ea03 0a0a 	and.w	sl, r3, sl
 8007e98:	e6e3      	b.n	8007c62 <_strtod_l+0x622>
 8007e9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007e9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007ea2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ea6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007eaa:	fa01 f308 	lsl.w	r3, r1, r8
 8007eae:	9308      	str	r3, [sp, #32]
 8007eb0:	910d      	str	r1, [sp, #52]	; 0x34
 8007eb2:	e746      	b.n	8007d42 <_strtod_l+0x702>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9308      	str	r3, [sp, #32]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	930d      	str	r3, [sp, #52]	; 0x34
 8007ebc:	e741      	b.n	8007d42 <_strtod_l+0x702>
 8007ebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 ffba 	bl	8008e3c <__lshift>
 8007ec8:	9018      	str	r0, [sp, #96]	; 0x60
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f47f af6b 	bne.w	8007da6 <_strtod_l+0x766>
 8007ed0:	e5fe      	b.n	8007ad0 <_strtod_l+0x490>
 8007ed2:	465f      	mov	r7, fp
 8007ed4:	d16e      	bne.n	8007fb4 <_strtod_l+0x974>
 8007ed6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007edc:	b342      	cbz	r2, 8007f30 <_strtod_l+0x8f0>
 8007ede:	4a32      	ldr	r2, [pc, #200]	; (8007fa8 <_strtod_l+0x968>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d128      	bne.n	8007f36 <_strtod_l+0x8f6>
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	4651      	mov	r1, sl
 8007ee8:	b1eb      	cbz	r3, 8007f26 <_strtod_l+0x8e6>
 8007eea:	4b2d      	ldr	r3, [pc, #180]	; (8007fa0 <_strtod_l+0x960>)
 8007eec:	403b      	ands	r3, r7
 8007eee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	d819      	bhi.n	8007f2c <_strtod_l+0x8ec>
 8007ef8:	0d1b      	lsrs	r3, r3, #20
 8007efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	4299      	cmp	r1, r3
 8007f04:	d117      	bne.n	8007f36 <_strtod_l+0x8f6>
 8007f06:	4b29      	ldr	r3, [pc, #164]	; (8007fac <_strtod_l+0x96c>)
 8007f08:	429f      	cmp	r7, r3
 8007f0a:	d102      	bne.n	8007f12 <_strtod_l+0x8d2>
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	f43f addf 	beq.w	8007ad0 <_strtod_l+0x490>
 8007f12:	4b23      	ldr	r3, [pc, #140]	; (8007fa0 <_strtod_l+0x960>)
 8007f14:	403b      	ands	r3, r7
 8007f16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007f1a:	f04f 0a00 	mov.w	sl, #0
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1a4      	bne.n	8007e6e <_strtod_l+0x82e>
 8007f24:	e5de      	b.n	8007ae4 <_strtod_l+0x4a4>
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2a:	e7ea      	b.n	8007f02 <_strtod_l+0x8c2>
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	e7e8      	b.n	8007f02 <_strtod_l+0x8c2>
 8007f30:	ea53 030a 	orrs.w	r3, r3, sl
 8007f34:	d08c      	beq.n	8007e50 <_strtod_l+0x810>
 8007f36:	9b08      	ldr	r3, [sp, #32]
 8007f38:	b1db      	cbz	r3, 8007f72 <_strtod_l+0x932>
 8007f3a:	423b      	tst	r3, r7
 8007f3c:	d0ef      	beq.n	8007f1e <_strtod_l+0x8de>
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	9a04      	ldr	r2, [sp, #16]
 8007f42:	4650      	mov	r0, sl
 8007f44:	4659      	mov	r1, fp
 8007f46:	b1c3      	cbz	r3, 8007f7a <_strtod_l+0x93a>
 8007f48:	f7ff fb5e 	bl	8007608 <sulp>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	ec51 0b18 	vmov	r0, r1, d8
 8007f54:	f7f8 f9d2 	bl	80002fc <__adddf3>
 8007f58:	4682      	mov	sl, r0
 8007f5a:	468b      	mov	fp, r1
 8007f5c:	e7df      	b.n	8007f1e <_strtod_l+0x8de>
 8007f5e:	4013      	ands	r3, r2
 8007f60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f6c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f70:	e7d5      	b.n	8007f1e <_strtod_l+0x8de>
 8007f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f74:	ea13 0f0a 	tst.w	r3, sl
 8007f78:	e7e0      	b.n	8007f3c <_strtod_l+0x8fc>
 8007f7a:	f7ff fb45 	bl	8007608 <sulp>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	ec51 0b18 	vmov	r0, r1, d8
 8007f86:	f7f8 f9b7 	bl	80002f8 <__aeabi_dsub>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4682      	mov	sl, r0
 8007f90:	468b      	mov	fp, r1
 8007f92:	f7f8 fdd1 	bl	8000b38 <__aeabi_dcmpeq>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d0c1      	beq.n	8007f1e <_strtod_l+0x8de>
 8007f9a:	e611      	b.n	8007bc0 <_strtod_l+0x580>
 8007f9c:	fffffc02 	.word	0xfffffc02
 8007fa0:	7ff00000 	.word	0x7ff00000
 8007fa4:	39500000 	.word	0x39500000
 8007fa8:	000fffff 	.word	0x000fffff
 8007fac:	7fefffff 	.word	0x7fefffff
 8007fb0:	0800a4e8 	.word	0x0800a4e8
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f001 f92e 	bl	8009218 <__ratio>
 8007fbc:	ec59 8b10 	vmov	r8, r9, d0
 8007fc0:	ee10 0a10 	vmov	r0, s0
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7f8 fdc8 	bl	8000b60 <__aeabi_dcmple>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d07a      	beq.n	80080ca <_strtod_l+0xa8a>
 8007fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d04a      	beq.n	8008070 <_strtod_l+0xa30>
 8007fda:	4b95      	ldr	r3, [pc, #596]	; (8008230 <_strtod_l+0xbf0>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008230 <_strtod_l+0xbf0>
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	4b92      	ldr	r3, [pc, #584]	; (8008234 <_strtod_l+0xbf4>)
 8007fec:	403b      	ands	r3, r7
 8007fee:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ff2:	4b91      	ldr	r3, [pc, #580]	; (8008238 <_strtod_l+0xbf8>)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	f040 80b0 	bne.w	800815a <_strtod_l+0xb1a>
 8007ffa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ffe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008002:	ec4b ab10 	vmov	d0, sl, fp
 8008006:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800800a:	f001 f82d 	bl	8009068 <__ulp>
 800800e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008012:	ec53 2b10 	vmov	r2, r3, d0
 8008016:	f7f8 fb27 	bl	8000668 <__aeabi_dmul>
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	f7f8 f96d 	bl	80002fc <__adddf3>
 8008022:	460b      	mov	r3, r1
 8008024:	4983      	ldr	r1, [pc, #524]	; (8008234 <_strtod_l+0xbf4>)
 8008026:	4a85      	ldr	r2, [pc, #532]	; (800823c <_strtod_l+0xbfc>)
 8008028:	4019      	ands	r1, r3
 800802a:	4291      	cmp	r1, r2
 800802c:	4682      	mov	sl, r0
 800802e:	d960      	bls.n	80080f2 <_strtod_l+0xab2>
 8008030:	ee18 3a90 	vmov	r3, s17
 8008034:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008038:	4293      	cmp	r3, r2
 800803a:	d104      	bne.n	8008046 <_strtod_l+0xa06>
 800803c:	ee18 3a10 	vmov	r3, s16
 8008040:	3301      	adds	r3, #1
 8008042:	f43f ad45 	beq.w	8007ad0 <_strtod_l+0x490>
 8008046:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008248 <_strtod_l+0xc08>
 800804a:	f04f 3aff 	mov.w	sl, #4294967295
 800804e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fcd7 	bl	8008a04 <_Bfree>
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fcd3 	bl	8008a04 <_Bfree>
 800805e:	4631      	mov	r1, r6
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fccf 	bl	8008a04 <_Bfree>
 8008066:	4629      	mov	r1, r5
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fccb 	bl	8008a04 <_Bfree>
 800806e:	e61a      	b.n	8007ca6 <_strtod_l+0x666>
 8008070:	f1ba 0f00 	cmp.w	sl, #0
 8008074:	d11b      	bne.n	80080ae <_strtod_l+0xa6e>
 8008076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800807a:	b9f3      	cbnz	r3, 80080ba <_strtod_l+0xa7a>
 800807c:	4b6c      	ldr	r3, [pc, #432]	; (8008230 <_strtod_l+0xbf0>)
 800807e:	2200      	movs	r2, #0
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fd62 	bl	8000b4c <__aeabi_dcmplt>
 8008088:	b9d0      	cbnz	r0, 80080c0 <_strtod_l+0xa80>
 800808a:	4640      	mov	r0, r8
 800808c:	4649      	mov	r1, r9
 800808e:	4b6c      	ldr	r3, [pc, #432]	; (8008240 <_strtod_l+0xc00>)
 8008090:	2200      	movs	r2, #0
 8008092:	f7f8 fae9 	bl	8000668 <__aeabi_dmul>
 8008096:	4680      	mov	r8, r0
 8008098:	4689      	mov	r9, r1
 800809a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800809e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80080a2:	9315      	str	r3, [sp, #84]	; 0x54
 80080a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80080a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80080ac:	e79d      	b.n	8007fea <_strtod_l+0x9aa>
 80080ae:	f1ba 0f01 	cmp.w	sl, #1
 80080b2:	d102      	bne.n	80080ba <_strtod_l+0xa7a>
 80080b4:	2f00      	cmp	r7, #0
 80080b6:	f43f ad83 	beq.w	8007bc0 <_strtod_l+0x580>
 80080ba:	4b62      	ldr	r3, [pc, #392]	; (8008244 <_strtod_l+0xc04>)
 80080bc:	2200      	movs	r2, #0
 80080be:	e78e      	b.n	8007fde <_strtod_l+0x99e>
 80080c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008240 <_strtod_l+0xc00>
 80080c4:	f04f 0800 	mov.w	r8, #0
 80080c8:	e7e7      	b.n	800809a <_strtod_l+0xa5a>
 80080ca:	4b5d      	ldr	r3, [pc, #372]	; (8008240 <_strtod_l+0xc00>)
 80080cc:	4640      	mov	r0, r8
 80080ce:	4649      	mov	r1, r9
 80080d0:	2200      	movs	r2, #0
 80080d2:	f7f8 fac9 	bl	8000668 <__aeabi_dmul>
 80080d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d8:	4680      	mov	r8, r0
 80080da:	4689      	mov	r9, r1
 80080dc:	b933      	cbnz	r3, 80080ec <_strtod_l+0xaac>
 80080de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e2:	900e      	str	r0, [sp, #56]	; 0x38
 80080e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80080ea:	e7dd      	b.n	80080a8 <_strtod_l+0xa68>
 80080ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80080f0:	e7f9      	b.n	80080e6 <_strtod_l+0xaa6>
 80080f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1a8      	bne.n	800804e <_strtod_l+0xa0e>
 80080fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008102:	0d1b      	lsrs	r3, r3, #20
 8008104:	051b      	lsls	r3, r3, #20
 8008106:	429a      	cmp	r2, r3
 8008108:	d1a1      	bne.n	800804e <_strtod_l+0xa0e>
 800810a:	4640      	mov	r0, r8
 800810c:	4649      	mov	r1, r9
 800810e:	f7f8 fd7d 	bl	8000c0c <__aeabi_d2lz>
 8008112:	f7f8 fa7b 	bl	800060c <__aeabi_l2d>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 f8eb 	bl	80002f8 <__aeabi_dsub>
 8008122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008128:	ea43 030a 	orr.w	r3, r3, sl
 800812c:	4313      	orrs	r3, r2
 800812e:	4680      	mov	r8, r0
 8008130:	4689      	mov	r9, r1
 8008132:	d055      	beq.n	80081e0 <_strtod_l+0xba0>
 8008134:	a336      	add	r3, pc, #216	; (adr r3, 8008210 <_strtod_l+0xbd0>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f7f8 fd07 	bl	8000b4c <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	f47f acd0 	bne.w	8007ae4 <_strtod_l+0x4a4>
 8008144:	a334      	add	r3, pc, #208	; (adr r3, 8008218 <_strtod_l+0xbd8>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	f7f8 fd1b 	bl	8000b88 <__aeabi_dcmpgt>
 8008152:	2800      	cmp	r0, #0
 8008154:	f43f af7b 	beq.w	800804e <_strtod_l+0xa0e>
 8008158:	e4c4      	b.n	8007ae4 <_strtod_l+0x4a4>
 800815a:	9b04      	ldr	r3, [sp, #16]
 800815c:	b333      	cbz	r3, 80081ac <_strtod_l+0xb6c>
 800815e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008160:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008164:	d822      	bhi.n	80081ac <_strtod_l+0xb6c>
 8008166:	a32e      	add	r3, pc, #184	; (adr r3, 8008220 <_strtod_l+0xbe0>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	4640      	mov	r0, r8
 800816e:	4649      	mov	r1, r9
 8008170:	f7f8 fcf6 	bl	8000b60 <__aeabi_dcmple>
 8008174:	b1a0      	cbz	r0, 80081a0 <_strtod_l+0xb60>
 8008176:	4649      	mov	r1, r9
 8008178:	4640      	mov	r0, r8
 800817a:	f7f8 fd0f 	bl	8000b9c <__aeabi_d2uiz>
 800817e:	2801      	cmp	r0, #1
 8008180:	bf38      	it	cc
 8008182:	2001      	movcc	r0, #1
 8008184:	f7f8 f9f6 	bl	8000574 <__aeabi_ui2d>
 8008188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818a:	4680      	mov	r8, r0
 800818c:	4689      	mov	r9, r1
 800818e:	bb23      	cbnz	r3, 80081da <_strtod_l+0xb9a>
 8008190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008194:	9010      	str	r0, [sp, #64]	; 0x40
 8008196:	9311      	str	r3, [sp, #68]	; 0x44
 8008198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800819c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	9309      	str	r3, [sp, #36]	; 0x24
 80081ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081b0:	eeb0 0a48 	vmov.f32	s0, s16
 80081b4:	eef0 0a68 	vmov.f32	s1, s17
 80081b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081bc:	f000 ff54 	bl	8009068 <__ulp>
 80081c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081c4:	ec53 2b10 	vmov	r2, r3, d0
 80081c8:	f7f8 fa4e 	bl	8000668 <__aeabi_dmul>
 80081cc:	ec53 2b18 	vmov	r2, r3, d8
 80081d0:	f7f8 f894 	bl	80002fc <__adddf3>
 80081d4:	4682      	mov	sl, r0
 80081d6:	468b      	mov	fp, r1
 80081d8:	e78d      	b.n	80080f6 <_strtod_l+0xab6>
 80081da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80081de:	e7db      	b.n	8008198 <_strtod_l+0xb58>
 80081e0:	a311      	add	r3, pc, #68	; (adr r3, 8008228 <_strtod_l+0xbe8>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f8 fcb1 	bl	8000b4c <__aeabi_dcmplt>
 80081ea:	e7b2      	b.n	8008152 <_strtod_l+0xb12>
 80081ec:	2300      	movs	r3, #0
 80081ee:	930a      	str	r3, [sp, #40]	; 0x28
 80081f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	f7ff ba6b 	b.w	80076d0 <_strtod_l+0x90>
 80081fa:	2a65      	cmp	r2, #101	; 0x65
 80081fc:	f43f ab5f 	beq.w	80078be <_strtod_l+0x27e>
 8008200:	2a45      	cmp	r2, #69	; 0x45
 8008202:	f43f ab5c 	beq.w	80078be <_strtod_l+0x27e>
 8008206:	2301      	movs	r3, #1
 8008208:	f7ff bb94 	b.w	8007934 <_strtod_l+0x2f4>
 800820c:	f3af 8000 	nop.w
 8008210:	94a03595 	.word	0x94a03595
 8008214:	3fdfffff 	.word	0x3fdfffff
 8008218:	35afe535 	.word	0x35afe535
 800821c:	3fe00000 	.word	0x3fe00000
 8008220:	ffc00000 	.word	0xffc00000
 8008224:	41dfffff 	.word	0x41dfffff
 8008228:	94a03595 	.word	0x94a03595
 800822c:	3fcfffff 	.word	0x3fcfffff
 8008230:	3ff00000 	.word	0x3ff00000
 8008234:	7ff00000 	.word	0x7ff00000
 8008238:	7fe00000 	.word	0x7fe00000
 800823c:	7c9fffff 	.word	0x7c9fffff
 8008240:	3fe00000 	.word	0x3fe00000
 8008244:	bff00000 	.word	0xbff00000
 8008248:	7fefffff 	.word	0x7fefffff

0800824c <strtod>:
 800824c:	460a      	mov	r2, r1
 800824e:	4601      	mov	r1, r0
 8008250:	4802      	ldr	r0, [pc, #8]	; (800825c <strtod+0x10>)
 8008252:	4b03      	ldr	r3, [pc, #12]	; (8008260 <strtod+0x14>)
 8008254:	6800      	ldr	r0, [r0, #0]
 8008256:	f7ff b9f3 	b.w	8007640 <_strtod_l>
 800825a:	bf00      	nop
 800825c:	2000000c 	.word	0x2000000c
 8008260:	20000074 	.word	0x20000074

08008264 <rshift>:
 8008264:	6903      	ldr	r3, [r0, #16]
 8008266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800826a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800826e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008272:	f100 0414 	add.w	r4, r0, #20
 8008276:	dd45      	ble.n	8008304 <rshift+0xa0>
 8008278:	f011 011f 	ands.w	r1, r1, #31
 800827c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008280:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008284:	d10c      	bne.n	80082a0 <rshift+0x3c>
 8008286:	f100 0710 	add.w	r7, r0, #16
 800828a:	4629      	mov	r1, r5
 800828c:	42b1      	cmp	r1, r6
 800828e:	d334      	bcc.n	80082fa <rshift+0x96>
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	1eea      	subs	r2, r5, #3
 8008296:	4296      	cmp	r6, r2
 8008298:	bf38      	it	cc
 800829a:	2300      	movcc	r3, #0
 800829c:	4423      	add	r3, r4
 800829e:	e015      	b.n	80082cc <rshift+0x68>
 80082a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082a4:	f1c1 0820 	rsb	r8, r1, #32
 80082a8:	40cf      	lsrs	r7, r1
 80082aa:	f105 0e04 	add.w	lr, r5, #4
 80082ae:	46a1      	mov	r9, r4
 80082b0:	4576      	cmp	r6, lr
 80082b2:	46f4      	mov	ip, lr
 80082b4:	d815      	bhi.n	80082e2 <rshift+0x7e>
 80082b6:	1a9a      	subs	r2, r3, r2
 80082b8:	0092      	lsls	r2, r2, #2
 80082ba:	3a04      	subs	r2, #4
 80082bc:	3501      	adds	r5, #1
 80082be:	42ae      	cmp	r6, r5
 80082c0:	bf38      	it	cc
 80082c2:	2200      	movcc	r2, #0
 80082c4:	18a3      	adds	r3, r4, r2
 80082c6:	50a7      	str	r7, [r4, r2]
 80082c8:	b107      	cbz	r7, 80082cc <rshift+0x68>
 80082ca:	3304      	adds	r3, #4
 80082cc:	1b1a      	subs	r2, r3, r4
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082d4:	bf08      	it	eq
 80082d6:	2300      	moveq	r3, #0
 80082d8:	6102      	str	r2, [r0, #16]
 80082da:	bf08      	it	eq
 80082dc:	6143      	streq	r3, [r0, #20]
 80082de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e2:	f8dc c000 	ldr.w	ip, [ip]
 80082e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80082ea:	ea4c 0707 	orr.w	r7, ip, r7
 80082ee:	f849 7b04 	str.w	r7, [r9], #4
 80082f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082f6:	40cf      	lsrs	r7, r1
 80082f8:	e7da      	b.n	80082b0 <rshift+0x4c>
 80082fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80082fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008302:	e7c3      	b.n	800828c <rshift+0x28>
 8008304:	4623      	mov	r3, r4
 8008306:	e7e1      	b.n	80082cc <rshift+0x68>

08008308 <__hexdig_fun>:
 8008308:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800830c:	2b09      	cmp	r3, #9
 800830e:	d802      	bhi.n	8008316 <__hexdig_fun+0xe>
 8008310:	3820      	subs	r0, #32
 8008312:	b2c0      	uxtb	r0, r0
 8008314:	4770      	bx	lr
 8008316:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800831a:	2b05      	cmp	r3, #5
 800831c:	d801      	bhi.n	8008322 <__hexdig_fun+0x1a>
 800831e:	3847      	subs	r0, #71	; 0x47
 8008320:	e7f7      	b.n	8008312 <__hexdig_fun+0xa>
 8008322:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008326:	2b05      	cmp	r3, #5
 8008328:	d801      	bhi.n	800832e <__hexdig_fun+0x26>
 800832a:	3827      	subs	r0, #39	; 0x27
 800832c:	e7f1      	b.n	8008312 <__hexdig_fun+0xa>
 800832e:	2000      	movs	r0, #0
 8008330:	4770      	bx	lr
	...

08008334 <__gethex>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	ed2d 8b02 	vpush	{d8}
 800833c:	b089      	sub	sp, #36	; 0x24
 800833e:	ee08 0a10 	vmov	s16, r0
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	4bb4      	ldr	r3, [pc, #720]	; (8008618 <__gethex+0x2e4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	4618      	mov	r0, r3
 800834c:	468b      	mov	fp, r1
 800834e:	4690      	mov	r8, r2
 8008350:	f7f7 ff70 	bl	8000234 <strlen>
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	f8db 2000 	ldr.w	r2, [fp]
 800835a:	4403      	add	r3, r0
 800835c:	4682      	mov	sl, r0
 800835e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	1c93      	adds	r3, r2, #2
 8008366:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800836a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800836e:	32fe      	adds	r2, #254	; 0xfe
 8008370:	18d1      	adds	r1, r2, r3
 8008372:	461f      	mov	r7, r3
 8008374:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008378:	9100      	str	r1, [sp, #0]
 800837a:	2830      	cmp	r0, #48	; 0x30
 800837c:	d0f8      	beq.n	8008370 <__gethex+0x3c>
 800837e:	f7ff ffc3 	bl	8008308 <__hexdig_fun>
 8008382:	4604      	mov	r4, r0
 8008384:	2800      	cmp	r0, #0
 8008386:	d13a      	bne.n	80083fe <__gethex+0xca>
 8008388:	9901      	ldr	r1, [sp, #4]
 800838a:	4652      	mov	r2, sl
 800838c:	4638      	mov	r0, r7
 800838e:	f001 f87f 	bl	8009490 <strncmp>
 8008392:	4605      	mov	r5, r0
 8008394:	2800      	cmp	r0, #0
 8008396:	d168      	bne.n	800846a <__gethex+0x136>
 8008398:	f817 000a 	ldrb.w	r0, [r7, sl]
 800839c:	eb07 060a 	add.w	r6, r7, sl
 80083a0:	f7ff ffb2 	bl	8008308 <__hexdig_fun>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d062      	beq.n	800846e <__gethex+0x13a>
 80083a8:	4633      	mov	r3, r6
 80083aa:	7818      	ldrb	r0, [r3, #0]
 80083ac:	2830      	cmp	r0, #48	; 0x30
 80083ae:	461f      	mov	r7, r3
 80083b0:	f103 0301 	add.w	r3, r3, #1
 80083b4:	d0f9      	beq.n	80083aa <__gethex+0x76>
 80083b6:	f7ff ffa7 	bl	8008308 <__hexdig_fun>
 80083ba:	2301      	movs	r3, #1
 80083bc:	fab0 f480 	clz	r4, r0
 80083c0:	0964      	lsrs	r4, r4, #5
 80083c2:	4635      	mov	r5, r6
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	463a      	mov	r2, r7
 80083c8:	4616      	mov	r6, r2
 80083ca:	3201      	adds	r2, #1
 80083cc:	7830      	ldrb	r0, [r6, #0]
 80083ce:	f7ff ff9b 	bl	8008308 <__hexdig_fun>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d1f8      	bne.n	80083c8 <__gethex+0x94>
 80083d6:	9901      	ldr	r1, [sp, #4]
 80083d8:	4652      	mov	r2, sl
 80083da:	4630      	mov	r0, r6
 80083dc:	f001 f858 	bl	8009490 <strncmp>
 80083e0:	b980      	cbnz	r0, 8008404 <__gethex+0xd0>
 80083e2:	b94d      	cbnz	r5, 80083f8 <__gethex+0xc4>
 80083e4:	eb06 050a 	add.w	r5, r6, sl
 80083e8:	462a      	mov	r2, r5
 80083ea:	4616      	mov	r6, r2
 80083ec:	3201      	adds	r2, #1
 80083ee:	7830      	ldrb	r0, [r6, #0]
 80083f0:	f7ff ff8a 	bl	8008308 <__hexdig_fun>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d1f8      	bne.n	80083ea <__gethex+0xb6>
 80083f8:	1bad      	subs	r5, r5, r6
 80083fa:	00ad      	lsls	r5, r5, #2
 80083fc:	e004      	b.n	8008408 <__gethex+0xd4>
 80083fe:	2400      	movs	r4, #0
 8008400:	4625      	mov	r5, r4
 8008402:	e7e0      	b.n	80083c6 <__gethex+0x92>
 8008404:	2d00      	cmp	r5, #0
 8008406:	d1f7      	bne.n	80083f8 <__gethex+0xc4>
 8008408:	7833      	ldrb	r3, [r6, #0]
 800840a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800840e:	2b50      	cmp	r3, #80	; 0x50
 8008410:	d13b      	bne.n	800848a <__gethex+0x156>
 8008412:	7873      	ldrb	r3, [r6, #1]
 8008414:	2b2b      	cmp	r3, #43	; 0x2b
 8008416:	d02c      	beq.n	8008472 <__gethex+0x13e>
 8008418:	2b2d      	cmp	r3, #45	; 0x2d
 800841a:	d02e      	beq.n	800847a <__gethex+0x146>
 800841c:	1c71      	adds	r1, r6, #1
 800841e:	f04f 0900 	mov.w	r9, #0
 8008422:	7808      	ldrb	r0, [r1, #0]
 8008424:	f7ff ff70 	bl	8008308 <__hexdig_fun>
 8008428:	1e43      	subs	r3, r0, #1
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b18      	cmp	r3, #24
 800842e:	d82c      	bhi.n	800848a <__gethex+0x156>
 8008430:	f1a0 0210 	sub.w	r2, r0, #16
 8008434:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008438:	f7ff ff66 	bl	8008308 <__hexdig_fun>
 800843c:	1e43      	subs	r3, r0, #1
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b18      	cmp	r3, #24
 8008442:	d91d      	bls.n	8008480 <__gethex+0x14c>
 8008444:	f1b9 0f00 	cmp.w	r9, #0
 8008448:	d000      	beq.n	800844c <__gethex+0x118>
 800844a:	4252      	negs	r2, r2
 800844c:	4415      	add	r5, r2
 800844e:	f8cb 1000 	str.w	r1, [fp]
 8008452:	b1e4      	cbz	r4, 800848e <__gethex+0x15a>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	bf14      	ite	ne
 800845a:	2700      	movne	r7, #0
 800845c:	2706      	moveq	r7, #6
 800845e:	4638      	mov	r0, r7
 8008460:	b009      	add	sp, #36	; 0x24
 8008462:	ecbd 8b02 	vpop	{d8}
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	463e      	mov	r6, r7
 800846c:	4625      	mov	r5, r4
 800846e:	2401      	movs	r4, #1
 8008470:	e7ca      	b.n	8008408 <__gethex+0xd4>
 8008472:	f04f 0900 	mov.w	r9, #0
 8008476:	1cb1      	adds	r1, r6, #2
 8008478:	e7d3      	b.n	8008422 <__gethex+0xee>
 800847a:	f04f 0901 	mov.w	r9, #1
 800847e:	e7fa      	b.n	8008476 <__gethex+0x142>
 8008480:	230a      	movs	r3, #10
 8008482:	fb03 0202 	mla	r2, r3, r2, r0
 8008486:	3a10      	subs	r2, #16
 8008488:	e7d4      	b.n	8008434 <__gethex+0x100>
 800848a:	4631      	mov	r1, r6
 800848c:	e7df      	b.n	800844e <__gethex+0x11a>
 800848e:	1bf3      	subs	r3, r6, r7
 8008490:	3b01      	subs	r3, #1
 8008492:	4621      	mov	r1, r4
 8008494:	2b07      	cmp	r3, #7
 8008496:	dc0b      	bgt.n	80084b0 <__gethex+0x17c>
 8008498:	ee18 0a10 	vmov	r0, s16
 800849c:	f000 fa72 	bl	8008984 <_Balloc>
 80084a0:	4604      	mov	r4, r0
 80084a2:	b940      	cbnz	r0, 80084b6 <__gethex+0x182>
 80084a4:	4b5d      	ldr	r3, [pc, #372]	; (800861c <__gethex+0x2e8>)
 80084a6:	4602      	mov	r2, r0
 80084a8:	21de      	movs	r1, #222	; 0xde
 80084aa:	485d      	ldr	r0, [pc, #372]	; (8008620 <__gethex+0x2ec>)
 80084ac:	f001 f812 	bl	80094d4 <__assert_func>
 80084b0:	3101      	adds	r1, #1
 80084b2:	105b      	asrs	r3, r3, #1
 80084b4:	e7ee      	b.n	8008494 <__gethex+0x160>
 80084b6:	f100 0914 	add.w	r9, r0, #20
 80084ba:	f04f 0b00 	mov.w	fp, #0
 80084be:	f1ca 0301 	rsb	r3, sl, #1
 80084c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80084c6:	f8cd b000 	str.w	fp, [sp]
 80084ca:	9306      	str	r3, [sp, #24]
 80084cc:	42b7      	cmp	r7, r6
 80084ce:	d340      	bcc.n	8008552 <__gethex+0x21e>
 80084d0:	9802      	ldr	r0, [sp, #8]
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	f840 3b04 	str.w	r3, [r0], #4
 80084d8:	eba0 0009 	sub.w	r0, r0, r9
 80084dc:	1080      	asrs	r0, r0, #2
 80084de:	0146      	lsls	r6, r0, #5
 80084e0:	6120      	str	r0, [r4, #16]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fb40 	bl	8008b68 <__hi0bits>
 80084e8:	1a30      	subs	r0, r6, r0
 80084ea:	f8d8 6000 	ldr.w	r6, [r8]
 80084ee:	42b0      	cmp	r0, r6
 80084f0:	dd63      	ble.n	80085ba <__gethex+0x286>
 80084f2:	1b87      	subs	r7, r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fee4 	bl	80092c4 <__any_on>
 80084fc:	4682      	mov	sl, r0
 80084fe:	b1a8      	cbz	r0, 800852c <__gethex+0x1f8>
 8008500:	1e7b      	subs	r3, r7, #1
 8008502:	1159      	asrs	r1, r3, #5
 8008504:	f003 021f 	and.w	r2, r3, #31
 8008508:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800850c:	f04f 0a01 	mov.w	sl, #1
 8008510:	fa0a f202 	lsl.w	r2, sl, r2
 8008514:	420a      	tst	r2, r1
 8008516:	d009      	beq.n	800852c <__gethex+0x1f8>
 8008518:	4553      	cmp	r3, sl
 800851a:	dd05      	ble.n	8008528 <__gethex+0x1f4>
 800851c:	1eb9      	subs	r1, r7, #2
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fed0 	bl	80092c4 <__any_on>
 8008524:	2800      	cmp	r0, #0
 8008526:	d145      	bne.n	80085b4 <__gethex+0x280>
 8008528:	f04f 0a02 	mov.w	sl, #2
 800852c:	4639      	mov	r1, r7
 800852e:	4620      	mov	r0, r4
 8008530:	f7ff fe98 	bl	8008264 <rshift>
 8008534:	443d      	add	r5, r7
 8008536:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800853a:	42ab      	cmp	r3, r5
 800853c:	da4c      	bge.n	80085d8 <__gethex+0x2a4>
 800853e:	ee18 0a10 	vmov	r0, s16
 8008542:	4621      	mov	r1, r4
 8008544:	f000 fa5e 	bl	8008a04 <_Bfree>
 8008548:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800854a:	2300      	movs	r3, #0
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	27a3      	movs	r7, #163	; 0xa3
 8008550:	e785      	b.n	800845e <__gethex+0x12a>
 8008552:	1e73      	subs	r3, r6, #1
 8008554:	9a05      	ldr	r2, [sp, #20]
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800855c:	4293      	cmp	r3, r2
 800855e:	d019      	beq.n	8008594 <__gethex+0x260>
 8008560:	f1bb 0f20 	cmp.w	fp, #32
 8008564:	d107      	bne.n	8008576 <__gethex+0x242>
 8008566:	9b02      	ldr	r3, [sp, #8]
 8008568:	9a00      	ldr	r2, [sp, #0]
 800856a:	f843 2b04 	str.w	r2, [r3], #4
 800856e:	9302      	str	r3, [sp, #8]
 8008570:	2300      	movs	r3, #0
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	469b      	mov	fp, r3
 8008576:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800857a:	f7ff fec5 	bl	8008308 <__hexdig_fun>
 800857e:	9b00      	ldr	r3, [sp, #0]
 8008580:	f000 000f 	and.w	r0, r0, #15
 8008584:	fa00 f00b 	lsl.w	r0, r0, fp
 8008588:	4303      	orrs	r3, r0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	f10b 0b04 	add.w	fp, fp, #4
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	e00d      	b.n	80085b0 <__gethex+0x27c>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	9a06      	ldr	r2, [sp, #24]
 8008598:	4413      	add	r3, r2
 800859a:	42bb      	cmp	r3, r7
 800859c:	d3e0      	bcc.n	8008560 <__gethex+0x22c>
 800859e:	4618      	mov	r0, r3
 80085a0:	9901      	ldr	r1, [sp, #4]
 80085a2:	9307      	str	r3, [sp, #28]
 80085a4:	4652      	mov	r2, sl
 80085a6:	f000 ff73 	bl	8009490 <strncmp>
 80085aa:	9b07      	ldr	r3, [sp, #28]
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1d7      	bne.n	8008560 <__gethex+0x22c>
 80085b0:	461e      	mov	r6, r3
 80085b2:	e78b      	b.n	80084cc <__gethex+0x198>
 80085b4:	f04f 0a03 	mov.w	sl, #3
 80085b8:	e7b8      	b.n	800852c <__gethex+0x1f8>
 80085ba:	da0a      	bge.n	80085d2 <__gethex+0x29e>
 80085bc:	1a37      	subs	r7, r6, r0
 80085be:	4621      	mov	r1, r4
 80085c0:	ee18 0a10 	vmov	r0, s16
 80085c4:	463a      	mov	r2, r7
 80085c6:	f000 fc39 	bl	8008e3c <__lshift>
 80085ca:	1bed      	subs	r5, r5, r7
 80085cc:	4604      	mov	r4, r0
 80085ce:	f100 0914 	add.w	r9, r0, #20
 80085d2:	f04f 0a00 	mov.w	sl, #0
 80085d6:	e7ae      	b.n	8008536 <__gethex+0x202>
 80085d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085dc:	42a8      	cmp	r0, r5
 80085de:	dd72      	ble.n	80086c6 <__gethex+0x392>
 80085e0:	1b45      	subs	r5, r0, r5
 80085e2:	42ae      	cmp	r6, r5
 80085e4:	dc36      	bgt.n	8008654 <__gethex+0x320>
 80085e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d02a      	beq.n	8008644 <__gethex+0x310>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d02c      	beq.n	800864c <__gethex+0x318>
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d11c      	bne.n	8008630 <__gethex+0x2fc>
 80085f6:	42ae      	cmp	r6, r5
 80085f8:	d11a      	bne.n	8008630 <__gethex+0x2fc>
 80085fa:	2e01      	cmp	r6, #1
 80085fc:	d112      	bne.n	8008624 <__gethex+0x2f0>
 80085fe:	9a04      	ldr	r2, [sp, #16]
 8008600:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	2301      	movs	r3, #1
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	f8c9 3000 	str.w	r3, [r9]
 800860e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008610:	2762      	movs	r7, #98	; 0x62
 8008612:	601c      	str	r4, [r3, #0]
 8008614:	e723      	b.n	800845e <__gethex+0x12a>
 8008616:	bf00      	nop
 8008618:	0800a588 	.word	0x0800a588
 800861c:	0800a510 	.word	0x0800a510
 8008620:	0800a521 	.word	0x0800a521
 8008624:	1e71      	subs	r1, r6, #1
 8008626:	4620      	mov	r0, r4
 8008628:	f000 fe4c 	bl	80092c4 <__any_on>
 800862c:	2800      	cmp	r0, #0
 800862e:	d1e6      	bne.n	80085fe <__gethex+0x2ca>
 8008630:	ee18 0a10 	vmov	r0, s16
 8008634:	4621      	mov	r1, r4
 8008636:	f000 f9e5 	bl	8008a04 <_Bfree>
 800863a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800863c:	2300      	movs	r3, #0
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	2750      	movs	r7, #80	; 0x50
 8008642:	e70c      	b.n	800845e <__gethex+0x12a>
 8008644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f2      	bne.n	8008630 <__gethex+0x2fc>
 800864a:	e7d8      	b.n	80085fe <__gethex+0x2ca>
 800864c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1d5      	bne.n	80085fe <__gethex+0x2ca>
 8008652:	e7ed      	b.n	8008630 <__gethex+0x2fc>
 8008654:	1e6f      	subs	r7, r5, #1
 8008656:	f1ba 0f00 	cmp.w	sl, #0
 800865a:	d131      	bne.n	80086c0 <__gethex+0x38c>
 800865c:	b127      	cbz	r7, 8008668 <__gethex+0x334>
 800865e:	4639      	mov	r1, r7
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fe2f 	bl	80092c4 <__any_on>
 8008666:	4682      	mov	sl, r0
 8008668:	117b      	asrs	r3, r7, #5
 800866a:	2101      	movs	r1, #1
 800866c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008670:	f007 071f 	and.w	r7, r7, #31
 8008674:	fa01 f707 	lsl.w	r7, r1, r7
 8008678:	421f      	tst	r7, r3
 800867a:	4629      	mov	r1, r5
 800867c:	4620      	mov	r0, r4
 800867e:	bf18      	it	ne
 8008680:	f04a 0a02 	orrne.w	sl, sl, #2
 8008684:	1b76      	subs	r6, r6, r5
 8008686:	f7ff fded 	bl	8008264 <rshift>
 800868a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800868e:	2702      	movs	r7, #2
 8008690:	f1ba 0f00 	cmp.w	sl, #0
 8008694:	d048      	beq.n	8008728 <__gethex+0x3f4>
 8008696:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d015      	beq.n	80086ca <__gethex+0x396>
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d017      	beq.n	80086d2 <__gethex+0x39e>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d109      	bne.n	80086ba <__gethex+0x386>
 80086a6:	f01a 0f02 	tst.w	sl, #2
 80086aa:	d006      	beq.n	80086ba <__gethex+0x386>
 80086ac:	f8d9 0000 	ldr.w	r0, [r9]
 80086b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80086b4:	f01a 0f01 	tst.w	sl, #1
 80086b8:	d10e      	bne.n	80086d8 <__gethex+0x3a4>
 80086ba:	f047 0710 	orr.w	r7, r7, #16
 80086be:	e033      	b.n	8008728 <__gethex+0x3f4>
 80086c0:	f04f 0a01 	mov.w	sl, #1
 80086c4:	e7d0      	b.n	8008668 <__gethex+0x334>
 80086c6:	2701      	movs	r7, #1
 80086c8:	e7e2      	b.n	8008690 <__gethex+0x35c>
 80086ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086cc:	f1c3 0301 	rsb	r3, r3, #1
 80086d0:	9315      	str	r3, [sp, #84]	; 0x54
 80086d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0f0      	beq.n	80086ba <__gethex+0x386>
 80086d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086dc:	f104 0314 	add.w	r3, r4, #20
 80086e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80086e8:	f04f 0c00 	mov.w	ip, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80086f6:	d01c      	beq.n	8008732 <__gethex+0x3fe>
 80086f8:	3201      	adds	r2, #1
 80086fa:	6002      	str	r2, [r0, #0]
 80086fc:	2f02      	cmp	r7, #2
 80086fe:	f104 0314 	add.w	r3, r4, #20
 8008702:	d13f      	bne.n	8008784 <__gethex+0x450>
 8008704:	f8d8 2000 	ldr.w	r2, [r8]
 8008708:	3a01      	subs	r2, #1
 800870a:	42b2      	cmp	r2, r6
 800870c:	d10a      	bne.n	8008724 <__gethex+0x3f0>
 800870e:	1171      	asrs	r1, r6, #5
 8008710:	2201      	movs	r2, #1
 8008712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008716:	f006 061f 	and.w	r6, r6, #31
 800871a:	fa02 f606 	lsl.w	r6, r2, r6
 800871e:	421e      	tst	r6, r3
 8008720:	bf18      	it	ne
 8008722:	4617      	movne	r7, r2
 8008724:	f047 0720 	orr.w	r7, r7, #32
 8008728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800872a:	601c      	str	r4, [r3, #0]
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	601d      	str	r5, [r3, #0]
 8008730:	e695      	b.n	800845e <__gethex+0x12a>
 8008732:	4299      	cmp	r1, r3
 8008734:	f843 cc04 	str.w	ip, [r3, #-4]
 8008738:	d8d8      	bhi.n	80086ec <__gethex+0x3b8>
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	459b      	cmp	fp, r3
 800873e:	db19      	blt.n	8008774 <__gethex+0x440>
 8008740:	6861      	ldr	r1, [r4, #4]
 8008742:	ee18 0a10 	vmov	r0, s16
 8008746:	3101      	adds	r1, #1
 8008748:	f000 f91c 	bl	8008984 <_Balloc>
 800874c:	4681      	mov	r9, r0
 800874e:	b918      	cbnz	r0, 8008758 <__gethex+0x424>
 8008750:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <__gethex+0x488>)
 8008752:	4602      	mov	r2, r0
 8008754:	2184      	movs	r1, #132	; 0x84
 8008756:	e6a8      	b.n	80084aa <__gethex+0x176>
 8008758:	6922      	ldr	r2, [r4, #16]
 800875a:	3202      	adds	r2, #2
 800875c:	f104 010c 	add.w	r1, r4, #12
 8008760:	0092      	lsls	r2, r2, #2
 8008762:	300c      	adds	r0, #12
 8008764:	f000 f900 	bl	8008968 <memcpy>
 8008768:	4621      	mov	r1, r4
 800876a:	ee18 0a10 	vmov	r0, s16
 800876e:	f000 f949 	bl	8008a04 <_Bfree>
 8008772:	464c      	mov	r4, r9
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800877c:	6122      	str	r2, [r4, #16]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
 8008782:	e7bb      	b.n	80086fc <__gethex+0x3c8>
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	455a      	cmp	r2, fp
 8008788:	dd0b      	ble.n	80087a2 <__gethex+0x46e>
 800878a:	2101      	movs	r1, #1
 800878c:	4620      	mov	r0, r4
 800878e:	f7ff fd69 	bl	8008264 <rshift>
 8008792:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008796:	3501      	adds	r5, #1
 8008798:	42ab      	cmp	r3, r5
 800879a:	f6ff aed0 	blt.w	800853e <__gethex+0x20a>
 800879e:	2701      	movs	r7, #1
 80087a0:	e7c0      	b.n	8008724 <__gethex+0x3f0>
 80087a2:	f016 061f 	ands.w	r6, r6, #31
 80087a6:	d0fa      	beq.n	800879e <__gethex+0x46a>
 80087a8:	4453      	add	r3, sl
 80087aa:	f1c6 0620 	rsb	r6, r6, #32
 80087ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087b2:	f000 f9d9 	bl	8008b68 <__hi0bits>
 80087b6:	42b0      	cmp	r0, r6
 80087b8:	dbe7      	blt.n	800878a <__gethex+0x456>
 80087ba:	e7f0      	b.n	800879e <__gethex+0x46a>
 80087bc:	0800a510 	.word	0x0800a510

080087c0 <L_shift>:
 80087c0:	f1c2 0208 	rsb	r2, r2, #8
 80087c4:	0092      	lsls	r2, r2, #2
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	f1c2 0620 	rsb	r6, r2, #32
 80087cc:	6843      	ldr	r3, [r0, #4]
 80087ce:	6804      	ldr	r4, [r0, #0]
 80087d0:	fa03 f506 	lsl.w	r5, r3, r6
 80087d4:	432c      	orrs	r4, r5
 80087d6:	40d3      	lsrs	r3, r2
 80087d8:	6004      	str	r4, [r0, #0]
 80087da:	f840 3f04 	str.w	r3, [r0, #4]!
 80087de:	4288      	cmp	r0, r1
 80087e0:	d3f4      	bcc.n	80087cc <L_shift+0xc>
 80087e2:	bd70      	pop	{r4, r5, r6, pc}

080087e4 <__match>:
 80087e4:	b530      	push	{r4, r5, lr}
 80087e6:	6803      	ldr	r3, [r0, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ee:	b914      	cbnz	r4, 80087f6 <__match+0x12>
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	2001      	movs	r0, #1
 80087f4:	bd30      	pop	{r4, r5, pc}
 80087f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087fe:	2d19      	cmp	r5, #25
 8008800:	bf98      	it	ls
 8008802:	3220      	addls	r2, #32
 8008804:	42a2      	cmp	r2, r4
 8008806:	d0f0      	beq.n	80087ea <__match+0x6>
 8008808:	2000      	movs	r0, #0
 800880a:	e7f3      	b.n	80087f4 <__match+0x10>

0800880c <__hexnan>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	115e      	asrs	r6, r3, #5
 8008814:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008818:	f013 031f 	ands.w	r3, r3, #31
 800881c:	b087      	sub	sp, #28
 800881e:	bf18      	it	ne
 8008820:	3604      	addne	r6, #4
 8008822:	2500      	movs	r5, #0
 8008824:	1f37      	subs	r7, r6, #4
 8008826:	4690      	mov	r8, r2
 8008828:	6802      	ldr	r2, [r0, #0]
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	4682      	mov	sl, r0
 800882e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008832:	46b9      	mov	r9, r7
 8008834:	463c      	mov	r4, r7
 8008836:	9502      	str	r5, [sp, #8]
 8008838:	46ab      	mov	fp, r5
 800883a:	7851      	ldrb	r1, [r2, #1]
 800883c:	1c53      	adds	r3, r2, #1
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	b341      	cbz	r1, 8008894 <__hexnan+0x88>
 8008842:	4608      	mov	r0, r1
 8008844:	9205      	str	r2, [sp, #20]
 8008846:	9104      	str	r1, [sp, #16]
 8008848:	f7ff fd5e 	bl	8008308 <__hexdig_fun>
 800884c:	2800      	cmp	r0, #0
 800884e:	d14f      	bne.n	80088f0 <__hexnan+0xe4>
 8008850:	9904      	ldr	r1, [sp, #16]
 8008852:	9a05      	ldr	r2, [sp, #20]
 8008854:	2920      	cmp	r1, #32
 8008856:	d818      	bhi.n	800888a <__hexnan+0x7e>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	459b      	cmp	fp, r3
 800885c:	dd13      	ble.n	8008886 <__hexnan+0x7a>
 800885e:	454c      	cmp	r4, r9
 8008860:	d206      	bcs.n	8008870 <__hexnan+0x64>
 8008862:	2d07      	cmp	r5, #7
 8008864:	dc04      	bgt.n	8008870 <__hexnan+0x64>
 8008866:	462a      	mov	r2, r5
 8008868:	4649      	mov	r1, r9
 800886a:	4620      	mov	r0, r4
 800886c:	f7ff ffa8 	bl	80087c0 <L_shift>
 8008870:	4544      	cmp	r4, r8
 8008872:	d950      	bls.n	8008916 <__hexnan+0x10a>
 8008874:	2300      	movs	r3, #0
 8008876:	f1a4 0904 	sub.w	r9, r4, #4
 800887a:	f844 3c04 	str.w	r3, [r4, #-4]
 800887e:	f8cd b008 	str.w	fp, [sp, #8]
 8008882:	464c      	mov	r4, r9
 8008884:	461d      	mov	r5, r3
 8008886:	9a03      	ldr	r2, [sp, #12]
 8008888:	e7d7      	b.n	800883a <__hexnan+0x2e>
 800888a:	2929      	cmp	r1, #41	; 0x29
 800888c:	d156      	bne.n	800893c <__hexnan+0x130>
 800888e:	3202      	adds	r2, #2
 8008890:	f8ca 2000 	str.w	r2, [sl]
 8008894:	f1bb 0f00 	cmp.w	fp, #0
 8008898:	d050      	beq.n	800893c <__hexnan+0x130>
 800889a:	454c      	cmp	r4, r9
 800889c:	d206      	bcs.n	80088ac <__hexnan+0xa0>
 800889e:	2d07      	cmp	r5, #7
 80088a0:	dc04      	bgt.n	80088ac <__hexnan+0xa0>
 80088a2:	462a      	mov	r2, r5
 80088a4:	4649      	mov	r1, r9
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff ff8a 	bl	80087c0 <L_shift>
 80088ac:	4544      	cmp	r4, r8
 80088ae:	d934      	bls.n	800891a <__hexnan+0x10e>
 80088b0:	f1a8 0204 	sub.w	r2, r8, #4
 80088b4:	4623      	mov	r3, r4
 80088b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80088ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80088be:	429f      	cmp	r7, r3
 80088c0:	d2f9      	bcs.n	80088b6 <__hexnan+0xaa>
 80088c2:	1b3b      	subs	r3, r7, r4
 80088c4:	f023 0303 	bic.w	r3, r3, #3
 80088c8:	3304      	adds	r3, #4
 80088ca:	3401      	adds	r4, #1
 80088cc:	3e03      	subs	r6, #3
 80088ce:	42b4      	cmp	r4, r6
 80088d0:	bf88      	it	hi
 80088d2:	2304      	movhi	r3, #4
 80088d4:	4443      	add	r3, r8
 80088d6:	2200      	movs	r2, #0
 80088d8:	f843 2b04 	str.w	r2, [r3], #4
 80088dc:	429f      	cmp	r7, r3
 80088de:	d2fb      	bcs.n	80088d8 <__hexnan+0xcc>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	b91b      	cbnz	r3, 80088ec <__hexnan+0xe0>
 80088e4:	4547      	cmp	r7, r8
 80088e6:	d127      	bne.n	8008938 <__hexnan+0x12c>
 80088e8:	2301      	movs	r3, #1
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	2005      	movs	r0, #5
 80088ee:	e026      	b.n	800893e <__hexnan+0x132>
 80088f0:	3501      	adds	r5, #1
 80088f2:	2d08      	cmp	r5, #8
 80088f4:	f10b 0b01 	add.w	fp, fp, #1
 80088f8:	dd06      	ble.n	8008908 <__hexnan+0xfc>
 80088fa:	4544      	cmp	r4, r8
 80088fc:	d9c3      	bls.n	8008886 <__hexnan+0x7a>
 80088fe:	2300      	movs	r3, #0
 8008900:	f844 3c04 	str.w	r3, [r4, #-4]
 8008904:	2501      	movs	r5, #1
 8008906:	3c04      	subs	r4, #4
 8008908:	6822      	ldr	r2, [r4, #0]
 800890a:	f000 000f 	and.w	r0, r0, #15
 800890e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008912:	6022      	str	r2, [r4, #0]
 8008914:	e7b7      	b.n	8008886 <__hexnan+0x7a>
 8008916:	2508      	movs	r5, #8
 8008918:	e7b5      	b.n	8008886 <__hexnan+0x7a>
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0df      	beq.n	80088e0 <__hexnan+0xd4>
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	f1c3 0320 	rsb	r3, r3, #32
 8008928:	fa22 f303 	lsr.w	r3, r2, r3
 800892c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008930:	401a      	ands	r2, r3
 8008932:	f846 2c04 	str.w	r2, [r6, #-4]
 8008936:	e7d3      	b.n	80088e0 <__hexnan+0xd4>
 8008938:	3f04      	subs	r7, #4
 800893a:	e7d1      	b.n	80088e0 <__hexnan+0xd4>
 800893c:	2004      	movs	r0, #4
 800893e:	b007      	add	sp, #28
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008944 <__ascii_mbtowc>:
 8008944:	b082      	sub	sp, #8
 8008946:	b901      	cbnz	r1, 800894a <__ascii_mbtowc+0x6>
 8008948:	a901      	add	r1, sp, #4
 800894a:	b142      	cbz	r2, 800895e <__ascii_mbtowc+0x1a>
 800894c:	b14b      	cbz	r3, 8008962 <__ascii_mbtowc+0x1e>
 800894e:	7813      	ldrb	r3, [r2, #0]
 8008950:	600b      	str	r3, [r1, #0]
 8008952:	7812      	ldrb	r2, [r2, #0]
 8008954:	1e10      	subs	r0, r2, #0
 8008956:	bf18      	it	ne
 8008958:	2001      	movne	r0, #1
 800895a:	b002      	add	sp, #8
 800895c:	4770      	bx	lr
 800895e:	4610      	mov	r0, r2
 8008960:	e7fb      	b.n	800895a <__ascii_mbtowc+0x16>
 8008962:	f06f 0001 	mvn.w	r0, #1
 8008966:	e7f8      	b.n	800895a <__ascii_mbtowc+0x16>

08008968 <memcpy>:
 8008968:	440a      	add	r2, r1
 800896a:	4291      	cmp	r1, r2
 800896c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008970:	d100      	bne.n	8008974 <memcpy+0xc>
 8008972:	4770      	bx	lr
 8008974:	b510      	push	{r4, lr}
 8008976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897e:	4291      	cmp	r1, r2
 8008980:	d1f9      	bne.n	8008976 <memcpy+0xe>
 8008982:	bd10      	pop	{r4, pc}

08008984 <_Balloc>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	b976      	cbnz	r6, 80089ac <_Balloc+0x28>
 800898e:	2010      	movs	r0, #16
 8008990:	f000 fdd0 	bl	8009534 <malloc>
 8008994:	4602      	mov	r2, r0
 8008996:	6260      	str	r0, [r4, #36]	; 0x24
 8008998:	b920      	cbnz	r0, 80089a4 <_Balloc+0x20>
 800899a:	4b18      	ldr	r3, [pc, #96]	; (80089fc <_Balloc+0x78>)
 800899c:	4818      	ldr	r0, [pc, #96]	; (8008a00 <_Balloc+0x7c>)
 800899e:	2166      	movs	r1, #102	; 0x66
 80089a0:	f000 fd98 	bl	80094d4 <__assert_func>
 80089a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089a8:	6006      	str	r6, [r0, #0]
 80089aa:	60c6      	str	r6, [r0, #12]
 80089ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089ae:	68f3      	ldr	r3, [r6, #12]
 80089b0:	b183      	cbz	r3, 80089d4 <_Balloc+0x50>
 80089b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089ba:	b9b8      	cbnz	r0, 80089ec <_Balloc+0x68>
 80089bc:	2101      	movs	r1, #1
 80089be:	fa01 f605 	lsl.w	r6, r1, r5
 80089c2:	1d72      	adds	r2, r6, #5
 80089c4:	0092      	lsls	r2, r2, #2
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fc9d 	bl	8009306 <_calloc_r>
 80089cc:	b160      	cbz	r0, 80089e8 <_Balloc+0x64>
 80089ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089d2:	e00e      	b.n	80089f2 <_Balloc+0x6e>
 80089d4:	2221      	movs	r2, #33	; 0x21
 80089d6:	2104      	movs	r1, #4
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fc94 	bl	8009306 <_calloc_r>
 80089de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e0:	60f0      	str	r0, [r6, #12]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e4      	bne.n	80089b2 <_Balloc+0x2e>
 80089e8:	2000      	movs	r0, #0
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	6802      	ldr	r2, [r0, #0]
 80089ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089f2:	2300      	movs	r3, #0
 80089f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089f8:	e7f7      	b.n	80089ea <_Balloc+0x66>
 80089fa:	bf00      	nop
 80089fc:	0800a59c 	.word	0x0800a59c
 8008a00:	0800a5b3 	.word	0x0800a5b3

08008a04 <_Bfree>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b976      	cbnz	r6, 8008a2c <_Bfree+0x28>
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f000 fd90 	bl	8009534 <malloc>
 8008a14:	4602      	mov	r2, r0
 8008a16:	6268      	str	r0, [r5, #36]	; 0x24
 8008a18:	b920      	cbnz	r0, 8008a24 <_Bfree+0x20>
 8008a1a:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <_Bfree+0x3c>)
 8008a1c:	4809      	ldr	r0, [pc, #36]	; (8008a44 <_Bfree+0x40>)
 8008a1e:	218a      	movs	r1, #138	; 0x8a
 8008a20:	f000 fd58 	bl	80094d4 <__assert_func>
 8008a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a28:	6006      	str	r6, [r0, #0]
 8008a2a:	60c6      	str	r6, [r0, #12]
 8008a2c:	b13c      	cbz	r4, 8008a3e <_Bfree+0x3a>
 8008a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a38:	6021      	str	r1, [r4, #0]
 8008a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	0800a59c 	.word	0x0800a59c
 8008a44:	0800a5b3 	.word	0x0800a5b3

08008a48 <__multadd>:
 8008a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	690d      	ldr	r5, [r1, #16]
 8008a4e:	4607      	mov	r7, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	461e      	mov	r6, r3
 8008a54:	f101 0c14 	add.w	ip, r1, #20
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a5e:	b299      	uxth	r1, r3
 8008a60:	fb02 6101 	mla	r1, r2, r1, r6
 8008a64:	0c1e      	lsrs	r6, r3, #16
 8008a66:	0c0b      	lsrs	r3, r1, #16
 8008a68:	fb02 3306 	mla	r3, r2, r6, r3
 8008a6c:	b289      	uxth	r1, r1
 8008a6e:	3001      	adds	r0, #1
 8008a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a74:	4285      	cmp	r5, r0
 8008a76:	f84c 1b04 	str.w	r1, [ip], #4
 8008a7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a7e:	dcec      	bgt.n	8008a5a <__multadd+0x12>
 8008a80:	b30e      	cbz	r6, 8008ac6 <__multadd+0x7e>
 8008a82:	68a3      	ldr	r3, [r4, #8]
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	dc19      	bgt.n	8008abc <__multadd+0x74>
 8008a88:	6861      	ldr	r1, [r4, #4]
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	f7ff ff79 	bl	8008984 <_Balloc>
 8008a92:	4680      	mov	r8, r0
 8008a94:	b928      	cbnz	r0, 8008aa2 <__multadd+0x5a>
 8008a96:	4602      	mov	r2, r0
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <__multadd+0x84>)
 8008a9a:	480d      	ldr	r0, [pc, #52]	; (8008ad0 <__multadd+0x88>)
 8008a9c:	21b5      	movs	r1, #181	; 0xb5
 8008a9e:	f000 fd19 	bl	80094d4 <__assert_func>
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	3202      	adds	r2, #2
 8008aa6:	f104 010c 	add.w	r1, r4, #12
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	300c      	adds	r0, #12
 8008aae:	f7ff ff5b 	bl	8008968 <memcpy>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff ffa5 	bl	8008a04 <_Bfree>
 8008aba:	4644      	mov	r4, r8
 8008abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	615e      	str	r6, [r3, #20]
 8008ac4:	6125      	str	r5, [r4, #16]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	0800a510 	.word	0x0800a510
 8008ad0:	0800a5b3 	.word	0x0800a5b3

08008ad4 <__s2b>:
 8008ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	460c      	mov	r4, r1
 8008ada:	4615      	mov	r5, r2
 8008adc:	461f      	mov	r7, r3
 8008ade:	2209      	movs	r2, #9
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ae8:	2100      	movs	r1, #0
 8008aea:	2201      	movs	r2, #1
 8008aec:	429a      	cmp	r2, r3
 8008aee:	db09      	blt.n	8008b04 <__s2b+0x30>
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff ff47 	bl	8008984 <_Balloc>
 8008af6:	b940      	cbnz	r0, 8008b0a <__s2b+0x36>
 8008af8:	4602      	mov	r2, r0
 8008afa:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <__s2b+0x8c>)
 8008afc:	4819      	ldr	r0, [pc, #100]	; (8008b64 <__s2b+0x90>)
 8008afe:	21ce      	movs	r1, #206	; 0xce
 8008b00:	f000 fce8 	bl	80094d4 <__assert_func>
 8008b04:	0052      	lsls	r2, r2, #1
 8008b06:	3101      	adds	r1, #1
 8008b08:	e7f0      	b.n	8008aec <__s2b+0x18>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	6143      	str	r3, [r0, #20]
 8008b0e:	2d09      	cmp	r5, #9
 8008b10:	f04f 0301 	mov.w	r3, #1
 8008b14:	6103      	str	r3, [r0, #16]
 8008b16:	dd16      	ble.n	8008b46 <__s2b+0x72>
 8008b18:	f104 0909 	add.w	r9, r4, #9
 8008b1c:	46c8      	mov	r8, r9
 8008b1e:	442c      	add	r4, r5
 8008b20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b24:	4601      	mov	r1, r0
 8008b26:	3b30      	subs	r3, #48	; 0x30
 8008b28:	220a      	movs	r2, #10
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ff8c 	bl	8008a48 <__multadd>
 8008b30:	45a0      	cmp	r8, r4
 8008b32:	d1f5      	bne.n	8008b20 <__s2b+0x4c>
 8008b34:	f1a5 0408 	sub.w	r4, r5, #8
 8008b38:	444c      	add	r4, r9
 8008b3a:	1b2d      	subs	r5, r5, r4
 8008b3c:	1963      	adds	r3, r4, r5
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	db04      	blt.n	8008b4c <__s2b+0x78>
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	340a      	adds	r4, #10
 8008b48:	2509      	movs	r5, #9
 8008b4a:	e7f6      	b.n	8008b3a <__s2b+0x66>
 8008b4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b50:	4601      	mov	r1, r0
 8008b52:	3b30      	subs	r3, #48	; 0x30
 8008b54:	220a      	movs	r2, #10
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ff76 	bl	8008a48 <__multadd>
 8008b5c:	e7ee      	b.n	8008b3c <__s2b+0x68>
 8008b5e:	bf00      	nop
 8008b60:	0800a510 	.word	0x0800a510
 8008b64:	0800a5b3 	.word	0x0800a5b3

08008b68 <__hi0bits>:
 8008b68:	0c03      	lsrs	r3, r0, #16
 8008b6a:	041b      	lsls	r3, r3, #16
 8008b6c:	b9d3      	cbnz	r3, 8008ba4 <__hi0bits+0x3c>
 8008b6e:	0400      	lsls	r0, r0, #16
 8008b70:	2310      	movs	r3, #16
 8008b72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b76:	bf04      	itt	eq
 8008b78:	0200      	lsleq	r0, r0, #8
 8008b7a:	3308      	addeq	r3, #8
 8008b7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b80:	bf04      	itt	eq
 8008b82:	0100      	lsleq	r0, r0, #4
 8008b84:	3304      	addeq	r3, #4
 8008b86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b8a:	bf04      	itt	eq
 8008b8c:	0080      	lsleq	r0, r0, #2
 8008b8e:	3302      	addeq	r3, #2
 8008b90:	2800      	cmp	r0, #0
 8008b92:	db05      	blt.n	8008ba0 <__hi0bits+0x38>
 8008b94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b98:	f103 0301 	add.w	r3, r3, #1
 8008b9c:	bf08      	it	eq
 8008b9e:	2320      	moveq	r3, #32
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	4770      	bx	lr
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e7e4      	b.n	8008b72 <__hi0bits+0xa>

08008ba8 <__lo0bits>:
 8008ba8:	6803      	ldr	r3, [r0, #0]
 8008baa:	f013 0207 	ands.w	r2, r3, #7
 8008bae:	4601      	mov	r1, r0
 8008bb0:	d00b      	beq.n	8008bca <__lo0bits+0x22>
 8008bb2:	07da      	lsls	r2, r3, #31
 8008bb4:	d423      	bmi.n	8008bfe <__lo0bits+0x56>
 8008bb6:	0798      	lsls	r0, r3, #30
 8008bb8:	bf49      	itett	mi
 8008bba:	085b      	lsrmi	r3, r3, #1
 8008bbc:	089b      	lsrpl	r3, r3, #2
 8008bbe:	2001      	movmi	r0, #1
 8008bc0:	600b      	strmi	r3, [r1, #0]
 8008bc2:	bf5c      	itt	pl
 8008bc4:	600b      	strpl	r3, [r1, #0]
 8008bc6:	2002      	movpl	r0, #2
 8008bc8:	4770      	bx	lr
 8008bca:	b298      	uxth	r0, r3
 8008bcc:	b9a8      	cbnz	r0, 8008bfa <__lo0bits+0x52>
 8008bce:	0c1b      	lsrs	r3, r3, #16
 8008bd0:	2010      	movs	r0, #16
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	b90a      	cbnz	r2, 8008bda <__lo0bits+0x32>
 8008bd6:	3008      	adds	r0, #8
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	071a      	lsls	r2, r3, #28
 8008bdc:	bf04      	itt	eq
 8008bde:	091b      	lsreq	r3, r3, #4
 8008be0:	3004      	addeq	r0, #4
 8008be2:	079a      	lsls	r2, r3, #30
 8008be4:	bf04      	itt	eq
 8008be6:	089b      	lsreq	r3, r3, #2
 8008be8:	3002      	addeq	r0, #2
 8008bea:	07da      	lsls	r2, r3, #31
 8008bec:	d403      	bmi.n	8008bf6 <__lo0bits+0x4e>
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	f100 0001 	add.w	r0, r0, #1
 8008bf4:	d005      	beq.n	8008c02 <__lo0bits+0x5a>
 8008bf6:	600b      	str	r3, [r1, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	e7e9      	b.n	8008bd2 <__lo0bits+0x2a>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	4770      	bx	lr
 8008c02:	2020      	movs	r0, #32
 8008c04:	4770      	bx	lr
	...

08008c08 <__i2b>:
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	f7ff feb9 	bl	8008984 <_Balloc>
 8008c12:	4602      	mov	r2, r0
 8008c14:	b928      	cbnz	r0, 8008c22 <__i2b+0x1a>
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <__i2b+0x24>)
 8008c18:	4805      	ldr	r0, [pc, #20]	; (8008c30 <__i2b+0x28>)
 8008c1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c1e:	f000 fc59 	bl	80094d4 <__assert_func>
 8008c22:	2301      	movs	r3, #1
 8008c24:	6144      	str	r4, [r0, #20]
 8008c26:	6103      	str	r3, [r0, #16]
 8008c28:	bd10      	pop	{r4, pc}
 8008c2a:	bf00      	nop
 8008c2c:	0800a510 	.word	0x0800a510
 8008c30:	0800a5b3 	.word	0x0800a5b3

08008c34 <__multiply>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	4691      	mov	r9, r2
 8008c3a:	690a      	ldr	r2, [r1, #16]
 8008c3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	bfb8      	it	lt
 8008c44:	460b      	movlt	r3, r1
 8008c46:	460c      	mov	r4, r1
 8008c48:	bfbc      	itt	lt
 8008c4a:	464c      	movlt	r4, r9
 8008c4c:	4699      	movlt	r9, r3
 8008c4e:	6927      	ldr	r7, [r4, #16]
 8008c50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c54:	68a3      	ldr	r3, [r4, #8]
 8008c56:	6861      	ldr	r1, [r4, #4]
 8008c58:	eb07 060a 	add.w	r6, r7, sl
 8008c5c:	42b3      	cmp	r3, r6
 8008c5e:	b085      	sub	sp, #20
 8008c60:	bfb8      	it	lt
 8008c62:	3101      	addlt	r1, #1
 8008c64:	f7ff fe8e 	bl	8008984 <_Balloc>
 8008c68:	b930      	cbnz	r0, 8008c78 <__multiply+0x44>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b44      	ldr	r3, [pc, #272]	; (8008d80 <__multiply+0x14c>)
 8008c6e:	4845      	ldr	r0, [pc, #276]	; (8008d84 <__multiply+0x150>)
 8008c70:	f240 115d 	movw	r1, #349	; 0x15d
 8008c74:	f000 fc2e 	bl	80094d4 <__assert_func>
 8008c78:	f100 0514 	add.w	r5, r0, #20
 8008c7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c80:	462b      	mov	r3, r5
 8008c82:	2200      	movs	r2, #0
 8008c84:	4543      	cmp	r3, r8
 8008c86:	d321      	bcc.n	8008ccc <__multiply+0x98>
 8008c88:	f104 0314 	add.w	r3, r4, #20
 8008c8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c90:	f109 0314 	add.w	r3, r9, #20
 8008c94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c98:	9202      	str	r2, [sp, #8]
 8008c9a:	1b3a      	subs	r2, r7, r4
 8008c9c:	3a15      	subs	r2, #21
 8008c9e:	f022 0203 	bic.w	r2, r2, #3
 8008ca2:	3204      	adds	r2, #4
 8008ca4:	f104 0115 	add.w	r1, r4, #21
 8008ca8:	428f      	cmp	r7, r1
 8008caa:	bf38      	it	cc
 8008cac:	2204      	movcc	r2, #4
 8008cae:	9201      	str	r2, [sp, #4]
 8008cb0:	9a02      	ldr	r2, [sp, #8]
 8008cb2:	9303      	str	r3, [sp, #12]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d80c      	bhi.n	8008cd2 <__multiply+0x9e>
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	dd03      	ble.n	8008cc4 <__multiply+0x90>
 8008cbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d05a      	beq.n	8008d7a <__multiply+0x146>
 8008cc4:	6106      	str	r6, [r0, #16]
 8008cc6:	b005      	add	sp, #20
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	f843 2b04 	str.w	r2, [r3], #4
 8008cd0:	e7d8      	b.n	8008c84 <__multiply+0x50>
 8008cd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cd6:	f1ba 0f00 	cmp.w	sl, #0
 8008cda:	d024      	beq.n	8008d26 <__multiply+0xf2>
 8008cdc:	f104 0e14 	add.w	lr, r4, #20
 8008ce0:	46a9      	mov	r9, r5
 8008ce2:	f04f 0c00 	mov.w	ip, #0
 8008ce6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008cea:	f8d9 1000 	ldr.w	r1, [r9]
 8008cee:	fa1f fb82 	uxth.w	fp, r2
 8008cf2:	b289      	uxth	r1, r1
 8008cf4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008cf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8008d00:	4461      	add	r1, ip
 8008d02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d06:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d0e:	b289      	uxth	r1, r1
 8008d10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d14:	4577      	cmp	r7, lr
 8008d16:	f849 1b04 	str.w	r1, [r9], #4
 8008d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d1e:	d8e2      	bhi.n	8008ce6 <__multiply+0xb2>
 8008d20:	9a01      	ldr	r2, [sp, #4]
 8008d22:	f845 c002 	str.w	ip, [r5, r2]
 8008d26:	9a03      	ldr	r2, [sp, #12]
 8008d28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	f1b9 0f00 	cmp.w	r9, #0
 8008d32:	d020      	beq.n	8008d76 <__multiply+0x142>
 8008d34:	6829      	ldr	r1, [r5, #0]
 8008d36:	f104 0c14 	add.w	ip, r4, #20
 8008d3a:	46ae      	mov	lr, r5
 8008d3c:	f04f 0a00 	mov.w	sl, #0
 8008d40:	f8bc b000 	ldrh.w	fp, [ip]
 8008d44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d48:	fb09 220b 	mla	r2, r9, fp, r2
 8008d4c:	4492      	add	sl, r2
 8008d4e:	b289      	uxth	r1, r1
 8008d50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d54:	f84e 1b04 	str.w	r1, [lr], #4
 8008d58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d5c:	f8be 1000 	ldrh.w	r1, [lr]
 8008d60:	0c12      	lsrs	r2, r2, #16
 8008d62:	fb09 1102 	mla	r1, r9, r2, r1
 8008d66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d6a:	4567      	cmp	r7, ip
 8008d6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d70:	d8e6      	bhi.n	8008d40 <__multiply+0x10c>
 8008d72:	9a01      	ldr	r2, [sp, #4]
 8008d74:	50a9      	str	r1, [r5, r2]
 8008d76:	3504      	adds	r5, #4
 8008d78:	e79a      	b.n	8008cb0 <__multiply+0x7c>
 8008d7a:	3e01      	subs	r6, #1
 8008d7c:	e79c      	b.n	8008cb8 <__multiply+0x84>
 8008d7e:	bf00      	nop
 8008d80:	0800a510 	.word	0x0800a510
 8008d84:	0800a5b3 	.word	0x0800a5b3

08008d88 <__pow5mult>:
 8008d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d8c:	4615      	mov	r5, r2
 8008d8e:	f012 0203 	ands.w	r2, r2, #3
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	d007      	beq.n	8008da8 <__pow5mult+0x20>
 8008d98:	4c25      	ldr	r4, [pc, #148]	; (8008e30 <__pow5mult+0xa8>)
 8008d9a:	3a01      	subs	r2, #1
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008da2:	f7ff fe51 	bl	8008a48 <__multadd>
 8008da6:	4607      	mov	r7, r0
 8008da8:	10ad      	asrs	r5, r5, #2
 8008daa:	d03d      	beq.n	8008e28 <__pow5mult+0xa0>
 8008dac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dae:	b97c      	cbnz	r4, 8008dd0 <__pow5mult+0x48>
 8008db0:	2010      	movs	r0, #16
 8008db2:	f000 fbbf 	bl	8009534 <malloc>
 8008db6:	4602      	mov	r2, r0
 8008db8:	6270      	str	r0, [r6, #36]	; 0x24
 8008dba:	b928      	cbnz	r0, 8008dc8 <__pow5mult+0x40>
 8008dbc:	4b1d      	ldr	r3, [pc, #116]	; (8008e34 <__pow5mult+0xac>)
 8008dbe:	481e      	ldr	r0, [pc, #120]	; (8008e38 <__pow5mult+0xb0>)
 8008dc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008dc4:	f000 fb86 	bl	80094d4 <__assert_func>
 8008dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dcc:	6004      	str	r4, [r0, #0]
 8008dce:	60c4      	str	r4, [r0, #12]
 8008dd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dd8:	b94c      	cbnz	r4, 8008dee <__pow5mult+0x66>
 8008dda:	f240 2171 	movw	r1, #625	; 0x271
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7ff ff12 	bl	8008c08 <__i2b>
 8008de4:	2300      	movs	r3, #0
 8008de6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dea:	4604      	mov	r4, r0
 8008dec:	6003      	str	r3, [r0, #0]
 8008dee:	f04f 0900 	mov.w	r9, #0
 8008df2:	07eb      	lsls	r3, r5, #31
 8008df4:	d50a      	bpl.n	8008e0c <__pow5mult+0x84>
 8008df6:	4639      	mov	r1, r7
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff ff1a 	bl	8008c34 <__multiply>
 8008e00:	4639      	mov	r1, r7
 8008e02:	4680      	mov	r8, r0
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fdfd 	bl	8008a04 <_Bfree>
 8008e0a:	4647      	mov	r7, r8
 8008e0c:	106d      	asrs	r5, r5, #1
 8008e0e:	d00b      	beq.n	8008e28 <__pow5mult+0xa0>
 8008e10:	6820      	ldr	r0, [r4, #0]
 8008e12:	b938      	cbnz	r0, 8008e24 <__pow5mult+0x9c>
 8008e14:	4622      	mov	r2, r4
 8008e16:	4621      	mov	r1, r4
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7ff ff0b 	bl	8008c34 <__multiply>
 8008e1e:	6020      	str	r0, [r4, #0]
 8008e20:	f8c0 9000 	str.w	r9, [r0]
 8008e24:	4604      	mov	r4, r0
 8008e26:	e7e4      	b.n	8008df2 <__pow5mult+0x6a>
 8008e28:	4638      	mov	r0, r7
 8008e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2e:	bf00      	nop
 8008e30:	0800a700 	.word	0x0800a700
 8008e34:	0800a59c 	.word	0x0800a59c
 8008e38:	0800a5b3 	.word	0x0800a5b3

08008e3c <__lshift>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	460c      	mov	r4, r1
 8008e42:	6849      	ldr	r1, [r1, #4]
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	4691      	mov	r9, r2
 8008e50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e54:	f108 0601 	add.w	r6, r8, #1
 8008e58:	42b3      	cmp	r3, r6
 8008e5a:	db0b      	blt.n	8008e74 <__lshift+0x38>
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f7ff fd91 	bl	8008984 <_Balloc>
 8008e62:	4605      	mov	r5, r0
 8008e64:	b948      	cbnz	r0, 8008e7a <__lshift+0x3e>
 8008e66:	4602      	mov	r2, r0
 8008e68:	4b2a      	ldr	r3, [pc, #168]	; (8008f14 <__lshift+0xd8>)
 8008e6a:	482b      	ldr	r0, [pc, #172]	; (8008f18 <__lshift+0xdc>)
 8008e6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e70:	f000 fb30 	bl	80094d4 <__assert_func>
 8008e74:	3101      	adds	r1, #1
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	e7ee      	b.n	8008e58 <__lshift+0x1c>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f100 0114 	add.w	r1, r0, #20
 8008e80:	f100 0210 	add.w	r2, r0, #16
 8008e84:	4618      	mov	r0, r3
 8008e86:	4553      	cmp	r3, sl
 8008e88:	db37      	blt.n	8008efa <__lshift+0xbe>
 8008e8a:	6920      	ldr	r0, [r4, #16]
 8008e8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e90:	f104 0314 	add.w	r3, r4, #20
 8008e94:	f019 091f 	ands.w	r9, r9, #31
 8008e98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ea0:	d02f      	beq.n	8008f02 <__lshift+0xc6>
 8008ea2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ea6:	468a      	mov	sl, r1
 8008ea8:	f04f 0c00 	mov.w	ip, #0
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	fa02 f209 	lsl.w	r2, r2, r9
 8008eb2:	ea42 020c 	orr.w	r2, r2, ip
 8008eb6:	f84a 2b04 	str.w	r2, [sl], #4
 8008eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ec4:	d8f2      	bhi.n	8008eac <__lshift+0x70>
 8008ec6:	1b03      	subs	r3, r0, r4
 8008ec8:	3b15      	subs	r3, #21
 8008eca:	f023 0303 	bic.w	r3, r3, #3
 8008ece:	3304      	adds	r3, #4
 8008ed0:	f104 0215 	add.w	r2, r4, #21
 8008ed4:	4290      	cmp	r0, r2
 8008ed6:	bf38      	it	cc
 8008ed8:	2304      	movcc	r3, #4
 8008eda:	f841 c003 	str.w	ip, [r1, r3]
 8008ede:	f1bc 0f00 	cmp.w	ip, #0
 8008ee2:	d001      	beq.n	8008ee8 <__lshift+0xac>
 8008ee4:	f108 0602 	add.w	r6, r8, #2
 8008ee8:	3e01      	subs	r6, #1
 8008eea:	4638      	mov	r0, r7
 8008eec:	612e      	str	r6, [r5, #16]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	f7ff fd88 	bl	8008a04 <_Bfree>
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008efe:	3301      	adds	r3, #1
 8008f00:	e7c1      	b.n	8008e86 <__lshift+0x4a>
 8008f02:	3904      	subs	r1, #4
 8008f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f08:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f0c:	4298      	cmp	r0, r3
 8008f0e:	d8f9      	bhi.n	8008f04 <__lshift+0xc8>
 8008f10:	e7ea      	b.n	8008ee8 <__lshift+0xac>
 8008f12:	bf00      	nop
 8008f14:	0800a510 	.word	0x0800a510
 8008f18:	0800a5b3 	.word	0x0800a5b3

08008f1c <__mcmp>:
 8008f1c:	b530      	push	{r4, r5, lr}
 8008f1e:	6902      	ldr	r2, [r0, #16]
 8008f20:	690c      	ldr	r4, [r1, #16]
 8008f22:	1b12      	subs	r2, r2, r4
 8008f24:	d10e      	bne.n	8008f44 <__mcmp+0x28>
 8008f26:	f100 0314 	add.w	r3, r0, #20
 8008f2a:	3114      	adds	r1, #20
 8008f2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f3c:	42a5      	cmp	r5, r4
 8008f3e:	d003      	beq.n	8008f48 <__mcmp+0x2c>
 8008f40:	d305      	bcc.n	8008f4e <__mcmp+0x32>
 8008f42:	2201      	movs	r2, #1
 8008f44:	4610      	mov	r0, r2
 8008f46:	bd30      	pop	{r4, r5, pc}
 8008f48:	4283      	cmp	r3, r0
 8008f4a:	d3f3      	bcc.n	8008f34 <__mcmp+0x18>
 8008f4c:	e7fa      	b.n	8008f44 <__mcmp+0x28>
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f52:	e7f7      	b.n	8008f44 <__mcmp+0x28>

08008f54 <__mdiff>:
 8008f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	460c      	mov	r4, r1
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4690      	mov	r8, r2
 8008f62:	f7ff ffdb 	bl	8008f1c <__mcmp>
 8008f66:	1e05      	subs	r5, r0, #0
 8008f68:	d110      	bne.n	8008f8c <__mdiff+0x38>
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f7ff fd09 	bl	8008984 <_Balloc>
 8008f72:	b930      	cbnz	r0, 8008f82 <__mdiff+0x2e>
 8008f74:	4b3a      	ldr	r3, [pc, #232]	; (8009060 <__mdiff+0x10c>)
 8008f76:	4602      	mov	r2, r0
 8008f78:	f240 2132 	movw	r1, #562	; 0x232
 8008f7c:	4839      	ldr	r0, [pc, #228]	; (8009064 <__mdiff+0x110>)
 8008f7e:	f000 faa9 	bl	80094d4 <__assert_func>
 8008f82:	2301      	movs	r3, #1
 8008f84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	bfa4      	itt	ge
 8008f8e:	4643      	movge	r3, r8
 8008f90:	46a0      	movge	r8, r4
 8008f92:	4630      	mov	r0, r6
 8008f94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f98:	bfa6      	itte	ge
 8008f9a:	461c      	movge	r4, r3
 8008f9c:	2500      	movge	r5, #0
 8008f9e:	2501      	movlt	r5, #1
 8008fa0:	f7ff fcf0 	bl	8008984 <_Balloc>
 8008fa4:	b920      	cbnz	r0, 8008fb0 <__mdiff+0x5c>
 8008fa6:	4b2e      	ldr	r3, [pc, #184]	; (8009060 <__mdiff+0x10c>)
 8008fa8:	4602      	mov	r2, r0
 8008faa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fae:	e7e5      	b.n	8008f7c <__mdiff+0x28>
 8008fb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fb4:	6926      	ldr	r6, [r4, #16]
 8008fb6:	60c5      	str	r5, [r0, #12]
 8008fb8:	f104 0914 	add.w	r9, r4, #20
 8008fbc:	f108 0514 	add.w	r5, r8, #20
 8008fc0:	f100 0e14 	add.w	lr, r0, #20
 8008fc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008fc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fcc:	f108 0210 	add.w	r2, r8, #16
 8008fd0:	46f2      	mov	sl, lr
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008fdc:	fa1f f883 	uxth.w	r8, r3
 8008fe0:	fa11 f18b 	uxtah	r1, r1, fp
 8008fe4:	0c1b      	lsrs	r3, r3, #16
 8008fe6:	eba1 0808 	sub.w	r8, r1, r8
 8008fea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ff2:	fa1f f888 	uxth.w	r8, r8
 8008ff6:	1419      	asrs	r1, r3, #16
 8008ff8:	454e      	cmp	r6, r9
 8008ffa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ffe:	f84a 3b04 	str.w	r3, [sl], #4
 8009002:	d8e7      	bhi.n	8008fd4 <__mdiff+0x80>
 8009004:	1b33      	subs	r3, r6, r4
 8009006:	3b15      	subs	r3, #21
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	3304      	adds	r3, #4
 800900e:	3415      	adds	r4, #21
 8009010:	42a6      	cmp	r6, r4
 8009012:	bf38      	it	cc
 8009014:	2304      	movcc	r3, #4
 8009016:	441d      	add	r5, r3
 8009018:	4473      	add	r3, lr
 800901a:	469e      	mov	lr, r3
 800901c:	462e      	mov	r6, r5
 800901e:	4566      	cmp	r6, ip
 8009020:	d30e      	bcc.n	8009040 <__mdiff+0xec>
 8009022:	f10c 0203 	add.w	r2, ip, #3
 8009026:	1b52      	subs	r2, r2, r5
 8009028:	f022 0203 	bic.w	r2, r2, #3
 800902c:	3d03      	subs	r5, #3
 800902e:	45ac      	cmp	ip, r5
 8009030:	bf38      	it	cc
 8009032:	2200      	movcc	r2, #0
 8009034:	441a      	add	r2, r3
 8009036:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800903a:	b17b      	cbz	r3, 800905c <__mdiff+0x108>
 800903c:	6107      	str	r7, [r0, #16]
 800903e:	e7a3      	b.n	8008f88 <__mdiff+0x34>
 8009040:	f856 8b04 	ldr.w	r8, [r6], #4
 8009044:	fa11 f288 	uxtah	r2, r1, r8
 8009048:	1414      	asrs	r4, r2, #16
 800904a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800904e:	b292      	uxth	r2, r2
 8009050:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009054:	f84e 2b04 	str.w	r2, [lr], #4
 8009058:	1421      	asrs	r1, r4, #16
 800905a:	e7e0      	b.n	800901e <__mdiff+0xca>
 800905c:	3f01      	subs	r7, #1
 800905e:	e7ea      	b.n	8009036 <__mdiff+0xe2>
 8009060:	0800a510 	.word	0x0800a510
 8009064:	0800a5b3 	.word	0x0800a5b3

08009068 <__ulp>:
 8009068:	b082      	sub	sp, #8
 800906a:	ed8d 0b00 	vstr	d0, [sp]
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	4912      	ldr	r1, [pc, #72]	; (80090bc <__ulp+0x54>)
 8009072:	4019      	ands	r1, r3
 8009074:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009078:	2900      	cmp	r1, #0
 800907a:	dd05      	ble.n	8009088 <__ulp+0x20>
 800907c:	2200      	movs	r2, #0
 800907e:	460b      	mov	r3, r1
 8009080:	ec43 2b10 	vmov	d0, r2, r3
 8009084:	b002      	add	sp, #8
 8009086:	4770      	bx	lr
 8009088:	4249      	negs	r1, r1
 800908a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800908e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009092:	f04f 0200 	mov.w	r2, #0
 8009096:	f04f 0300 	mov.w	r3, #0
 800909a:	da04      	bge.n	80090a6 <__ulp+0x3e>
 800909c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090a0:	fa41 f300 	asr.w	r3, r1, r0
 80090a4:	e7ec      	b.n	8009080 <__ulp+0x18>
 80090a6:	f1a0 0114 	sub.w	r1, r0, #20
 80090aa:	291e      	cmp	r1, #30
 80090ac:	bfda      	itte	le
 80090ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80090b2:	fa20 f101 	lsrle.w	r1, r0, r1
 80090b6:	2101      	movgt	r1, #1
 80090b8:	460a      	mov	r2, r1
 80090ba:	e7e1      	b.n	8009080 <__ulp+0x18>
 80090bc:	7ff00000 	.word	0x7ff00000

080090c0 <__b2d>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	6905      	ldr	r5, [r0, #16]
 80090c4:	f100 0714 	add.w	r7, r0, #20
 80090c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80090cc:	1f2e      	subs	r6, r5, #4
 80090ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7ff fd48 	bl	8008b68 <__hi0bits>
 80090d8:	f1c0 0320 	rsb	r3, r0, #32
 80090dc:	280a      	cmp	r0, #10
 80090de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800915c <__b2d+0x9c>
 80090e2:	600b      	str	r3, [r1, #0]
 80090e4:	dc14      	bgt.n	8009110 <__b2d+0x50>
 80090e6:	f1c0 0e0b 	rsb	lr, r0, #11
 80090ea:	fa24 f10e 	lsr.w	r1, r4, lr
 80090ee:	42b7      	cmp	r7, r6
 80090f0:	ea41 030c 	orr.w	r3, r1, ip
 80090f4:	bf34      	ite	cc
 80090f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090fa:	2100      	movcs	r1, #0
 80090fc:	3015      	adds	r0, #21
 80090fe:	fa04 f000 	lsl.w	r0, r4, r0
 8009102:	fa21 f10e 	lsr.w	r1, r1, lr
 8009106:	ea40 0201 	orr.w	r2, r0, r1
 800910a:	ec43 2b10 	vmov	d0, r2, r3
 800910e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009110:	42b7      	cmp	r7, r6
 8009112:	bf3a      	itte	cc
 8009114:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009118:	f1a5 0608 	subcc.w	r6, r5, #8
 800911c:	2100      	movcs	r1, #0
 800911e:	380b      	subs	r0, #11
 8009120:	d017      	beq.n	8009152 <__b2d+0x92>
 8009122:	f1c0 0c20 	rsb	ip, r0, #32
 8009126:	fa04 f500 	lsl.w	r5, r4, r0
 800912a:	42be      	cmp	r6, r7
 800912c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009130:	ea45 0504 	orr.w	r5, r5, r4
 8009134:	bf8c      	ite	hi
 8009136:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800913a:	2400      	movls	r4, #0
 800913c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009140:	fa01 f000 	lsl.w	r0, r1, r0
 8009144:	fa24 f40c 	lsr.w	r4, r4, ip
 8009148:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800914c:	ea40 0204 	orr.w	r2, r0, r4
 8009150:	e7db      	b.n	800910a <__b2d+0x4a>
 8009152:	ea44 030c 	orr.w	r3, r4, ip
 8009156:	460a      	mov	r2, r1
 8009158:	e7d7      	b.n	800910a <__b2d+0x4a>
 800915a:	bf00      	nop
 800915c:	3ff00000 	.word	0x3ff00000

08009160 <__d2b>:
 8009160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009164:	4689      	mov	r9, r1
 8009166:	2101      	movs	r1, #1
 8009168:	ec57 6b10 	vmov	r6, r7, d0
 800916c:	4690      	mov	r8, r2
 800916e:	f7ff fc09 	bl	8008984 <_Balloc>
 8009172:	4604      	mov	r4, r0
 8009174:	b930      	cbnz	r0, 8009184 <__d2b+0x24>
 8009176:	4602      	mov	r2, r0
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <__d2b+0xb0>)
 800917a:	4826      	ldr	r0, [pc, #152]	; (8009214 <__d2b+0xb4>)
 800917c:	f240 310a 	movw	r1, #778	; 0x30a
 8009180:	f000 f9a8 	bl	80094d4 <__assert_func>
 8009184:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800918c:	bb35      	cbnz	r5, 80091dc <__d2b+0x7c>
 800918e:	2e00      	cmp	r6, #0
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	d028      	beq.n	80091e6 <__d2b+0x86>
 8009194:	4668      	mov	r0, sp
 8009196:	9600      	str	r6, [sp, #0]
 8009198:	f7ff fd06 	bl	8008ba8 <__lo0bits>
 800919c:	9900      	ldr	r1, [sp, #0]
 800919e:	b300      	cbz	r0, 80091e2 <__d2b+0x82>
 80091a0:	9a01      	ldr	r2, [sp, #4]
 80091a2:	f1c0 0320 	rsb	r3, r0, #32
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	430b      	orrs	r3, r1
 80091ac:	40c2      	lsrs	r2, r0
 80091ae:	6163      	str	r3, [r4, #20]
 80091b0:	9201      	str	r2, [sp, #4]
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	61a3      	str	r3, [r4, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bf14      	ite	ne
 80091ba:	2202      	movne	r2, #2
 80091bc:	2201      	moveq	r2, #1
 80091be:	6122      	str	r2, [r4, #16]
 80091c0:	b1d5      	cbz	r5, 80091f8 <__d2b+0x98>
 80091c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091c6:	4405      	add	r5, r0
 80091c8:	f8c9 5000 	str.w	r5, [r9]
 80091cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091d0:	f8c8 0000 	str.w	r0, [r8]
 80091d4:	4620      	mov	r0, r4
 80091d6:	b003      	add	sp, #12
 80091d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091e0:	e7d5      	b.n	800918e <__d2b+0x2e>
 80091e2:	6161      	str	r1, [r4, #20]
 80091e4:	e7e5      	b.n	80091b2 <__d2b+0x52>
 80091e6:	a801      	add	r0, sp, #4
 80091e8:	f7ff fcde 	bl	8008ba8 <__lo0bits>
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	6163      	str	r3, [r4, #20]
 80091f0:	2201      	movs	r2, #1
 80091f2:	6122      	str	r2, [r4, #16]
 80091f4:	3020      	adds	r0, #32
 80091f6:	e7e3      	b.n	80091c0 <__d2b+0x60>
 80091f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009200:	f8c9 0000 	str.w	r0, [r9]
 8009204:	6918      	ldr	r0, [r3, #16]
 8009206:	f7ff fcaf 	bl	8008b68 <__hi0bits>
 800920a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800920e:	e7df      	b.n	80091d0 <__d2b+0x70>
 8009210:	0800a510 	.word	0x0800a510
 8009214:	0800a5b3 	.word	0x0800a5b3

08009218 <__ratio>:
 8009218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	4688      	mov	r8, r1
 800921e:	4669      	mov	r1, sp
 8009220:	4681      	mov	r9, r0
 8009222:	f7ff ff4d 	bl	80090c0 <__b2d>
 8009226:	a901      	add	r1, sp, #4
 8009228:	4640      	mov	r0, r8
 800922a:	ec55 4b10 	vmov	r4, r5, d0
 800922e:	f7ff ff47 	bl	80090c0 <__b2d>
 8009232:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009236:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800923a:	eba3 0c02 	sub.w	ip, r3, r2
 800923e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009248:	ec51 0b10 	vmov	r0, r1, d0
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfd6      	itet	le
 8009250:	460a      	movle	r2, r1
 8009252:	462a      	movgt	r2, r5
 8009254:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009258:	468b      	mov	fp, r1
 800925a:	462f      	mov	r7, r5
 800925c:	bfd4      	ite	le
 800925e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009262:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009266:	4620      	mov	r0, r4
 8009268:	ee10 2a10 	vmov	r2, s0
 800926c:	465b      	mov	r3, fp
 800926e:	4639      	mov	r1, r7
 8009270:	f7f7 fb24 	bl	80008bc <__aeabi_ddiv>
 8009274:	ec41 0b10 	vmov	d0, r0, r1
 8009278:	b003      	add	sp, #12
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800927e <__copybits>:
 800927e:	3901      	subs	r1, #1
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	1149      	asrs	r1, r1, #5
 8009284:	6914      	ldr	r4, [r2, #16]
 8009286:	3101      	adds	r1, #1
 8009288:	f102 0314 	add.w	r3, r2, #20
 800928c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009290:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009294:	1f05      	subs	r5, r0, #4
 8009296:	42a3      	cmp	r3, r4
 8009298:	d30c      	bcc.n	80092b4 <__copybits+0x36>
 800929a:	1aa3      	subs	r3, r4, r2
 800929c:	3b11      	subs	r3, #17
 800929e:	f023 0303 	bic.w	r3, r3, #3
 80092a2:	3211      	adds	r2, #17
 80092a4:	42a2      	cmp	r2, r4
 80092a6:	bf88      	it	hi
 80092a8:	2300      	movhi	r3, #0
 80092aa:	4418      	add	r0, r3
 80092ac:	2300      	movs	r3, #0
 80092ae:	4288      	cmp	r0, r1
 80092b0:	d305      	bcc.n	80092be <__copybits+0x40>
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80092b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80092bc:	e7eb      	b.n	8009296 <__copybits+0x18>
 80092be:	f840 3b04 	str.w	r3, [r0], #4
 80092c2:	e7f4      	b.n	80092ae <__copybits+0x30>

080092c4 <__any_on>:
 80092c4:	f100 0214 	add.w	r2, r0, #20
 80092c8:	6900      	ldr	r0, [r0, #16]
 80092ca:	114b      	asrs	r3, r1, #5
 80092cc:	4298      	cmp	r0, r3
 80092ce:	b510      	push	{r4, lr}
 80092d0:	db11      	blt.n	80092f6 <__any_on+0x32>
 80092d2:	dd0a      	ble.n	80092ea <__any_on+0x26>
 80092d4:	f011 011f 	ands.w	r1, r1, #31
 80092d8:	d007      	beq.n	80092ea <__any_on+0x26>
 80092da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092de:	fa24 f001 	lsr.w	r0, r4, r1
 80092e2:	fa00 f101 	lsl.w	r1, r0, r1
 80092e6:	428c      	cmp	r4, r1
 80092e8:	d10b      	bne.n	8009302 <__any_on+0x3e>
 80092ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d803      	bhi.n	80092fa <__any_on+0x36>
 80092f2:	2000      	movs	r0, #0
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	4603      	mov	r3, r0
 80092f8:	e7f7      	b.n	80092ea <__any_on+0x26>
 80092fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092fe:	2900      	cmp	r1, #0
 8009300:	d0f5      	beq.n	80092ee <__any_on+0x2a>
 8009302:	2001      	movs	r0, #1
 8009304:	e7f6      	b.n	80092f4 <__any_on+0x30>

08009306 <_calloc_r>:
 8009306:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009308:	fba1 2402 	umull	r2, r4, r1, r2
 800930c:	b94c      	cbnz	r4, 8009322 <_calloc_r+0x1c>
 800930e:	4611      	mov	r1, r2
 8009310:	9201      	str	r2, [sp, #4]
 8009312:	f000 f82f 	bl	8009374 <_malloc_r>
 8009316:	9a01      	ldr	r2, [sp, #4]
 8009318:	4605      	mov	r5, r0
 800931a:	b930      	cbnz	r0, 800932a <_calloc_r+0x24>
 800931c:	4628      	mov	r0, r5
 800931e:	b003      	add	sp, #12
 8009320:	bd30      	pop	{r4, r5, pc}
 8009322:	220c      	movs	r2, #12
 8009324:	6002      	str	r2, [r0, #0]
 8009326:	2500      	movs	r5, #0
 8009328:	e7f8      	b.n	800931c <_calloc_r+0x16>
 800932a:	4621      	mov	r1, r4
 800932c:	f7fe f93c 	bl	80075a8 <memset>
 8009330:	e7f4      	b.n	800931c <_calloc_r+0x16>
	...

08009334 <sbrk_aligned>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	4e0e      	ldr	r6, [pc, #56]	; (8009370 <sbrk_aligned+0x3c>)
 8009338:	460c      	mov	r4, r1
 800933a:	6831      	ldr	r1, [r6, #0]
 800933c:	4605      	mov	r5, r0
 800933e:	b911      	cbnz	r1, 8009346 <sbrk_aligned+0x12>
 8009340:	f000 f896 	bl	8009470 <_sbrk_r>
 8009344:	6030      	str	r0, [r6, #0]
 8009346:	4621      	mov	r1, r4
 8009348:	4628      	mov	r0, r5
 800934a:	f000 f891 	bl	8009470 <_sbrk_r>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d00a      	beq.n	8009368 <sbrk_aligned+0x34>
 8009352:	1cc4      	adds	r4, r0, #3
 8009354:	f024 0403 	bic.w	r4, r4, #3
 8009358:	42a0      	cmp	r0, r4
 800935a:	d007      	beq.n	800936c <sbrk_aligned+0x38>
 800935c:	1a21      	subs	r1, r4, r0
 800935e:	4628      	mov	r0, r5
 8009360:	f000 f886 	bl	8009470 <_sbrk_r>
 8009364:	3001      	adds	r0, #1
 8009366:	d101      	bne.n	800936c <sbrk_aligned+0x38>
 8009368:	f04f 34ff 	mov.w	r4, #4294967295
 800936c:	4620      	mov	r0, r4
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	200004dc 	.word	0x200004dc

08009374 <_malloc_r>:
 8009374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009378:	1ccd      	adds	r5, r1, #3
 800937a:	f025 0503 	bic.w	r5, r5, #3
 800937e:	3508      	adds	r5, #8
 8009380:	2d0c      	cmp	r5, #12
 8009382:	bf38      	it	cc
 8009384:	250c      	movcc	r5, #12
 8009386:	2d00      	cmp	r5, #0
 8009388:	4607      	mov	r7, r0
 800938a:	db01      	blt.n	8009390 <_malloc_r+0x1c>
 800938c:	42a9      	cmp	r1, r5
 800938e:	d905      	bls.n	800939c <_malloc_r+0x28>
 8009390:	230c      	movs	r3, #12
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	2600      	movs	r6, #0
 8009396:	4630      	mov	r0, r6
 8009398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800939c:	4e2e      	ldr	r6, [pc, #184]	; (8009458 <_malloc_r+0xe4>)
 800939e:	f000 f8d1 	bl	8009544 <__malloc_lock>
 80093a2:	6833      	ldr	r3, [r6, #0]
 80093a4:	461c      	mov	r4, r3
 80093a6:	bb34      	cbnz	r4, 80093f6 <_malloc_r+0x82>
 80093a8:	4629      	mov	r1, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	f7ff ffc2 	bl	8009334 <sbrk_aligned>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	4604      	mov	r4, r0
 80093b4:	d14d      	bne.n	8009452 <_malloc_r+0xde>
 80093b6:	6834      	ldr	r4, [r6, #0]
 80093b8:	4626      	mov	r6, r4
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	d140      	bne.n	8009440 <_malloc_r+0xcc>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	4631      	mov	r1, r6
 80093c2:	4638      	mov	r0, r7
 80093c4:	eb04 0803 	add.w	r8, r4, r3
 80093c8:	f000 f852 	bl	8009470 <_sbrk_r>
 80093cc:	4580      	cmp	r8, r0
 80093ce:	d13a      	bne.n	8009446 <_malloc_r+0xd2>
 80093d0:	6821      	ldr	r1, [r4, #0]
 80093d2:	3503      	adds	r5, #3
 80093d4:	1a6d      	subs	r5, r5, r1
 80093d6:	f025 0503 	bic.w	r5, r5, #3
 80093da:	3508      	adds	r5, #8
 80093dc:	2d0c      	cmp	r5, #12
 80093de:	bf38      	it	cc
 80093e0:	250c      	movcc	r5, #12
 80093e2:	4629      	mov	r1, r5
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff ffa5 	bl	8009334 <sbrk_aligned>
 80093ea:	3001      	adds	r0, #1
 80093ec:	d02b      	beq.n	8009446 <_malloc_r+0xd2>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	442b      	add	r3, r5
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	e00e      	b.n	8009414 <_malloc_r+0xa0>
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	1b52      	subs	r2, r2, r5
 80093fa:	d41e      	bmi.n	800943a <_malloc_r+0xc6>
 80093fc:	2a0b      	cmp	r2, #11
 80093fe:	d916      	bls.n	800942e <_malloc_r+0xba>
 8009400:	1961      	adds	r1, r4, r5
 8009402:	42a3      	cmp	r3, r4
 8009404:	6025      	str	r5, [r4, #0]
 8009406:	bf18      	it	ne
 8009408:	6059      	strne	r1, [r3, #4]
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	bf08      	it	eq
 800940e:	6031      	streq	r1, [r6, #0]
 8009410:	5162      	str	r2, [r4, r5]
 8009412:	604b      	str	r3, [r1, #4]
 8009414:	4638      	mov	r0, r7
 8009416:	f104 060b 	add.w	r6, r4, #11
 800941a:	f000 f899 	bl	8009550 <__malloc_unlock>
 800941e:	f026 0607 	bic.w	r6, r6, #7
 8009422:	1d23      	adds	r3, r4, #4
 8009424:	1af2      	subs	r2, r6, r3
 8009426:	d0b6      	beq.n	8009396 <_malloc_r+0x22>
 8009428:	1b9b      	subs	r3, r3, r6
 800942a:	50a3      	str	r3, [r4, r2]
 800942c:	e7b3      	b.n	8009396 <_malloc_r+0x22>
 800942e:	6862      	ldr	r2, [r4, #4]
 8009430:	42a3      	cmp	r3, r4
 8009432:	bf0c      	ite	eq
 8009434:	6032      	streq	r2, [r6, #0]
 8009436:	605a      	strne	r2, [r3, #4]
 8009438:	e7ec      	b.n	8009414 <_malloc_r+0xa0>
 800943a:	4623      	mov	r3, r4
 800943c:	6864      	ldr	r4, [r4, #4]
 800943e:	e7b2      	b.n	80093a6 <_malloc_r+0x32>
 8009440:	4634      	mov	r4, r6
 8009442:	6876      	ldr	r6, [r6, #4]
 8009444:	e7b9      	b.n	80093ba <_malloc_r+0x46>
 8009446:	230c      	movs	r3, #12
 8009448:	603b      	str	r3, [r7, #0]
 800944a:	4638      	mov	r0, r7
 800944c:	f000 f880 	bl	8009550 <__malloc_unlock>
 8009450:	e7a1      	b.n	8009396 <_malloc_r+0x22>
 8009452:	6025      	str	r5, [r4, #0]
 8009454:	e7de      	b.n	8009414 <_malloc_r+0xa0>
 8009456:	bf00      	nop
 8009458:	200004d8 	.word	0x200004d8
 800945c:	00000000 	.word	0x00000000

08009460 <nan>:
 8009460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009468 <nan+0x8>
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	00000000 	.word	0x00000000
 800946c:	7ff80000 	.word	0x7ff80000

08009470 <_sbrk_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d06      	ldr	r5, [pc, #24]	; (800948c <_sbrk_r+0x1c>)
 8009474:	2300      	movs	r3, #0
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7f8 fd18 	bl	8001eb0 <_sbrk>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_sbrk_r+0x1a>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_sbrk_r+0x1a>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	200004e0 	.word	0x200004e0

08009490 <strncmp>:
 8009490:	b510      	push	{r4, lr}
 8009492:	b17a      	cbz	r2, 80094b4 <strncmp+0x24>
 8009494:	4603      	mov	r3, r0
 8009496:	3901      	subs	r1, #1
 8009498:	1884      	adds	r4, r0, r2
 800949a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800949e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094a2:	4290      	cmp	r0, r2
 80094a4:	d101      	bne.n	80094aa <strncmp+0x1a>
 80094a6:	42a3      	cmp	r3, r4
 80094a8:	d101      	bne.n	80094ae <strncmp+0x1e>
 80094aa:	1a80      	subs	r0, r0, r2
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d1f3      	bne.n	800949a <strncmp+0xa>
 80094b2:	e7fa      	b.n	80094aa <strncmp+0x1a>
 80094b4:	4610      	mov	r0, r2
 80094b6:	e7f9      	b.n	80094ac <strncmp+0x1c>

080094b8 <__ascii_wctomb>:
 80094b8:	b149      	cbz	r1, 80094ce <__ascii_wctomb+0x16>
 80094ba:	2aff      	cmp	r2, #255	; 0xff
 80094bc:	bf85      	ittet	hi
 80094be:	238a      	movhi	r3, #138	; 0x8a
 80094c0:	6003      	strhi	r3, [r0, #0]
 80094c2:	700a      	strbls	r2, [r1, #0]
 80094c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80094c8:	bf98      	it	ls
 80094ca:	2001      	movls	r0, #1
 80094cc:	4770      	bx	lr
 80094ce:	4608      	mov	r0, r1
 80094d0:	4770      	bx	lr
	...

080094d4 <__assert_func>:
 80094d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094d6:	4614      	mov	r4, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	4b09      	ldr	r3, [pc, #36]	; (8009500 <__assert_func+0x2c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4605      	mov	r5, r0
 80094e0:	68d8      	ldr	r0, [r3, #12]
 80094e2:	b14c      	cbz	r4, 80094f8 <__assert_func+0x24>
 80094e4:	4b07      	ldr	r3, [pc, #28]	; (8009504 <__assert_func+0x30>)
 80094e6:	9100      	str	r1, [sp, #0]
 80094e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094ec:	4906      	ldr	r1, [pc, #24]	; (8009508 <__assert_func+0x34>)
 80094ee:	462b      	mov	r3, r5
 80094f0:	f000 f80e 	bl	8009510 <fiprintf>
 80094f4:	f000 fc2c 	bl	8009d50 <abort>
 80094f8:	4b04      	ldr	r3, [pc, #16]	; (800950c <__assert_func+0x38>)
 80094fa:	461c      	mov	r4, r3
 80094fc:	e7f3      	b.n	80094e6 <__assert_func+0x12>
 80094fe:	bf00      	nop
 8009500:	2000000c 	.word	0x2000000c
 8009504:	0800a70c 	.word	0x0800a70c
 8009508:	0800a719 	.word	0x0800a719
 800950c:	0800a747 	.word	0x0800a747

08009510 <fiprintf>:
 8009510:	b40e      	push	{r1, r2, r3}
 8009512:	b503      	push	{r0, r1, lr}
 8009514:	4601      	mov	r1, r0
 8009516:	ab03      	add	r3, sp, #12
 8009518:	4805      	ldr	r0, [pc, #20]	; (8009530 <fiprintf+0x20>)
 800951a:	f853 2b04 	ldr.w	r2, [r3], #4
 800951e:	6800      	ldr	r0, [r0, #0]
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	f000 f891 	bl	8009648 <_vfiprintf_r>
 8009526:	b002      	add	sp, #8
 8009528:	f85d eb04 	ldr.w	lr, [sp], #4
 800952c:	b003      	add	sp, #12
 800952e:	4770      	bx	lr
 8009530:	2000000c 	.word	0x2000000c

08009534 <malloc>:
 8009534:	4b02      	ldr	r3, [pc, #8]	; (8009540 <malloc+0xc>)
 8009536:	4601      	mov	r1, r0
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	f7ff bf1b 	b.w	8009374 <_malloc_r>
 800953e:	bf00      	nop
 8009540:	2000000c 	.word	0x2000000c

08009544 <__malloc_lock>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__malloc_lock+0x8>)
 8009546:	f000 bdc3 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 800954a:	bf00      	nop
 800954c:	200004e4 	.word	0x200004e4

08009550 <__malloc_unlock>:
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <__malloc_unlock+0x8>)
 8009552:	f000 bdbe 	b.w	800a0d2 <__retarget_lock_release_recursive>
 8009556:	bf00      	nop
 8009558:	200004e4 	.word	0x200004e4

0800955c <_free_r>:
 800955c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800955e:	2900      	cmp	r1, #0
 8009560:	d044      	beq.n	80095ec <_free_r+0x90>
 8009562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009566:	9001      	str	r0, [sp, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f1a1 0404 	sub.w	r4, r1, #4
 800956e:	bfb8      	it	lt
 8009570:	18e4      	addlt	r4, r4, r3
 8009572:	f7ff ffe7 	bl	8009544 <__malloc_lock>
 8009576:	4a1e      	ldr	r2, [pc, #120]	; (80095f0 <_free_r+0x94>)
 8009578:	9801      	ldr	r0, [sp, #4]
 800957a:	6813      	ldr	r3, [r2, #0]
 800957c:	b933      	cbnz	r3, 800958c <_free_r+0x30>
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	6014      	str	r4, [r2, #0]
 8009582:	b003      	add	sp, #12
 8009584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009588:	f7ff bfe2 	b.w	8009550 <__malloc_unlock>
 800958c:	42a3      	cmp	r3, r4
 800958e:	d908      	bls.n	80095a2 <_free_r+0x46>
 8009590:	6825      	ldr	r5, [r4, #0]
 8009592:	1961      	adds	r1, r4, r5
 8009594:	428b      	cmp	r3, r1
 8009596:	bf01      	itttt	eq
 8009598:	6819      	ldreq	r1, [r3, #0]
 800959a:	685b      	ldreq	r3, [r3, #4]
 800959c:	1949      	addeq	r1, r1, r5
 800959e:	6021      	streq	r1, [r4, #0]
 80095a0:	e7ed      	b.n	800957e <_free_r+0x22>
 80095a2:	461a      	mov	r2, r3
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	b10b      	cbz	r3, 80095ac <_free_r+0x50>
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d9fa      	bls.n	80095a2 <_free_r+0x46>
 80095ac:	6811      	ldr	r1, [r2, #0]
 80095ae:	1855      	adds	r5, r2, r1
 80095b0:	42a5      	cmp	r5, r4
 80095b2:	d10b      	bne.n	80095cc <_free_r+0x70>
 80095b4:	6824      	ldr	r4, [r4, #0]
 80095b6:	4421      	add	r1, r4
 80095b8:	1854      	adds	r4, r2, r1
 80095ba:	42a3      	cmp	r3, r4
 80095bc:	6011      	str	r1, [r2, #0]
 80095be:	d1e0      	bne.n	8009582 <_free_r+0x26>
 80095c0:	681c      	ldr	r4, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	6053      	str	r3, [r2, #4]
 80095c6:	4421      	add	r1, r4
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	e7da      	b.n	8009582 <_free_r+0x26>
 80095cc:	d902      	bls.n	80095d4 <_free_r+0x78>
 80095ce:	230c      	movs	r3, #12
 80095d0:	6003      	str	r3, [r0, #0]
 80095d2:	e7d6      	b.n	8009582 <_free_r+0x26>
 80095d4:	6825      	ldr	r5, [r4, #0]
 80095d6:	1961      	adds	r1, r4, r5
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf04      	itt	eq
 80095dc:	6819      	ldreq	r1, [r3, #0]
 80095de:	685b      	ldreq	r3, [r3, #4]
 80095e0:	6063      	str	r3, [r4, #4]
 80095e2:	bf04      	itt	eq
 80095e4:	1949      	addeq	r1, r1, r5
 80095e6:	6021      	streq	r1, [r4, #0]
 80095e8:	6054      	str	r4, [r2, #4]
 80095ea:	e7ca      	b.n	8009582 <_free_r+0x26>
 80095ec:	b003      	add	sp, #12
 80095ee:	bd30      	pop	{r4, r5, pc}
 80095f0:	200004d8 	.word	0x200004d8

080095f4 <__sfputc_r>:
 80095f4:	6893      	ldr	r3, [r2, #8]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	b410      	push	{r4}
 80095fc:	6093      	str	r3, [r2, #8]
 80095fe:	da08      	bge.n	8009612 <__sfputc_r+0x1e>
 8009600:	6994      	ldr	r4, [r2, #24]
 8009602:	42a3      	cmp	r3, r4
 8009604:	db01      	blt.n	800960a <__sfputc_r+0x16>
 8009606:	290a      	cmp	r1, #10
 8009608:	d103      	bne.n	8009612 <__sfputc_r+0x1e>
 800960a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800960e:	f000 badf 	b.w	8009bd0 <__swbuf_r>
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	1c58      	adds	r0, r3, #1
 8009616:	6010      	str	r0, [r2, #0]
 8009618:	7019      	strb	r1, [r3, #0]
 800961a:	4608      	mov	r0, r1
 800961c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009620:	4770      	bx	lr

08009622 <__sfputs_r>:
 8009622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009624:	4606      	mov	r6, r0
 8009626:	460f      	mov	r7, r1
 8009628:	4614      	mov	r4, r2
 800962a:	18d5      	adds	r5, r2, r3
 800962c:	42ac      	cmp	r4, r5
 800962e:	d101      	bne.n	8009634 <__sfputs_r+0x12>
 8009630:	2000      	movs	r0, #0
 8009632:	e007      	b.n	8009644 <__sfputs_r+0x22>
 8009634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009638:	463a      	mov	r2, r7
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff ffda 	bl	80095f4 <__sfputc_r>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d1f3      	bne.n	800962c <__sfputs_r+0xa>
 8009644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009648 <_vfiprintf_r>:
 8009648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	460d      	mov	r5, r1
 800964e:	b09d      	sub	sp, #116	; 0x74
 8009650:	4614      	mov	r4, r2
 8009652:	4698      	mov	r8, r3
 8009654:	4606      	mov	r6, r0
 8009656:	b118      	cbz	r0, 8009660 <_vfiprintf_r+0x18>
 8009658:	6983      	ldr	r3, [r0, #24]
 800965a:	b90b      	cbnz	r3, 8009660 <_vfiprintf_r+0x18>
 800965c:	f000 fc9a 	bl	8009f94 <__sinit>
 8009660:	4b89      	ldr	r3, [pc, #548]	; (8009888 <_vfiprintf_r+0x240>)
 8009662:	429d      	cmp	r5, r3
 8009664:	d11b      	bne.n	800969e <_vfiprintf_r+0x56>
 8009666:	6875      	ldr	r5, [r6, #4]
 8009668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800966a:	07d9      	lsls	r1, r3, #31
 800966c:	d405      	bmi.n	800967a <_vfiprintf_r+0x32>
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	059a      	lsls	r2, r3, #22
 8009672:	d402      	bmi.n	800967a <_vfiprintf_r+0x32>
 8009674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009676:	f000 fd2b 	bl	800a0d0 <__retarget_lock_acquire_recursive>
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	071b      	lsls	r3, r3, #28
 800967e:	d501      	bpl.n	8009684 <_vfiprintf_r+0x3c>
 8009680:	692b      	ldr	r3, [r5, #16]
 8009682:	b9eb      	cbnz	r3, 80096c0 <_vfiprintf_r+0x78>
 8009684:	4629      	mov	r1, r5
 8009686:	4630      	mov	r0, r6
 8009688:	f000 faf4 	bl	8009c74 <__swsetup_r>
 800968c:	b1c0      	cbz	r0, 80096c0 <_vfiprintf_r+0x78>
 800968e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009690:	07dc      	lsls	r4, r3, #31
 8009692:	d50e      	bpl.n	80096b2 <_vfiprintf_r+0x6a>
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	b01d      	add	sp, #116	; 0x74
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	4b7b      	ldr	r3, [pc, #492]	; (800988c <_vfiprintf_r+0x244>)
 80096a0:	429d      	cmp	r5, r3
 80096a2:	d101      	bne.n	80096a8 <_vfiprintf_r+0x60>
 80096a4:	68b5      	ldr	r5, [r6, #8]
 80096a6:	e7df      	b.n	8009668 <_vfiprintf_r+0x20>
 80096a8:	4b79      	ldr	r3, [pc, #484]	; (8009890 <_vfiprintf_r+0x248>)
 80096aa:	429d      	cmp	r5, r3
 80096ac:	bf08      	it	eq
 80096ae:	68f5      	ldreq	r5, [r6, #12]
 80096b0:	e7da      	b.n	8009668 <_vfiprintf_r+0x20>
 80096b2:	89ab      	ldrh	r3, [r5, #12]
 80096b4:	0598      	lsls	r0, r3, #22
 80096b6:	d4ed      	bmi.n	8009694 <_vfiprintf_r+0x4c>
 80096b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ba:	f000 fd0a 	bl	800a0d2 <__retarget_lock_release_recursive>
 80096be:	e7e9      	b.n	8009694 <_vfiprintf_r+0x4c>
 80096c0:	2300      	movs	r3, #0
 80096c2:	9309      	str	r3, [sp, #36]	; 0x24
 80096c4:	2320      	movs	r3, #32
 80096c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ce:	2330      	movs	r3, #48	; 0x30
 80096d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009894 <_vfiprintf_r+0x24c>
 80096d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096d8:	f04f 0901 	mov.w	r9, #1
 80096dc:	4623      	mov	r3, r4
 80096de:	469a      	mov	sl, r3
 80096e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e4:	b10a      	cbz	r2, 80096ea <_vfiprintf_r+0xa2>
 80096e6:	2a25      	cmp	r2, #37	; 0x25
 80096e8:	d1f9      	bne.n	80096de <_vfiprintf_r+0x96>
 80096ea:	ebba 0b04 	subs.w	fp, sl, r4
 80096ee:	d00b      	beq.n	8009708 <_vfiprintf_r+0xc0>
 80096f0:	465b      	mov	r3, fp
 80096f2:	4622      	mov	r2, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7ff ff93 	bl	8009622 <__sfputs_r>
 80096fc:	3001      	adds	r0, #1
 80096fe:	f000 80aa 	beq.w	8009856 <_vfiprintf_r+0x20e>
 8009702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009704:	445a      	add	r2, fp
 8009706:	9209      	str	r2, [sp, #36]	; 0x24
 8009708:	f89a 3000 	ldrb.w	r3, [sl]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 80a2 	beq.w	8009856 <_vfiprintf_r+0x20e>
 8009712:	2300      	movs	r3, #0
 8009714:	f04f 32ff 	mov.w	r2, #4294967295
 8009718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971c:	f10a 0a01 	add.w	sl, sl, #1
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	9307      	str	r3, [sp, #28]
 8009724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009728:	931a      	str	r3, [sp, #104]	; 0x68
 800972a:	4654      	mov	r4, sl
 800972c:	2205      	movs	r2, #5
 800972e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009732:	4858      	ldr	r0, [pc, #352]	; (8009894 <_vfiprintf_r+0x24c>)
 8009734:	f7f6 fd8c 	bl	8000250 <memchr>
 8009738:	9a04      	ldr	r2, [sp, #16]
 800973a:	b9d8      	cbnz	r0, 8009774 <_vfiprintf_r+0x12c>
 800973c:	06d1      	lsls	r1, r2, #27
 800973e:	bf44      	itt	mi
 8009740:	2320      	movmi	r3, #32
 8009742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009746:	0713      	lsls	r3, r2, #28
 8009748:	bf44      	itt	mi
 800974a:	232b      	movmi	r3, #43	; 0x2b
 800974c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009750:	f89a 3000 	ldrb.w	r3, [sl]
 8009754:	2b2a      	cmp	r3, #42	; 0x2a
 8009756:	d015      	beq.n	8009784 <_vfiprintf_r+0x13c>
 8009758:	9a07      	ldr	r2, [sp, #28]
 800975a:	4654      	mov	r4, sl
 800975c:	2000      	movs	r0, #0
 800975e:	f04f 0c0a 	mov.w	ip, #10
 8009762:	4621      	mov	r1, r4
 8009764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009768:	3b30      	subs	r3, #48	; 0x30
 800976a:	2b09      	cmp	r3, #9
 800976c:	d94e      	bls.n	800980c <_vfiprintf_r+0x1c4>
 800976e:	b1b0      	cbz	r0, 800979e <_vfiprintf_r+0x156>
 8009770:	9207      	str	r2, [sp, #28]
 8009772:	e014      	b.n	800979e <_vfiprintf_r+0x156>
 8009774:	eba0 0308 	sub.w	r3, r0, r8
 8009778:	fa09 f303 	lsl.w	r3, r9, r3
 800977c:	4313      	orrs	r3, r2
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	46a2      	mov	sl, r4
 8009782:	e7d2      	b.n	800972a <_vfiprintf_r+0xe2>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	1d19      	adds	r1, r3, #4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	9103      	str	r1, [sp, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfbb      	ittet	lt
 8009790:	425b      	neglt	r3, r3
 8009792:	f042 0202 	orrlt.w	r2, r2, #2
 8009796:	9307      	strge	r3, [sp, #28]
 8009798:	9307      	strlt	r3, [sp, #28]
 800979a:	bfb8      	it	lt
 800979c:	9204      	strlt	r2, [sp, #16]
 800979e:	7823      	ldrb	r3, [r4, #0]
 80097a0:	2b2e      	cmp	r3, #46	; 0x2e
 80097a2:	d10c      	bne.n	80097be <_vfiprintf_r+0x176>
 80097a4:	7863      	ldrb	r3, [r4, #1]
 80097a6:	2b2a      	cmp	r3, #42	; 0x2a
 80097a8:	d135      	bne.n	8009816 <_vfiprintf_r+0x1ce>
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	1d1a      	adds	r2, r3, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	9203      	str	r2, [sp, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	bfb8      	it	lt
 80097b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ba:	3402      	adds	r4, #2
 80097bc:	9305      	str	r3, [sp, #20]
 80097be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098a4 <_vfiprintf_r+0x25c>
 80097c2:	7821      	ldrb	r1, [r4, #0]
 80097c4:	2203      	movs	r2, #3
 80097c6:	4650      	mov	r0, sl
 80097c8:	f7f6 fd42 	bl	8000250 <memchr>
 80097cc:	b140      	cbz	r0, 80097e0 <_vfiprintf_r+0x198>
 80097ce:	2340      	movs	r3, #64	; 0x40
 80097d0:	eba0 000a 	sub.w	r0, r0, sl
 80097d4:	fa03 f000 	lsl.w	r0, r3, r0
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	4303      	orrs	r3, r0
 80097dc:	3401      	adds	r4, #1
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e4:	482c      	ldr	r0, [pc, #176]	; (8009898 <_vfiprintf_r+0x250>)
 80097e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ea:	2206      	movs	r2, #6
 80097ec:	f7f6 fd30 	bl	8000250 <memchr>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d03f      	beq.n	8009874 <_vfiprintf_r+0x22c>
 80097f4:	4b29      	ldr	r3, [pc, #164]	; (800989c <_vfiprintf_r+0x254>)
 80097f6:	bb1b      	cbnz	r3, 8009840 <_vfiprintf_r+0x1f8>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	3307      	adds	r3, #7
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	3308      	adds	r3, #8
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009806:	443b      	add	r3, r7
 8009808:	9309      	str	r3, [sp, #36]	; 0x24
 800980a:	e767      	b.n	80096dc <_vfiprintf_r+0x94>
 800980c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009810:	460c      	mov	r4, r1
 8009812:	2001      	movs	r0, #1
 8009814:	e7a5      	b.n	8009762 <_vfiprintf_r+0x11a>
 8009816:	2300      	movs	r3, #0
 8009818:	3401      	adds	r4, #1
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	4619      	mov	r1, r3
 800981e:	f04f 0c0a 	mov.w	ip, #10
 8009822:	4620      	mov	r0, r4
 8009824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009828:	3a30      	subs	r2, #48	; 0x30
 800982a:	2a09      	cmp	r2, #9
 800982c:	d903      	bls.n	8009836 <_vfiprintf_r+0x1ee>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0c5      	beq.n	80097be <_vfiprintf_r+0x176>
 8009832:	9105      	str	r1, [sp, #20]
 8009834:	e7c3      	b.n	80097be <_vfiprintf_r+0x176>
 8009836:	fb0c 2101 	mla	r1, ip, r1, r2
 800983a:	4604      	mov	r4, r0
 800983c:	2301      	movs	r3, #1
 800983e:	e7f0      	b.n	8009822 <_vfiprintf_r+0x1da>
 8009840:	ab03      	add	r3, sp, #12
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	462a      	mov	r2, r5
 8009846:	4b16      	ldr	r3, [pc, #88]	; (80098a0 <_vfiprintf_r+0x258>)
 8009848:	a904      	add	r1, sp, #16
 800984a:	4630      	mov	r0, r6
 800984c:	f3af 8000 	nop.w
 8009850:	4607      	mov	r7, r0
 8009852:	1c78      	adds	r0, r7, #1
 8009854:	d1d6      	bne.n	8009804 <_vfiprintf_r+0x1bc>
 8009856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009858:	07d9      	lsls	r1, r3, #31
 800985a:	d405      	bmi.n	8009868 <_vfiprintf_r+0x220>
 800985c:	89ab      	ldrh	r3, [r5, #12]
 800985e:	059a      	lsls	r2, r3, #22
 8009860:	d402      	bmi.n	8009868 <_vfiprintf_r+0x220>
 8009862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009864:	f000 fc35 	bl	800a0d2 <__retarget_lock_release_recursive>
 8009868:	89ab      	ldrh	r3, [r5, #12]
 800986a:	065b      	lsls	r3, r3, #25
 800986c:	f53f af12 	bmi.w	8009694 <_vfiprintf_r+0x4c>
 8009870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009872:	e711      	b.n	8009698 <_vfiprintf_r+0x50>
 8009874:	ab03      	add	r3, sp, #12
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	462a      	mov	r2, r5
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <_vfiprintf_r+0x258>)
 800987c:	a904      	add	r1, sp, #16
 800987e:	4630      	mov	r0, r6
 8009880:	f000 f880 	bl	8009984 <_printf_i>
 8009884:	e7e4      	b.n	8009850 <_vfiprintf_r+0x208>
 8009886:	bf00      	nop
 8009888:	0800a89c 	.word	0x0800a89c
 800988c:	0800a8bc 	.word	0x0800a8bc
 8009890:	0800a87c 	.word	0x0800a87c
 8009894:	0800a849 	.word	0x0800a849
 8009898:	0800a853 	.word	0x0800a853
 800989c:	00000000 	.word	0x00000000
 80098a0:	08009623 	.word	0x08009623
 80098a4:	0800a84f 	.word	0x0800a84f

080098a8 <_printf_common>:
 80098a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	4616      	mov	r6, r2
 80098ae:	4699      	mov	r9, r3
 80098b0:	688a      	ldr	r2, [r1, #8]
 80098b2:	690b      	ldr	r3, [r1, #16]
 80098b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bfb8      	it	lt
 80098bc:	4613      	movlt	r3, r2
 80098be:	6033      	str	r3, [r6, #0]
 80098c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098c4:	4607      	mov	r7, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	b10a      	cbz	r2, 80098ce <_printf_common+0x26>
 80098ca:	3301      	adds	r3, #1
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	0699      	lsls	r1, r3, #26
 80098d2:	bf42      	ittt	mi
 80098d4:	6833      	ldrmi	r3, [r6, #0]
 80098d6:	3302      	addmi	r3, #2
 80098d8:	6033      	strmi	r3, [r6, #0]
 80098da:	6825      	ldr	r5, [r4, #0]
 80098dc:	f015 0506 	ands.w	r5, r5, #6
 80098e0:	d106      	bne.n	80098f0 <_printf_common+0x48>
 80098e2:	f104 0a19 	add.w	sl, r4, #25
 80098e6:	68e3      	ldr	r3, [r4, #12]
 80098e8:	6832      	ldr	r2, [r6, #0]
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	dc26      	bgt.n	800993e <_printf_common+0x96>
 80098f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098f4:	1e13      	subs	r3, r2, #0
 80098f6:	6822      	ldr	r2, [r4, #0]
 80098f8:	bf18      	it	ne
 80098fa:	2301      	movne	r3, #1
 80098fc:	0692      	lsls	r2, r2, #26
 80098fe:	d42b      	bmi.n	8009958 <_printf_common+0xb0>
 8009900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009904:	4649      	mov	r1, r9
 8009906:	4638      	mov	r0, r7
 8009908:	47c0      	blx	r8
 800990a:	3001      	adds	r0, #1
 800990c:	d01e      	beq.n	800994c <_printf_common+0xa4>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	68e5      	ldr	r5, [r4, #12]
 8009912:	6832      	ldr	r2, [r6, #0]
 8009914:	f003 0306 	and.w	r3, r3, #6
 8009918:	2b04      	cmp	r3, #4
 800991a:	bf08      	it	eq
 800991c:	1aad      	subeq	r5, r5, r2
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	bf0c      	ite	eq
 8009924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009928:	2500      	movne	r5, #0
 800992a:	4293      	cmp	r3, r2
 800992c:	bfc4      	itt	gt
 800992e:	1a9b      	subgt	r3, r3, r2
 8009930:	18ed      	addgt	r5, r5, r3
 8009932:	2600      	movs	r6, #0
 8009934:	341a      	adds	r4, #26
 8009936:	42b5      	cmp	r5, r6
 8009938:	d11a      	bne.n	8009970 <_printf_common+0xc8>
 800993a:	2000      	movs	r0, #0
 800993c:	e008      	b.n	8009950 <_printf_common+0xa8>
 800993e:	2301      	movs	r3, #1
 8009940:	4652      	mov	r2, sl
 8009942:	4649      	mov	r1, r9
 8009944:	4638      	mov	r0, r7
 8009946:	47c0      	blx	r8
 8009948:	3001      	adds	r0, #1
 800994a:	d103      	bne.n	8009954 <_printf_common+0xac>
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009954:	3501      	adds	r5, #1
 8009956:	e7c6      	b.n	80098e6 <_printf_common+0x3e>
 8009958:	18e1      	adds	r1, r4, r3
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	2030      	movs	r0, #48	; 0x30
 800995e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009962:	4422      	add	r2, r4
 8009964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800996c:	3302      	adds	r3, #2
 800996e:	e7c7      	b.n	8009900 <_printf_common+0x58>
 8009970:	2301      	movs	r3, #1
 8009972:	4622      	mov	r2, r4
 8009974:	4649      	mov	r1, r9
 8009976:	4638      	mov	r0, r7
 8009978:	47c0      	blx	r8
 800997a:	3001      	adds	r0, #1
 800997c:	d0e6      	beq.n	800994c <_printf_common+0xa4>
 800997e:	3601      	adds	r6, #1
 8009980:	e7d9      	b.n	8009936 <_printf_common+0x8e>
	...

08009984 <_printf_i>:
 8009984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	7e0f      	ldrb	r7, [r1, #24]
 800998a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800998c:	2f78      	cmp	r7, #120	; 0x78
 800998e:	4691      	mov	r9, r2
 8009990:	4680      	mov	r8, r0
 8009992:	460c      	mov	r4, r1
 8009994:	469a      	mov	sl, r3
 8009996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800999a:	d807      	bhi.n	80099ac <_printf_i+0x28>
 800999c:	2f62      	cmp	r7, #98	; 0x62
 800999e:	d80a      	bhi.n	80099b6 <_printf_i+0x32>
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	f000 80d8 	beq.w	8009b56 <_printf_i+0x1d2>
 80099a6:	2f58      	cmp	r7, #88	; 0x58
 80099a8:	f000 80a3 	beq.w	8009af2 <_printf_i+0x16e>
 80099ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099b4:	e03a      	b.n	8009a2c <_printf_i+0xa8>
 80099b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ba:	2b15      	cmp	r3, #21
 80099bc:	d8f6      	bhi.n	80099ac <_printf_i+0x28>
 80099be:	a101      	add	r1, pc, #4	; (adr r1, 80099c4 <_printf_i+0x40>)
 80099c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c4:	08009a1d 	.word	0x08009a1d
 80099c8:	08009a31 	.word	0x08009a31
 80099cc:	080099ad 	.word	0x080099ad
 80099d0:	080099ad 	.word	0x080099ad
 80099d4:	080099ad 	.word	0x080099ad
 80099d8:	080099ad 	.word	0x080099ad
 80099dc:	08009a31 	.word	0x08009a31
 80099e0:	080099ad 	.word	0x080099ad
 80099e4:	080099ad 	.word	0x080099ad
 80099e8:	080099ad 	.word	0x080099ad
 80099ec:	080099ad 	.word	0x080099ad
 80099f0:	08009b3d 	.word	0x08009b3d
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009b1f 	.word	0x08009b1f
 80099fc:	080099ad 	.word	0x080099ad
 8009a00:	080099ad 	.word	0x080099ad
 8009a04:	08009b5f 	.word	0x08009b5f
 8009a08:	080099ad 	.word	0x080099ad
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099ad 	.word	0x080099ad
 8009a14:	080099ad 	.word	0x080099ad
 8009a18:	08009b27 	.word	0x08009b27
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	602a      	str	r2, [r5, #0]
 8009a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e0a3      	b.n	8009b78 <_printf_i+0x1f4>
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	6829      	ldr	r1, [r5, #0]
 8009a34:	0606      	lsls	r6, r0, #24
 8009a36:	f101 0304 	add.w	r3, r1, #4
 8009a3a:	d50a      	bpl.n	8009a52 <_printf_i+0xce>
 8009a3c:	680e      	ldr	r6, [r1, #0]
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	da03      	bge.n	8009a4c <_printf_i+0xc8>
 8009a44:	232d      	movs	r3, #45	; 0x2d
 8009a46:	4276      	negs	r6, r6
 8009a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a4c:	485e      	ldr	r0, [pc, #376]	; (8009bc8 <_printf_i+0x244>)
 8009a4e:	230a      	movs	r3, #10
 8009a50:	e019      	b.n	8009a86 <_printf_i+0x102>
 8009a52:	680e      	ldr	r6, [r1, #0]
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a5a:	bf18      	it	ne
 8009a5c:	b236      	sxthne	r6, r6
 8009a5e:	e7ef      	b.n	8009a40 <_printf_i+0xbc>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	6820      	ldr	r0, [r4, #0]
 8009a64:	1d19      	adds	r1, r3, #4
 8009a66:	6029      	str	r1, [r5, #0]
 8009a68:	0601      	lsls	r1, r0, #24
 8009a6a:	d501      	bpl.n	8009a70 <_printf_i+0xec>
 8009a6c:	681e      	ldr	r6, [r3, #0]
 8009a6e:	e002      	b.n	8009a76 <_printf_i+0xf2>
 8009a70:	0646      	lsls	r6, r0, #25
 8009a72:	d5fb      	bpl.n	8009a6c <_printf_i+0xe8>
 8009a74:	881e      	ldrh	r6, [r3, #0]
 8009a76:	4854      	ldr	r0, [pc, #336]	; (8009bc8 <_printf_i+0x244>)
 8009a78:	2f6f      	cmp	r7, #111	; 0x6f
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2308      	moveq	r3, #8
 8009a7e:	230a      	movne	r3, #10
 8009a80:	2100      	movs	r1, #0
 8009a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a86:	6865      	ldr	r5, [r4, #4]
 8009a88:	60a5      	str	r5, [r4, #8]
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	bfa2      	ittt	ge
 8009a8e:	6821      	ldrge	r1, [r4, #0]
 8009a90:	f021 0104 	bicge.w	r1, r1, #4
 8009a94:	6021      	strge	r1, [r4, #0]
 8009a96:	b90e      	cbnz	r6, 8009a9c <_printf_i+0x118>
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	d04d      	beq.n	8009b38 <_printf_i+0x1b4>
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8009aa6:	5dc7      	ldrb	r7, [r0, r7]
 8009aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009aac:	4637      	mov	r7, r6
 8009aae:	42bb      	cmp	r3, r7
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	d9f4      	bls.n	8009a9e <_printf_i+0x11a>
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d10b      	bne.n	8009ad0 <_printf_i+0x14c>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	07de      	lsls	r6, r3, #31
 8009abc:	d508      	bpl.n	8009ad0 <_printf_i+0x14c>
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4299      	cmp	r1, r3
 8009ac4:	bfde      	ittt	le
 8009ac6:	2330      	movle	r3, #48	; 0x30
 8009ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ad0:	1b52      	subs	r2, r2, r5
 8009ad2:	6122      	str	r2, [r4, #16]
 8009ad4:	f8cd a000 	str.w	sl, [sp]
 8009ad8:	464b      	mov	r3, r9
 8009ada:	aa03      	add	r2, sp, #12
 8009adc:	4621      	mov	r1, r4
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f7ff fee2 	bl	80098a8 <_printf_common>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d14c      	bne.n	8009b82 <_printf_i+0x1fe>
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	b004      	add	sp, #16
 8009aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af2:	4835      	ldr	r0, [pc, #212]	; (8009bc8 <_printf_i+0x244>)
 8009af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b00:	6029      	str	r1, [r5, #0]
 8009b02:	061d      	lsls	r5, r3, #24
 8009b04:	d514      	bpl.n	8009b30 <_printf_i+0x1ac>
 8009b06:	07df      	lsls	r7, r3, #31
 8009b08:	bf44      	itt	mi
 8009b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b0e:	6023      	strmi	r3, [r4, #0]
 8009b10:	b91e      	cbnz	r6, 8009b1a <_printf_i+0x196>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f023 0320 	bic.w	r3, r3, #32
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	2310      	movs	r3, #16
 8009b1c:	e7b0      	b.n	8009a80 <_printf_i+0xfc>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	f043 0320 	orr.w	r3, r3, #32
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	2378      	movs	r3, #120	; 0x78
 8009b28:	4828      	ldr	r0, [pc, #160]	; (8009bcc <_printf_i+0x248>)
 8009b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b2e:	e7e3      	b.n	8009af8 <_printf_i+0x174>
 8009b30:	0659      	lsls	r1, r3, #25
 8009b32:	bf48      	it	mi
 8009b34:	b2b6      	uxthmi	r6, r6
 8009b36:	e7e6      	b.n	8009b06 <_printf_i+0x182>
 8009b38:	4615      	mov	r5, r2
 8009b3a:	e7bb      	b.n	8009ab4 <_printf_i+0x130>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	6826      	ldr	r6, [r4, #0]
 8009b40:	6961      	ldr	r1, [r4, #20]
 8009b42:	1d18      	adds	r0, r3, #4
 8009b44:	6028      	str	r0, [r5, #0]
 8009b46:	0635      	lsls	r5, r6, #24
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	d501      	bpl.n	8009b50 <_printf_i+0x1cc>
 8009b4c:	6019      	str	r1, [r3, #0]
 8009b4e:	e002      	b.n	8009b56 <_printf_i+0x1d2>
 8009b50:	0670      	lsls	r0, r6, #25
 8009b52:	d5fb      	bpl.n	8009b4c <_printf_i+0x1c8>
 8009b54:	8019      	strh	r1, [r3, #0]
 8009b56:	2300      	movs	r3, #0
 8009b58:	6123      	str	r3, [r4, #16]
 8009b5a:	4615      	mov	r5, r2
 8009b5c:	e7ba      	b.n	8009ad4 <_printf_i+0x150>
 8009b5e:	682b      	ldr	r3, [r5, #0]
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	602a      	str	r2, [r5, #0]
 8009b64:	681d      	ldr	r5, [r3, #0]
 8009b66:	6862      	ldr	r2, [r4, #4]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f7f6 fb70 	bl	8000250 <memchr>
 8009b70:	b108      	cbz	r0, 8009b76 <_printf_i+0x1f2>
 8009b72:	1b40      	subs	r0, r0, r5
 8009b74:	6060      	str	r0, [r4, #4]
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b80:	e7a8      	b.n	8009ad4 <_printf_i+0x150>
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	462a      	mov	r2, r5
 8009b86:	4649      	mov	r1, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	47d0      	blx	sl
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d0ab      	beq.n	8009ae8 <_printf_i+0x164>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	079b      	lsls	r3, r3, #30
 8009b94:	d413      	bmi.n	8009bbe <_printf_i+0x23a>
 8009b96:	68e0      	ldr	r0, [r4, #12]
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	4298      	cmp	r0, r3
 8009b9c:	bfb8      	it	lt
 8009b9e:	4618      	movlt	r0, r3
 8009ba0:	e7a4      	b.n	8009aec <_printf_i+0x168>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	4640      	mov	r0, r8
 8009baa:	47d0      	blx	sl
 8009bac:	3001      	adds	r0, #1
 8009bae:	d09b      	beq.n	8009ae8 <_printf_i+0x164>
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	68e3      	ldr	r3, [r4, #12]
 8009bb4:	9903      	ldr	r1, [sp, #12]
 8009bb6:	1a5b      	subs	r3, r3, r1
 8009bb8:	42ab      	cmp	r3, r5
 8009bba:	dcf2      	bgt.n	8009ba2 <_printf_i+0x21e>
 8009bbc:	e7eb      	b.n	8009b96 <_printf_i+0x212>
 8009bbe:	2500      	movs	r5, #0
 8009bc0:	f104 0619 	add.w	r6, r4, #25
 8009bc4:	e7f5      	b.n	8009bb2 <_printf_i+0x22e>
 8009bc6:	bf00      	nop
 8009bc8:	0800a85a 	.word	0x0800a85a
 8009bcc:	0800a86b 	.word	0x0800a86b

08009bd0 <__swbuf_r>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	460e      	mov	r6, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	b118      	cbz	r0, 8009be2 <__swbuf_r+0x12>
 8009bda:	6983      	ldr	r3, [r0, #24]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <__swbuf_r+0x12>
 8009bde:	f000 f9d9 	bl	8009f94 <__sinit>
 8009be2:	4b21      	ldr	r3, [pc, #132]	; (8009c68 <__swbuf_r+0x98>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	d12b      	bne.n	8009c40 <__swbuf_r+0x70>
 8009be8:	686c      	ldr	r4, [r5, #4]
 8009bea:	69a3      	ldr	r3, [r4, #24]
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	071a      	lsls	r2, r3, #28
 8009bf2:	d52f      	bpl.n	8009c54 <__swbuf_r+0x84>
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	b36b      	cbz	r3, 8009c54 <__swbuf_r+0x84>
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	6820      	ldr	r0, [r4, #0]
 8009bfc:	1ac0      	subs	r0, r0, r3
 8009bfe:	6963      	ldr	r3, [r4, #20]
 8009c00:	b2f6      	uxtb	r6, r6
 8009c02:	4283      	cmp	r3, r0
 8009c04:	4637      	mov	r7, r6
 8009c06:	dc04      	bgt.n	8009c12 <__swbuf_r+0x42>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 f92e 	bl	8009e6c <_fflush_r>
 8009c10:	bb30      	cbnz	r0, 8009c60 <__swbuf_r+0x90>
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	60a3      	str	r3, [r4, #8]
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	701e      	strb	r6, [r3, #0]
 8009c20:	6963      	ldr	r3, [r4, #20]
 8009c22:	3001      	adds	r0, #1
 8009c24:	4283      	cmp	r3, r0
 8009c26:	d004      	beq.n	8009c32 <__swbuf_r+0x62>
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	07db      	lsls	r3, r3, #31
 8009c2c:	d506      	bpl.n	8009c3c <__swbuf_r+0x6c>
 8009c2e:	2e0a      	cmp	r6, #10
 8009c30:	d104      	bne.n	8009c3c <__swbuf_r+0x6c>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	f000 f919 	bl	8009e6c <_fflush_r>
 8009c3a:	b988      	cbnz	r0, 8009c60 <__swbuf_r+0x90>
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <__swbuf_r+0x9c>)
 8009c42:	429c      	cmp	r4, r3
 8009c44:	d101      	bne.n	8009c4a <__swbuf_r+0x7a>
 8009c46:	68ac      	ldr	r4, [r5, #8]
 8009c48:	e7cf      	b.n	8009bea <__swbuf_r+0x1a>
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <__swbuf_r+0xa0>)
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	bf08      	it	eq
 8009c50:	68ec      	ldreq	r4, [r5, #12]
 8009c52:	e7ca      	b.n	8009bea <__swbuf_r+0x1a>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4628      	mov	r0, r5
 8009c58:	f000 f80c 	bl	8009c74 <__swsetup_r>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d0cb      	beq.n	8009bf8 <__swbuf_r+0x28>
 8009c60:	f04f 37ff 	mov.w	r7, #4294967295
 8009c64:	e7ea      	b.n	8009c3c <__swbuf_r+0x6c>
 8009c66:	bf00      	nop
 8009c68:	0800a89c 	.word	0x0800a89c
 8009c6c:	0800a8bc 	.word	0x0800a8bc
 8009c70:	0800a87c 	.word	0x0800a87c

08009c74 <__swsetup_r>:
 8009c74:	4b32      	ldr	r3, [pc, #200]	; (8009d40 <__swsetup_r+0xcc>)
 8009c76:	b570      	push	{r4, r5, r6, lr}
 8009c78:	681d      	ldr	r5, [r3, #0]
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	b125      	cbz	r5, 8009c8a <__swsetup_r+0x16>
 8009c80:	69ab      	ldr	r3, [r5, #24]
 8009c82:	b913      	cbnz	r3, 8009c8a <__swsetup_r+0x16>
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 f985 	bl	8009f94 <__sinit>
 8009c8a:	4b2e      	ldr	r3, [pc, #184]	; (8009d44 <__swsetup_r+0xd0>)
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	d10f      	bne.n	8009cb0 <__swsetup_r+0x3c>
 8009c90:	686c      	ldr	r4, [r5, #4]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c98:	0719      	lsls	r1, r3, #28
 8009c9a:	d42c      	bmi.n	8009cf6 <__swsetup_r+0x82>
 8009c9c:	06dd      	lsls	r5, r3, #27
 8009c9e:	d411      	bmi.n	8009cc4 <__swsetup_r+0x50>
 8009ca0:	2309      	movs	r3, #9
 8009ca2:	6033      	str	r3, [r6, #0]
 8009ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cae:	e03e      	b.n	8009d2e <__swsetup_r+0xba>
 8009cb0:	4b25      	ldr	r3, [pc, #148]	; (8009d48 <__swsetup_r+0xd4>)
 8009cb2:	429c      	cmp	r4, r3
 8009cb4:	d101      	bne.n	8009cba <__swsetup_r+0x46>
 8009cb6:	68ac      	ldr	r4, [r5, #8]
 8009cb8:	e7eb      	b.n	8009c92 <__swsetup_r+0x1e>
 8009cba:	4b24      	ldr	r3, [pc, #144]	; (8009d4c <__swsetup_r+0xd8>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	bf08      	it	eq
 8009cc0:	68ec      	ldreq	r4, [r5, #12]
 8009cc2:	e7e6      	b.n	8009c92 <__swsetup_r+0x1e>
 8009cc4:	0758      	lsls	r0, r3, #29
 8009cc6:	d512      	bpl.n	8009cee <__swsetup_r+0x7a>
 8009cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cca:	b141      	cbz	r1, 8009cde <__swsetup_r+0x6a>
 8009ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cd0:	4299      	cmp	r1, r3
 8009cd2:	d002      	beq.n	8009cda <__swsetup_r+0x66>
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff fc41 	bl	800955c <_free_r>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	6063      	str	r3, [r4, #4]
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f043 0308 	orr.w	r3, r3, #8
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	6923      	ldr	r3, [r4, #16]
 8009cf8:	b94b      	cbnz	r3, 8009d0e <__swsetup_r+0x9a>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d04:	d003      	beq.n	8009d0e <__swsetup_r+0x9a>
 8009d06:	4621      	mov	r1, r4
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 fa09 	bl	800a120 <__smakebuf_r>
 8009d0e:	89a0      	ldrh	r0, [r4, #12]
 8009d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d14:	f010 0301 	ands.w	r3, r0, #1
 8009d18:	d00a      	beq.n	8009d30 <__swsetup_r+0xbc>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	6963      	ldr	r3, [r4, #20]
 8009d20:	425b      	negs	r3, r3
 8009d22:	61a3      	str	r3, [r4, #24]
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	b943      	cbnz	r3, 8009d3a <__swsetup_r+0xc6>
 8009d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d2c:	d1ba      	bne.n	8009ca4 <__swsetup_r+0x30>
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	0781      	lsls	r1, r0, #30
 8009d32:	bf58      	it	pl
 8009d34:	6963      	ldrpl	r3, [r4, #20]
 8009d36:	60a3      	str	r3, [r4, #8]
 8009d38:	e7f4      	b.n	8009d24 <__swsetup_r+0xb0>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	e7f7      	b.n	8009d2e <__swsetup_r+0xba>
 8009d3e:	bf00      	nop
 8009d40:	2000000c 	.word	0x2000000c
 8009d44:	0800a89c 	.word	0x0800a89c
 8009d48:	0800a8bc 	.word	0x0800a8bc
 8009d4c:	0800a87c 	.word	0x0800a87c

08009d50 <abort>:
 8009d50:	b508      	push	{r3, lr}
 8009d52:	2006      	movs	r0, #6
 8009d54:	f000 fa4c 	bl	800a1f0 <raise>
 8009d58:	2001      	movs	r0, #1
 8009d5a:	f7f8 f831 	bl	8001dc0 <_exit>
	...

08009d60 <__sflush_r>:
 8009d60:	898a      	ldrh	r2, [r1, #12]
 8009d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d66:	4605      	mov	r5, r0
 8009d68:	0710      	lsls	r0, r2, #28
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	d458      	bmi.n	8009e20 <__sflush_r+0xc0>
 8009d6e:	684b      	ldr	r3, [r1, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dc05      	bgt.n	8009d80 <__sflush_r+0x20>
 8009d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dc02      	bgt.n	8009d80 <__sflush_r+0x20>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d0f9      	beq.n	8009d7a <__sflush_r+0x1a>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d8c:	682f      	ldr	r7, [r5, #0]
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	d032      	beq.n	8009df8 <__sflush_r+0x98>
 8009d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	075a      	lsls	r2, r3, #29
 8009d98:	d505      	bpl.n	8009da6 <__sflush_r+0x46>
 8009d9a:	6863      	ldr	r3, [r4, #4]
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da0:	b10b      	cbz	r3, 8009da6 <__sflush_r+0x46>
 8009da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009da4:	1ac0      	subs	r0, r0, r3
 8009da6:	2300      	movs	r3, #0
 8009da8:	4602      	mov	r2, r0
 8009daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dac:	6a21      	ldr	r1, [r4, #32]
 8009dae:	4628      	mov	r0, r5
 8009db0:	47b0      	blx	r6
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	d106      	bne.n	8009dc6 <__sflush_r+0x66>
 8009db8:	6829      	ldr	r1, [r5, #0]
 8009dba:	291d      	cmp	r1, #29
 8009dbc:	d82c      	bhi.n	8009e18 <__sflush_r+0xb8>
 8009dbe:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <__sflush_r+0x108>)
 8009dc0:	40ca      	lsrs	r2, r1
 8009dc2:	07d6      	lsls	r6, r2, #31
 8009dc4:	d528      	bpl.n	8009e18 <__sflush_r+0xb8>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	6062      	str	r2, [r4, #4]
 8009dca:	04d9      	lsls	r1, r3, #19
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	d504      	bpl.n	8009ddc <__sflush_r+0x7c>
 8009dd2:	1c42      	adds	r2, r0, #1
 8009dd4:	d101      	bne.n	8009dda <__sflush_r+0x7a>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	b903      	cbnz	r3, 8009ddc <__sflush_r+0x7c>
 8009dda:	6560      	str	r0, [r4, #84]	; 0x54
 8009ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dde:	602f      	str	r7, [r5, #0]
 8009de0:	2900      	cmp	r1, #0
 8009de2:	d0ca      	beq.n	8009d7a <__sflush_r+0x1a>
 8009de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de8:	4299      	cmp	r1, r3
 8009dea:	d002      	beq.n	8009df2 <__sflush_r+0x92>
 8009dec:	4628      	mov	r0, r5
 8009dee:	f7ff fbb5 	bl	800955c <_free_r>
 8009df2:	2000      	movs	r0, #0
 8009df4:	6360      	str	r0, [r4, #52]	; 0x34
 8009df6:	e7c1      	b.n	8009d7c <__sflush_r+0x1c>
 8009df8:	6a21      	ldr	r1, [r4, #32]
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b0      	blx	r6
 8009e00:	1c41      	adds	r1, r0, #1
 8009e02:	d1c7      	bne.n	8009d94 <__sflush_r+0x34>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0c4      	beq.n	8009d94 <__sflush_r+0x34>
 8009e0a:	2b1d      	cmp	r3, #29
 8009e0c:	d001      	beq.n	8009e12 <__sflush_r+0xb2>
 8009e0e:	2b16      	cmp	r3, #22
 8009e10:	d101      	bne.n	8009e16 <__sflush_r+0xb6>
 8009e12:	602f      	str	r7, [r5, #0]
 8009e14:	e7b1      	b.n	8009d7a <__sflush_r+0x1a>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	e7ad      	b.n	8009d7c <__sflush_r+0x1c>
 8009e20:	690f      	ldr	r7, [r1, #16]
 8009e22:	2f00      	cmp	r7, #0
 8009e24:	d0a9      	beq.n	8009d7a <__sflush_r+0x1a>
 8009e26:	0793      	lsls	r3, r2, #30
 8009e28:	680e      	ldr	r6, [r1, #0]
 8009e2a:	bf08      	it	eq
 8009e2c:	694b      	ldreq	r3, [r1, #20]
 8009e2e:	600f      	str	r7, [r1, #0]
 8009e30:	bf18      	it	ne
 8009e32:	2300      	movne	r3, #0
 8009e34:	eba6 0807 	sub.w	r8, r6, r7
 8009e38:	608b      	str	r3, [r1, #8]
 8009e3a:	f1b8 0f00 	cmp.w	r8, #0
 8009e3e:	dd9c      	ble.n	8009d7a <__sflush_r+0x1a>
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e44:	4643      	mov	r3, r8
 8009e46:	463a      	mov	r2, r7
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b0      	blx	r6
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	dc06      	bgt.n	8009e5e <__sflush_r+0xfe>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	e78e      	b.n	8009d7c <__sflush_r+0x1c>
 8009e5e:	4407      	add	r7, r0
 8009e60:	eba8 0800 	sub.w	r8, r8, r0
 8009e64:	e7e9      	b.n	8009e3a <__sflush_r+0xda>
 8009e66:	bf00      	nop
 8009e68:	20400001 	.word	0x20400001

08009e6c <_fflush_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	690b      	ldr	r3, [r1, #16]
 8009e70:	4605      	mov	r5, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	b913      	cbnz	r3, 8009e7c <_fflush_r+0x10>
 8009e76:	2500      	movs	r5, #0
 8009e78:	4628      	mov	r0, r5
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	b118      	cbz	r0, 8009e86 <_fflush_r+0x1a>
 8009e7e:	6983      	ldr	r3, [r0, #24]
 8009e80:	b90b      	cbnz	r3, 8009e86 <_fflush_r+0x1a>
 8009e82:	f000 f887 	bl	8009f94 <__sinit>
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <_fflush_r+0x6c>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d11b      	bne.n	8009ec4 <_fflush_r+0x58>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0ef      	beq.n	8009e76 <_fflush_r+0xa>
 8009e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e98:	07d0      	lsls	r0, r2, #31
 8009e9a:	d404      	bmi.n	8009ea6 <_fflush_r+0x3a>
 8009e9c:	0599      	lsls	r1, r3, #22
 8009e9e:	d402      	bmi.n	8009ea6 <_fflush_r+0x3a>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 f915 	bl	800a0d0 <__retarget_lock_acquire_recursive>
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	f7ff ff59 	bl	8009d60 <__sflush_r>
 8009eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eb0:	07da      	lsls	r2, r3, #31
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	d4e0      	bmi.n	8009e78 <_fflush_r+0xc>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	059b      	lsls	r3, r3, #22
 8009eba:	d4dd      	bmi.n	8009e78 <_fflush_r+0xc>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ebe:	f000 f908 	bl	800a0d2 <__retarget_lock_release_recursive>
 8009ec2:	e7d9      	b.n	8009e78 <_fflush_r+0xc>
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <_fflush_r+0x70>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d101      	bne.n	8009ece <_fflush_r+0x62>
 8009eca:	68ac      	ldr	r4, [r5, #8]
 8009ecc:	e7df      	b.n	8009e8e <_fflush_r+0x22>
 8009ece:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <_fflush_r+0x74>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	bf08      	it	eq
 8009ed4:	68ec      	ldreq	r4, [r5, #12]
 8009ed6:	e7da      	b.n	8009e8e <_fflush_r+0x22>
 8009ed8:	0800a89c 	.word	0x0800a89c
 8009edc:	0800a8bc 	.word	0x0800a8bc
 8009ee0:	0800a87c 	.word	0x0800a87c

08009ee4 <std>:
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	4604      	mov	r4, r0
 8009eea:	e9c0 3300 	strd	r3, r3, [r0]
 8009eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ef2:	6083      	str	r3, [r0, #8]
 8009ef4:	8181      	strh	r1, [r0, #12]
 8009ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ef8:	81c2      	strh	r2, [r0, #14]
 8009efa:	6183      	str	r3, [r0, #24]
 8009efc:	4619      	mov	r1, r3
 8009efe:	2208      	movs	r2, #8
 8009f00:	305c      	adds	r0, #92	; 0x5c
 8009f02:	f7fd fb51 	bl	80075a8 <memset>
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <std+0x38>)
 8009f08:	6263      	str	r3, [r4, #36]	; 0x24
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <std+0x3c>)
 8009f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f0e:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <std+0x40>)
 8009f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f12:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <std+0x44>)
 8009f14:	6224      	str	r4, [r4, #32]
 8009f16:	6323      	str	r3, [r4, #48]	; 0x30
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop
 8009f1c:	0800a229 	.word	0x0800a229
 8009f20:	0800a24b 	.word	0x0800a24b
 8009f24:	0800a283 	.word	0x0800a283
 8009f28:	0800a2a7 	.word	0x0800a2a7

08009f2c <_cleanup_r>:
 8009f2c:	4901      	ldr	r1, [pc, #4]	; (8009f34 <_cleanup_r+0x8>)
 8009f2e:	f000 b8af 	b.w	800a090 <_fwalk_reent>
 8009f32:	bf00      	nop
 8009f34:	08009e6d 	.word	0x08009e6d

08009f38 <__sfmoreglue>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	2268      	movs	r2, #104	; 0x68
 8009f3c:	1e4d      	subs	r5, r1, #1
 8009f3e:	4355      	muls	r5, r2
 8009f40:	460e      	mov	r6, r1
 8009f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f46:	f7ff fa15 	bl	8009374 <_malloc_r>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	b140      	cbz	r0, 8009f60 <__sfmoreglue+0x28>
 8009f4e:	2100      	movs	r1, #0
 8009f50:	e9c0 1600 	strd	r1, r6, [r0]
 8009f54:	300c      	adds	r0, #12
 8009f56:	60a0      	str	r0, [r4, #8]
 8009f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f5c:	f7fd fb24 	bl	80075a8 <memset>
 8009f60:	4620      	mov	r0, r4
 8009f62:	bd70      	pop	{r4, r5, r6, pc}

08009f64 <__sfp_lock_acquire>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__sfp_lock_acquire+0x8>)
 8009f66:	f000 b8b3 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	200004e5 	.word	0x200004e5

08009f70 <__sfp_lock_release>:
 8009f70:	4801      	ldr	r0, [pc, #4]	; (8009f78 <__sfp_lock_release+0x8>)
 8009f72:	f000 b8ae 	b.w	800a0d2 <__retarget_lock_release_recursive>
 8009f76:	bf00      	nop
 8009f78:	200004e5 	.word	0x200004e5

08009f7c <__sinit_lock_acquire>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	; (8009f84 <__sinit_lock_acquire+0x8>)
 8009f7e:	f000 b8a7 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 8009f82:	bf00      	nop
 8009f84:	200004e6 	.word	0x200004e6

08009f88 <__sinit_lock_release>:
 8009f88:	4801      	ldr	r0, [pc, #4]	; (8009f90 <__sinit_lock_release+0x8>)
 8009f8a:	f000 b8a2 	b.w	800a0d2 <__retarget_lock_release_recursive>
 8009f8e:	bf00      	nop
 8009f90:	200004e6 	.word	0x200004e6

08009f94 <__sinit>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	4604      	mov	r4, r0
 8009f98:	f7ff fff0 	bl	8009f7c <__sinit_lock_acquire>
 8009f9c:	69a3      	ldr	r3, [r4, #24]
 8009f9e:	b11b      	cbz	r3, 8009fa8 <__sinit+0x14>
 8009fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa4:	f7ff bff0 	b.w	8009f88 <__sinit_lock_release>
 8009fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fac:	6523      	str	r3, [r4, #80]	; 0x50
 8009fae:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <__sinit+0x68>)
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <__sinit+0x6c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	bf04      	itt	eq
 8009fba:	2301      	moveq	r3, #1
 8009fbc:	61a3      	streq	r3, [r4, #24]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f820 	bl	800a004 <__sfp>
 8009fc4:	6060      	str	r0, [r4, #4]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 f81c 	bl	800a004 <__sfp>
 8009fcc:	60a0      	str	r0, [r4, #8]
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 f818 	bl	800a004 <__sfp>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	60e0      	str	r0, [r4, #12]
 8009fd8:	2104      	movs	r1, #4
 8009fda:	6860      	ldr	r0, [r4, #4]
 8009fdc:	f7ff ff82 	bl	8009ee4 <std>
 8009fe0:	68a0      	ldr	r0, [r4, #8]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	2109      	movs	r1, #9
 8009fe6:	f7ff ff7d 	bl	8009ee4 <std>
 8009fea:	68e0      	ldr	r0, [r4, #12]
 8009fec:	2202      	movs	r2, #2
 8009fee:	2112      	movs	r1, #18
 8009ff0:	f7ff ff78 	bl	8009ee4 <std>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	61a3      	str	r3, [r4, #24]
 8009ff8:	e7d2      	b.n	8009fa0 <__sinit+0xc>
 8009ffa:	bf00      	nop
 8009ffc:	0800a4ac 	.word	0x0800a4ac
 800a000:	08009f2d 	.word	0x08009f2d

0800a004 <__sfp>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	4607      	mov	r7, r0
 800a008:	f7ff ffac 	bl	8009f64 <__sfp_lock_acquire>
 800a00c:	4b1e      	ldr	r3, [pc, #120]	; (800a088 <__sfp+0x84>)
 800a00e:	681e      	ldr	r6, [r3, #0]
 800a010:	69b3      	ldr	r3, [r6, #24]
 800a012:	b913      	cbnz	r3, 800a01a <__sfp+0x16>
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff ffbd 	bl	8009f94 <__sinit>
 800a01a:	3648      	adds	r6, #72	; 0x48
 800a01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a020:	3b01      	subs	r3, #1
 800a022:	d503      	bpl.n	800a02c <__sfp+0x28>
 800a024:	6833      	ldr	r3, [r6, #0]
 800a026:	b30b      	cbz	r3, 800a06c <__sfp+0x68>
 800a028:	6836      	ldr	r6, [r6, #0]
 800a02a:	e7f7      	b.n	800a01c <__sfp+0x18>
 800a02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a030:	b9d5      	cbnz	r5, 800a068 <__sfp+0x64>
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <__sfp+0x88>)
 800a034:	60e3      	str	r3, [r4, #12]
 800a036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a03a:	6665      	str	r5, [r4, #100]	; 0x64
 800a03c:	f000 f847 	bl	800a0ce <__retarget_lock_init_recursive>
 800a040:	f7ff ff96 	bl	8009f70 <__sfp_lock_release>
 800a044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a04c:	6025      	str	r5, [r4, #0]
 800a04e:	61a5      	str	r5, [r4, #24]
 800a050:	2208      	movs	r2, #8
 800a052:	4629      	mov	r1, r5
 800a054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a058:	f7fd faa6 	bl	80075a8 <memset>
 800a05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a064:	4620      	mov	r0, r4
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a068:	3468      	adds	r4, #104	; 0x68
 800a06a:	e7d9      	b.n	800a020 <__sfp+0x1c>
 800a06c:	2104      	movs	r1, #4
 800a06e:	4638      	mov	r0, r7
 800a070:	f7ff ff62 	bl	8009f38 <__sfmoreglue>
 800a074:	4604      	mov	r4, r0
 800a076:	6030      	str	r0, [r6, #0]
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1d5      	bne.n	800a028 <__sfp+0x24>
 800a07c:	f7ff ff78 	bl	8009f70 <__sfp_lock_release>
 800a080:	230c      	movs	r3, #12
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	e7ee      	b.n	800a064 <__sfp+0x60>
 800a086:	bf00      	nop
 800a088:	0800a4ac 	.word	0x0800a4ac
 800a08c:	ffff0001 	.word	0xffff0001

0800a090 <_fwalk_reent>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	4606      	mov	r6, r0
 800a096:	4688      	mov	r8, r1
 800a098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a09c:	2700      	movs	r7, #0
 800a09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0a6:	d505      	bpl.n	800a0b4 <_fwalk_reent+0x24>
 800a0a8:	6824      	ldr	r4, [r4, #0]
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	d1f7      	bne.n	800a09e <_fwalk_reent+0xe>
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b4:	89ab      	ldrh	r3, [r5, #12]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d907      	bls.n	800a0ca <_fwalk_reent+0x3a>
 800a0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	d003      	beq.n	800a0ca <_fwalk_reent+0x3a>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	47c0      	blx	r8
 800a0c8:	4307      	orrs	r7, r0
 800a0ca:	3568      	adds	r5, #104	; 0x68
 800a0cc:	e7e9      	b.n	800a0a2 <_fwalk_reent+0x12>

0800a0ce <__retarget_lock_init_recursive>:
 800a0ce:	4770      	bx	lr

0800a0d0 <__retarget_lock_acquire_recursive>:
 800a0d0:	4770      	bx	lr

0800a0d2 <__retarget_lock_release_recursive>:
 800a0d2:	4770      	bx	lr

0800a0d4 <__swhatbuf_r>:
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	460e      	mov	r6, r1
 800a0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	b096      	sub	sp, #88	; 0x58
 800a0e0:	4614      	mov	r4, r2
 800a0e2:	461d      	mov	r5, r3
 800a0e4:	da08      	bge.n	800a0f8 <__swhatbuf_r+0x24>
 800a0e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	602a      	str	r2, [r5, #0]
 800a0ee:	061a      	lsls	r2, r3, #24
 800a0f0:	d410      	bmi.n	800a114 <__swhatbuf_r+0x40>
 800a0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f6:	e00e      	b.n	800a116 <__swhatbuf_r+0x42>
 800a0f8:	466a      	mov	r2, sp
 800a0fa:	f000 f8fb 	bl	800a2f4 <_fstat_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	dbf1      	blt.n	800a0e6 <__swhatbuf_r+0x12>
 800a102:	9a01      	ldr	r2, [sp, #4]
 800a104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a10c:	425a      	negs	r2, r3
 800a10e:	415a      	adcs	r2, r3
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	e7ee      	b.n	800a0f2 <__swhatbuf_r+0x1e>
 800a114:	2340      	movs	r3, #64	; 0x40
 800a116:	2000      	movs	r0, #0
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	b016      	add	sp, #88	; 0x58
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a120 <__smakebuf_r>:
 800a120:	898b      	ldrh	r3, [r1, #12]
 800a122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a124:	079d      	lsls	r5, r3, #30
 800a126:	4606      	mov	r6, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	d507      	bpl.n	800a13c <__smakebuf_r+0x1c>
 800a12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	2301      	movs	r3, #1
 800a136:	6163      	str	r3, [r4, #20]
 800a138:	b002      	add	sp, #8
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	ab01      	add	r3, sp, #4
 800a13e:	466a      	mov	r2, sp
 800a140:	f7ff ffc8 	bl	800a0d4 <__swhatbuf_r>
 800a144:	9900      	ldr	r1, [sp, #0]
 800a146:	4605      	mov	r5, r0
 800a148:	4630      	mov	r0, r6
 800a14a:	f7ff f913 	bl	8009374 <_malloc_r>
 800a14e:	b948      	cbnz	r0, 800a164 <__smakebuf_r+0x44>
 800a150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a154:	059a      	lsls	r2, r3, #22
 800a156:	d4ef      	bmi.n	800a138 <__smakebuf_r+0x18>
 800a158:	f023 0303 	bic.w	r3, r3, #3
 800a15c:	f043 0302 	orr.w	r3, r3, #2
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	e7e3      	b.n	800a12c <__smakebuf_r+0xc>
 800a164:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <__smakebuf_r+0x7c>)
 800a166:	62b3      	str	r3, [r6, #40]	; 0x28
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	6020      	str	r0, [r4, #0]
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	6163      	str	r3, [r4, #20]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	6120      	str	r0, [r4, #16]
 800a17a:	b15b      	cbz	r3, 800a194 <__smakebuf_r+0x74>
 800a17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 f8c9 	bl	800a318 <_isatty_r>
 800a186:	b128      	cbz	r0, 800a194 <__smakebuf_r+0x74>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	89a0      	ldrh	r0, [r4, #12]
 800a196:	4305      	orrs	r5, r0
 800a198:	81a5      	strh	r5, [r4, #12]
 800a19a:	e7cd      	b.n	800a138 <__smakebuf_r+0x18>
 800a19c:	08009f2d 	.word	0x08009f2d

0800a1a0 <_raise_r>:
 800a1a0:	291f      	cmp	r1, #31
 800a1a2:	b538      	push	{r3, r4, r5, lr}
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	460d      	mov	r5, r1
 800a1a8:	d904      	bls.n	800a1b4 <_raise_r+0x14>
 800a1aa:	2316      	movs	r3, #22
 800a1ac:	6003      	str	r3, [r0, #0]
 800a1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1b6:	b112      	cbz	r2, 800a1be <_raise_r+0x1e>
 800a1b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1bc:	b94b      	cbnz	r3, 800a1d2 <_raise_r+0x32>
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 f830 	bl	800a224 <_getpid_r>
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1ce:	f000 b817 	b.w	800a200 <_kill_r>
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d00a      	beq.n	800a1ec <_raise_r+0x4c>
 800a1d6:	1c59      	adds	r1, r3, #1
 800a1d8:	d103      	bne.n	800a1e2 <_raise_r+0x42>
 800a1da:	2316      	movs	r3, #22
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	2001      	movs	r0, #1
 800a1e0:	e7e7      	b.n	800a1b2 <_raise_r+0x12>
 800a1e2:	2400      	movs	r4, #0
 800a1e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	4798      	blx	r3
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	e7e0      	b.n	800a1b2 <_raise_r+0x12>

0800a1f0 <raise>:
 800a1f0:	4b02      	ldr	r3, [pc, #8]	; (800a1fc <raise+0xc>)
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	6818      	ldr	r0, [r3, #0]
 800a1f6:	f7ff bfd3 	b.w	800a1a0 <_raise_r>
 800a1fa:	bf00      	nop
 800a1fc:	2000000c 	.word	0x2000000c

0800a200 <_kill_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	; (800a220 <_kill_r+0x20>)
 800a204:	2300      	movs	r3, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	f7f7 fdc7 	bl	8001da0 <_kill>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	d102      	bne.n	800a21c <_kill_r+0x1c>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	b103      	cbz	r3, 800a21c <_kill_r+0x1c>
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	bf00      	nop
 800a220:	200004e0 	.word	0x200004e0

0800a224 <_getpid_r>:
 800a224:	f7f7 bdb4 	b.w	8001d90 <_getpid>

0800a228 <__sread>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	460c      	mov	r4, r1
 800a22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a230:	f000 f894 	bl	800a35c <_read_r>
 800a234:	2800      	cmp	r0, #0
 800a236:	bfab      	itete	ge
 800a238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a23a:	89a3      	ldrhlt	r3, [r4, #12]
 800a23c:	181b      	addge	r3, r3, r0
 800a23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a242:	bfac      	ite	ge
 800a244:	6563      	strge	r3, [r4, #84]	; 0x54
 800a246:	81a3      	strhlt	r3, [r4, #12]
 800a248:	bd10      	pop	{r4, pc}

0800a24a <__swrite>:
 800a24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24e:	461f      	mov	r7, r3
 800a250:	898b      	ldrh	r3, [r1, #12]
 800a252:	05db      	lsls	r3, r3, #23
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	4616      	mov	r6, r2
 800a25a:	d505      	bpl.n	800a268 <__swrite+0x1e>
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	2302      	movs	r3, #2
 800a262:	2200      	movs	r2, #0
 800a264:	f000 f868 	bl	800a338 <_lseek_r>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	4632      	mov	r2, r6
 800a276:	463b      	mov	r3, r7
 800a278:	4628      	mov	r0, r5
 800a27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27e:	f000 b817 	b.w	800a2b0 <_write_r>

0800a282 <__sseek>:
 800a282:	b510      	push	{r4, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28a:	f000 f855 	bl	800a338 <_lseek_r>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	bf15      	itete	ne
 800a294:	6560      	strne	r0, [r4, #84]	; 0x54
 800a296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a29e:	81a3      	strheq	r3, [r4, #12]
 800a2a0:	bf18      	it	ne
 800a2a2:	81a3      	strhne	r3, [r4, #12]
 800a2a4:	bd10      	pop	{r4, pc}

0800a2a6 <__sclose>:
 800a2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2aa:	f000 b813 	b.w	800a2d4 <_close_r>
	...

0800a2b0 <_write_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d07      	ldr	r5, [pc, #28]	; (800a2d0 <_write_r+0x20>)
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	602a      	str	r2, [r5, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f7f7 fda5 	bl	8001e0e <_write>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_write_r+0x1e>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_write_r+0x1e>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	200004e0 	.word	0x200004e0

0800a2d4 <_close_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d06      	ldr	r5, [pc, #24]	; (800a2f0 <_close_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f7 fdb1 	bl	8001e46 <_close>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_close_r+0x1a>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_close_r+0x1a>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	200004e0 	.word	0x200004e0

0800a2f4 <_fstat_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d07      	ldr	r5, [pc, #28]	; (800a314 <_fstat_r+0x20>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	4611      	mov	r1, r2
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	f7f7 fdac 	bl	8001e5e <_fstat>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d102      	bne.n	800a310 <_fstat_r+0x1c>
 800a30a:	682b      	ldr	r3, [r5, #0]
 800a30c:	b103      	cbz	r3, 800a310 <_fstat_r+0x1c>
 800a30e:	6023      	str	r3, [r4, #0]
 800a310:	bd38      	pop	{r3, r4, r5, pc}
 800a312:	bf00      	nop
 800a314:	200004e0 	.word	0x200004e0

0800a318 <_isatty_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d06      	ldr	r5, [pc, #24]	; (800a334 <_isatty_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	f7f7 fdab 	bl	8001e7e <_isatty>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_isatty_r+0x1a>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_isatty_r+0x1a>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	200004e0 	.word	0x200004e0

0800a338 <_lseek_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4d07      	ldr	r5, [pc, #28]	; (800a358 <_lseek_r+0x20>)
 800a33c:	4604      	mov	r4, r0
 800a33e:	4608      	mov	r0, r1
 800a340:	4611      	mov	r1, r2
 800a342:	2200      	movs	r2, #0
 800a344:	602a      	str	r2, [r5, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	f7f7 fda4 	bl	8001e94 <_lseek>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d102      	bne.n	800a356 <_lseek_r+0x1e>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	b103      	cbz	r3, 800a356 <_lseek_r+0x1e>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	200004e0 	.word	0x200004e0

0800a35c <_read_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <_read_r+0x20>)
 800a360:	4604      	mov	r4, r0
 800a362:	4608      	mov	r0, r1
 800a364:	4611      	mov	r1, r2
 800a366:	2200      	movs	r2, #0
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f7f7 fd32 	bl	8001dd4 <_read>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_read_r+0x1e>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_read_r+0x1e>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	200004e0 	.word	0x200004e0

0800a380 <_init>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr

0800a38c <_fini>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr
