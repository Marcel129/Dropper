
siewnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc0  08006cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc8  08006cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cc8  08006cc8  00016cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  08006cdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006cdc  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162df  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c85  00000000  00000000  0003631b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021087  00000000  00000000  0003b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162cc  00000000  00000000  0005c26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec29  00000000  00000000  0007253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  001411b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006c64 	.word	0x08006c64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006c64 	.word	0x08006c64

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b974 	b.w	8000cf4 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468e      	mov	lr, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14d      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4694      	mov	ip, r2
 8000a36:	d969      	bls.n	8000b0c <__udivmoddi4+0xe8>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b152      	cbz	r2, 8000a54 <__udivmoddi4+0x30>
 8000a3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a42:	f1c2 0120 	rsb	r1, r2, #32
 8000a46:	fa20 f101 	lsr.w	r1, r0, r1
 8000a4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a52:	4094      	lsls	r4, r2
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	0c21      	lsrs	r1, r4, #16
 8000a5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a5e:	fa1f f78c 	uxth.w	r7, ip
 8000a62:	fb08 e316 	mls	r3, r8, r6, lr
 8000a66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a6a:	fb06 f107 	mul.w	r1, r6, r7
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a7a:	f080 811f 	bcs.w	8000cbc <__udivmoddi4+0x298>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 811c 	bls.w	8000cbc <__udivmoddi4+0x298>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3310 	mls	r3, r8, r0, r3
 8000a94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a98:	fb00 f707 	mul.w	r7, r0, r7
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	d90a      	bls.n	8000ab6 <__udivmoddi4+0x92>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa8:	f080 810a 	bcs.w	8000cc0 <__udivmoddi4+0x29c>
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	f240 8107 	bls.w	8000cc0 <__udivmoddi4+0x29c>
 8000ab2:	4464      	add	r4, ip
 8000ab4:	3802      	subs	r0, #2
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	1be4      	subs	r4, r4, r7
 8000abc:	2600      	movs	r6, #0
 8000abe:	b11d      	cbz	r5, 8000ac8 <__udivmoddi4+0xa4>
 8000ac0:	40d4      	lsrs	r4, r2
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0xc2>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	f000 80ef 	beq.w	8000cb6 <__udivmoddi4+0x292>
 8000ad8:	2600      	movs	r6, #0
 8000ada:	e9c5 0100 	strd	r0, r1, [r5]
 8000ade:	4630      	mov	r0, r6
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	fab3 f683 	clz	r6, r3
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d14a      	bne.n	8000b84 <__udivmoddi4+0x160>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xd4>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 80f9 	bhi.w	8000cea <__udivmoddi4+0x2c6>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb61 0303 	sbc.w	r3, r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	469e      	mov	lr, r3
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d0e0      	beq.n	8000ac8 <__udivmoddi4+0xa4>
 8000b06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b0a:	e7dd      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000b0c:	b902      	cbnz	r2, 8000b10 <__udivmoddi4+0xec>
 8000b0e:	deff      	udf	#255	; 0xff
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	f040 8092 	bne.w	8000c3e <__udivmoddi4+0x21a>
 8000b1a:	eba1 010c 	sub.w	r1, r1, ip
 8000b1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b22:	fa1f fe8c 	uxth.w	lr, ip
 8000b26:	2601      	movs	r6, #1
 8000b28:	0c20      	lsrs	r0, r4, #16
 8000b2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b36:	fb0e f003 	mul.w	r0, lr, r3
 8000b3a:	4288      	cmp	r0, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x12c>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x12a>
 8000b48:	4288      	cmp	r0, r1
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2c0>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	1a09      	subs	r1, r1, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b58:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b60:	fb0e fe00 	mul.w	lr, lr, r0
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x156>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x154>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 80bb 	bhi.w	8000cee <__udivmoddi4+0x2ca>
 8000b78:	4608      	mov	r0, r1
 8000b7a:	eba4 040e 	sub.w	r4, r4, lr
 8000b7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b82:	e79c      	b.n	8000abe <__udivmoddi4+0x9a>
 8000b84:	f1c6 0720 	rsb	r7, r6, #32
 8000b88:	40b3      	lsls	r3, r6
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa20 f407 	lsr.w	r4, r0, r7
 8000b96:	fa01 f306 	lsl.w	r3, r1, r6
 8000b9a:	431c      	orrs	r4, r3
 8000b9c:	40f9      	lsrs	r1, r7
 8000b9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ba6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000baa:	0c20      	lsrs	r0, r4, #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b8>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bcc:	f080 8088 	bcs.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f240 8085 	bls.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bda:	4461      	add	r1, ip
 8000bdc:	1a09      	subs	r1, r1, r0
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000be4:	fb09 1110 	mls	r1, r9, r0, r1
 8000be8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf0:	458e      	cmp	lr, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1e2>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfc:	d26c      	bcs.n	8000cd8 <__udivmoddi4+0x2b4>
 8000bfe:	458e      	cmp	lr, r1
 8000c00:	d96a      	bls.n	8000cd8 <__udivmoddi4+0x2b4>
 8000c02:	3802      	subs	r0, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c0e:	eba1 010e 	sub.w	r1, r1, lr
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	46c8      	mov	r8, r9
 8000c16:	46a6      	mov	lr, r4
 8000c18:	d356      	bcc.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c1a:	d053      	beq.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c1c:	b15d      	cbz	r5, 8000c36 <__udivmoddi4+0x212>
 8000c1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c22:	eb61 010e 	sbc.w	r1, r1, lr
 8000c26:	fa01 f707 	lsl.w	r7, r1, r7
 8000c2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c2e:	40f1      	lsrs	r1, r6
 8000c30:	431f      	orrs	r7, r3
 8000c32:	e9c5 7100 	strd	r7, r1, [r5]
 8000c36:	2600      	movs	r6, #0
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	40d8      	lsrs	r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	fa21 f303 	lsr.w	r3, r1, r3
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4301      	orrs	r1, r0
 8000c50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c60:	0c0b      	lsrs	r3, r1, #16
 8000c62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c66:	fb00 f60e 	mul.w	r6, r0, lr
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x260>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c7a:	d22f      	bcs.n	8000cdc <__udivmoddi4+0x2b8>
 8000c7c:	429e      	cmp	r6, r3
 8000c7e:	d92d      	bls.n	8000cdc <__udivmoddi4+0x2b8>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	b289      	uxth	r1, r1
 8000c88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb06 f30e 	mul.w	r3, r6, lr
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x28a>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ca4:	d216      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d914      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000caa:	3e02      	subs	r6, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cb4:	e738      	b.n	8000b28 <__udivmoddi4+0x104>
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e705      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e3      	b.n	8000a88 <__udivmoddi4+0x64>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6f8      	b.n	8000ab6 <__udivmoddi4+0x92>
 8000cc4:	454b      	cmp	r3, r9
 8000cc6:	d2a9      	bcs.n	8000c1c <__udivmoddi4+0x1f8>
 8000cc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ccc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7a3      	b.n	8000c1c <__udivmoddi4+0x1f8>
 8000cd4:	4646      	mov	r6, r8
 8000cd6:	e7ea      	b.n	8000cae <__udivmoddi4+0x28a>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	e794      	b.n	8000c06 <__udivmoddi4+0x1e2>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	e7d1      	b.n	8000c84 <__udivmoddi4+0x260>
 8000ce0:	46d0      	mov	r8, sl
 8000ce2:	e77b      	b.n	8000bdc <__udivmoddi4+0x1b8>
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	4461      	add	r1, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x12c>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e709      	b.n	8000b02 <__udivmoddi4+0xde>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	e742      	b.n	8000b7a <__udivmoddi4+0x156>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <UART_Init>:
#include "UART_communication.h"

UART_structure _dropper_UART;

void UART_Init(UART_HandleTypeDef *huart){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	clearRxBuffer();
 8000d00:	f000 f866 	bl	8000dd0 <clearRxBuffer>
	clearTxBuffer();
 8000d04:	f000 f88c 	bl	8000e20 <clearTxBuffer>

	_dropper_UART.UART_Handler = huart;
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <UART_Init+0x30>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	HAL_UART_Receive_IT(_dropper_UART.UART_Handler, &(_dropper_UART.rxTmpChar), 1);
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <UART_Init+0x30>)
 8000d12:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000d16:	2201      	movs	r2, #1
 8000d18:	4904      	ldr	r1, [pc, #16]	; (8000d2c <UART_Init+0x34>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 ff28 	bl	8004b70 <HAL_UART_Receive_IT>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000028 	.word	0x20000028
 8000d2c:	200001b8 	.word	0x200001b8

08000d30 <HAL_UART_RxCpltCallback>:

HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if(huart->Instance == _dropper_UART.UART_Handler->Instance){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d3e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d138      	bne.n	8000dba <HAL_UART_RxCpltCallback+0x8a>
		if(_dropper_UART.rxTmpChar == '\n' || _dropper_UART.rxTmpChar == '\r'){
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d4a:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000d4e:	2b0a      	cmp	r3, #10
 8000d50:	d004      	beq.n	8000d5c <HAL_UART_RxCpltCallback+0x2c>
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d54:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000d58:	2b0d      	cmp	r3, #13
 8000d5a:	d104      	bne.n	8000d66 <HAL_UART_RxCpltCallback+0x36>
			_dropper_UART.msgReadyToRead = true;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
 8000d64:	e021      	b.n	8000daa <HAL_UART_RxCpltCallback+0x7a>
		}
		else{
			_dropper_UART.rxBuffer[_dropper_UART.rxBuffCursor] = _dropper_UART.rxTmpChar;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d68:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d70:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			_dropper_UART.rxBuffCursor = ((++_dropper_UART.rxBuffCursor)%RX_BUFFER_SIZE);
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d7e:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d88:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000d8e:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d94:	fba2 1203 	umull	r1, r2, r2, r3
 8000d98:	0992      	lsrs	r2, r2, #6
 8000d9a:	21c8      	movs	r1, #200	; 0xc8
 8000d9c:	fb01 f202 	mul.w	r2, r1, r2
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000da6:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		}
		HAL_UART_Receive_IT(_dropper_UART.UART_Handler, &(_dropper_UART.rxTmpChar), 1);
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_UART_RxCpltCallback+0x94>)
 8000dac:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000db0:	2201      	movs	r2, #1
 8000db2:	4906      	ldr	r1, [pc, #24]	; (8000dcc <HAL_UART_RxCpltCallback+0x9c>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fedb 	bl	8004b70 <HAL_UART_Receive_IT>
	}
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000028 	.word	0x20000028
 8000dc8:	51eb851f 	.word	0x51eb851f
 8000dcc:	200001b8 	.word	0x200001b8

08000dd0 <clearRxBuffer>:

void clearRxBuffer(){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
	_dropper_UART.rxTmpChar = 0;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <clearRxBuffer+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	_dropper_UART.rxBuffCursor = 0;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <clearRxBuffer+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	_dropper_UART.msgReadyToRead = false;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <clearRxBuffer+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	for(uint8_t i = 0; i<RX_BUFFER_SIZE; i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	e008      	b.n	8000e06 <clearRxBuffer+0x36>
		_dropper_UART.rxBuffer[i] = 0;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <clearRxBuffer+0x4c>)
 8000df8:	4413      	add	r3, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<RX_BUFFER_SIZE; i++){
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3301      	adds	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2bc7      	cmp	r3, #199	; 0xc7
 8000e0a:	d9f3      	bls.n	8000df4 <clearRxBuffer+0x24>
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000028 	.word	0x20000028

08000e20 <clearTxBuffer>:

void clearTxBuffer(){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<TX_BUFFER_SIZE; i++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e006      	b.n	8000e3a <clearTxBuffer+0x1a>
		_dropper_UART.txBuffer[i] = 0;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <clearTxBuffer+0x30>)
 8000e30:	2100      	movs	r1, #0
 8000e32:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<TX_BUFFER_SIZE; i++){
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	3301      	adds	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2bc7      	cmp	r3, #199	; 0xc7
 8000e3e:	d9f5      	bls.n	8000e2c <clearTxBuffer+0xc>
	}
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000028 	.word	0x20000028

08000e54 <_dropper_StepIRQ>:
uint32_t stepCounter = 0;
bool isSeedSown = false;
_dropper dDropper;


void _dropper_StepIRQ(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	++stepCounter;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <_dropper_StepIRQ+0x18>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <_dropper_StepIRQ+0x18>)
 8000e60:	6013      	str	r3, [r2, #0]
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	200001c0 	.word	0x200001c0

08000e70 <_dropper_SeedSensorIRQ>:

void _dropper_SeedSensorIRQ(){
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	isSeedSown = true;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <_dropper_SeedSensorIRQ+0x14>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	200001c4 	.word	0x200001c4

08000e88 <_dropper_HomingSensorIRQ>:

void _dropper_HomingSensorIRQ(){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	dDropper.state = HOME;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <_dropper_HomingSensorIRQ+0x14>)
 8000e8e:	2203      	movs	r2, #3
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	200001c8 	.word	0x200001c8

08000ea0 <_dropper_Init>:

void _dropper_Init(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

	dDropper.channels[0].name = CHANNEL_1;
 8000ea6:	4b9a      	ldr	r3, [pc, #616]	; (8001110 <_dropper_Init+0x270>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	711a      	strb	r2, [r3, #4]
	dDropper.channels[0].port = SEED_CHANNEL_1_PORT;
 8000eac:	4b98      	ldr	r3, [pc, #608]	; (8001110 <_dropper_Init+0x270>)
 8000eae:	4a99      	ldr	r2, [pc, #612]	; (8001114 <_dropper_Init+0x274>)
 8000eb0:	609a      	str	r2, [r3, #8]
	dDropper.channels[0].pin = SEED_CHANNEL_1_PIN;
 8000eb2:	4b97      	ldr	r3, [pc, #604]	; (8001110 <_dropper_Init+0x270>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	819a      	strh	r2, [r3, #12]
	dDropper.channels[0].seedType = PELLETED;
 8000eba:	4b95      	ldr	r3, [pc, #596]	; (8001110 <_dropper_Init+0x270>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	715a      	strb	r2, [r3, #5]
	dDropper.channels[0].status = CHANNEL_CLOSED;
 8000ec0:	4b93      	ldr	r3, [pc, #588]	; (8001110 <_dropper_Init+0x270>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	719a      	strb	r2, [r3, #6]

	dDropper.channels[1].name = CHANNEL_2;
 8000ec6:	4b92      	ldr	r3, [pc, #584]	; (8001110 <_dropper_Init+0x270>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	741a      	strb	r2, [r3, #16]
	dDropper.channels[1].port = SEED_CHANNEL_2_PORT;
 8000ecc:	4b90      	ldr	r3, [pc, #576]	; (8001110 <_dropper_Init+0x270>)
 8000ece:	4a92      	ldr	r2, [pc, #584]	; (8001118 <_dropper_Init+0x278>)
 8000ed0:	615a      	str	r2, [r3, #20]
	dDropper.channels[1].pin = SEED_CHANNEL_2_PIN;
 8000ed2:	4b8f      	ldr	r3, [pc, #572]	; (8001110 <_dropper_Init+0x270>)
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed8:	831a      	strh	r2, [r3, #24]
	dDropper.channels[1].seedType = PELLETED;
 8000eda:	4b8d      	ldr	r3, [pc, #564]	; (8001110 <_dropper_Init+0x270>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	745a      	strb	r2, [r3, #17]
	dDropper.channels[1].status = CHANNEL_CLOSED;
 8000ee0:	4b8b      	ldr	r3, [pc, #556]	; (8001110 <_dropper_Init+0x270>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	749a      	strb	r2, [r3, #18]

	dDropper.channels[2].name = CHANNEL_3;
 8000ee6:	4b8a      	ldr	r3, [pc, #552]	; (8001110 <_dropper_Init+0x270>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	771a      	strb	r2, [r3, #28]
	dDropper.channels[2].port = SEED_CHANNEL_3_PORT;
 8000eec:	4b88      	ldr	r3, [pc, #544]	; (8001110 <_dropper_Init+0x270>)
 8000eee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ef2:	621a      	str	r2, [r3, #32]
	dDropper.channels[2].pin = SEED_CHANNEL_3_PIN;
 8000ef4:	4b86      	ldr	r3, [pc, #536]	; (8001110 <_dropper_Init+0x270>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	849a      	strh	r2, [r3, #36]	; 0x24
	dDropper.channels[2].seedType = PELLETED;
 8000efc:	4b84      	ldr	r3, [pc, #528]	; (8001110 <_dropper_Init+0x270>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	775a      	strb	r2, [r3, #29]
	dDropper.channels[2].status = CHANNEL_CLOSED;
 8000f02:	4b83      	ldr	r3, [pc, #524]	; (8001110 <_dropper_Init+0x270>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	779a      	strb	r2, [r3, #30]

	dDropper.channels[3].name = CHANNEL_4;
 8000f08:	4b81      	ldr	r3, [pc, #516]	; (8001110 <_dropper_Init+0x270>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	dDropper.channels[3].port = SEED_CHANNEL_4_PORT;
 8000f10:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <_dropper_Init+0x270>)
 8000f12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
	dDropper.channels[3].pin = SEED_CHANNEL_4_PIN;
 8000f18:	4b7d      	ldr	r3, [pc, #500]	; (8001110 <_dropper_Init+0x270>)
 8000f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1e:	861a      	strh	r2, [r3, #48]	; 0x30
	dDropper.channels[3].seedType = CASUAL;
 8000f20:	4b7b      	ldr	r3, [pc, #492]	; (8001110 <_dropper_Init+0x270>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	dDropper.channels[3].status = CHANNEL_CLOSED;
 8000f28:	4b79      	ldr	r3, [pc, #484]	; (8001110 <_dropper_Init+0x270>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	dDropper.channels[4].name = CHANNEL_5;
 8000f30:	4b77      	ldr	r3, [pc, #476]	; (8001110 <_dropper_Init+0x270>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	dDropper.channels[4].port = SEED_CHANNEL_5_PORT;
 8000f38:	4b75      	ldr	r3, [pc, #468]	; (8001110 <_dropper_Init+0x270>)
 8000f3a:	4a77      	ldr	r2, [pc, #476]	; (8001118 <_dropper_Init+0x278>)
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
	dDropper.channels[4].pin = SEED_CHANNEL_5_PIN;
 8000f3e:	4b74      	ldr	r3, [pc, #464]	; (8001110 <_dropper_Init+0x270>)
 8000f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f44:	879a      	strh	r2, [r3, #60]	; 0x3c
	dDropper.channels[4].seedType = CASUAL;
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <_dropper_Init+0x270>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	dDropper.channels[4].status = CHANNEL_CLOSED;
 8000f4e:	4b70      	ldr	r3, [pc, #448]	; (8001110 <_dropper_Init+0x270>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dDropper.channels[5].name = CHANNEL_6;
 8000f56:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <_dropper_Init+0x270>)
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dDropper.channels[5].port = SEED_CHANNEL_6_PORT;
 8000f5e:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <_dropper_Init+0x270>)
 8000f60:	4a6d      	ldr	r2, [pc, #436]	; (8001118 <_dropper_Init+0x278>)
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
	dDropper.channels[5].pin = SEED_CHANNEL_6_PIN;
 8000f64:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <_dropper_Init+0x270>)
 8000f66:	2210      	movs	r2, #16
 8000f68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	dDropper.channels[5].seedType = CASUAL;
 8000f6c:	4b68      	ldr	r3, [pc, #416]	; (8001110 <_dropper_Init+0x270>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	dDropper.channels[5].status = CHANNEL_CLOSED;
 8000f74:	4b66      	ldr	r3, [pc, #408]	; (8001110 <_dropper_Init+0x270>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	dDropper.vibrateMotor.port = VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT;
 8000f7c:	4b64      	ldr	r3, [pc, #400]	; (8001110 <_dropper_Init+0x270>)
 8000f7e:	4a66      	ldr	r2, [pc, #408]	; (8001118 <_dropper_Init+0x278>)
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
	dDropper.vibrateMotor.pin = VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN;
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <_dropper_Init+0x270>)
 8000f84:	2220      	movs	r2, #32
 8000f86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	dDropper.vibrateMotor.status = MOTOR_OFF;
 8000f8a:	4b61      	ldr	r3, [pc, #388]	; (8001110 <_dropper_Init+0x270>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	dDropper.drumMotor.enPort = PELLETED_SEEDS_STEPPER_EN_PORT;
 8000f92:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <_dropper_Init+0x270>)
 8000f94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
	dDropper.drumMotor.enPin = PELLETED_SEEDS_STEPPER_EN_PIN;
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <_dropper_Init+0x270>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	dDropper.drumMotor.dirPort = PELLETED_SEEDS_STEPPER_DIR_PORT;
 8000fa2:	4b5b      	ldr	r3, [pc, #364]	; (8001110 <_dropper_Init+0x270>)
 8000fa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fa8:	659a      	str	r2, [r3, #88]	; 0x58
	dDropper.drumMotor.dirPin = PELLETED_SEEDS_STEPPER_DIR_PIN;
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <_dropper_Init+0x270>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	dDropper.drumMotor.timerHandler = &htim3;
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <_dropper_Init+0x270>)
 8000fb4:	4a59      	ldr	r2, [pc, #356]	; (800111c <_dropper_Init+0x27c>)
 8000fb6:	661a      	str	r2, [r3, #96]	; 0x60
	dDropper.drumMotor.timerChannel = TIM_CHANNEL_1;
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <_dropper_Init+0x270>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	665a      	str	r2, [r3, #100]	; 0x64
	dDropper.drumMotor.invertAxis = false;
 8000fbe:	4b54      	ldr	r3, [pc, #336]	; (8001110 <_dropper_Init+0x270>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	dDropper.dropperMotor.enPort = DROPPER_STEPPER_EN_PORT;
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <_dropper_Init+0x270>)
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <_dropper_Init+0x278>)
 8000fca:	679a      	str	r2, [r3, #120]	; 0x78
	dDropper.dropperMotor.enPin = DROPPER_STEPPER_EN_PIN;
 8000fcc:	4b50      	ldr	r3, [pc, #320]	; (8001110 <_dropper_Init+0x270>)
 8000fce:	2240      	movs	r2, #64	; 0x40
 8000fd0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	dDropper.dropperMotor.dirPort = DROPPER_STEPPER_DIR_PORT;
 8000fd4:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <_dropper_Init+0x270>)
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <_dropper_Init+0x274>)
 8000fd8:	67da      	str	r2, [r3, #124]	; 0x7c
	dDropper.dropperMotor.dirPin = DROPPER_STEPPER_DIR_PIN;
 8000fda:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <_dropper_Init+0x270>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	dDropper.dropperMotor.timerHandler = &htim3;
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <_dropper_Init+0x270>)
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	; (800111c <_dropper_Init+0x27c>)
 8000fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	dDropper.dropperMotor.timerChannel = TIM_CHANNEL_1;
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <_dropper_Init+0x270>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	dDropper.dropperMotor.invertAxis = false;
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <_dropper_Init+0x270>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

	for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e018      	b.n	8001032 <_dropper_Init+0x192>
		HAL_GPIO_WritePin(dDropper.channels[i].port, dDropper.channels[i].pin, GPIO_PIN_SET);
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	4943      	ldr	r1, [pc, #268]	; (8001110 <_dropper_Init+0x270>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	3308      	adds	r3, #8
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	493e      	ldr	r1, [pc, #248]	; (8001110 <_dropper_Init+0x270>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	330c      	adds	r3, #12
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	f001 f910 	bl	800224c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++){
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3301      	adds	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b05      	cmp	r3, #5
 8001036:	d9e3      	bls.n	8001000 <_dropper_Init+0x160>
	}

	HAL_GPIO_WritePin(dDropper.vibrateMotor.port, dDropper.vibrateMotor.pin, GPIO_PIN_SET);
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <_dropper_Init+0x270>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a34      	ldr	r2, [pc, #208]	; (8001110 <_dropper_Init+0x270>)
 800103e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001042:	2201      	movs	r2, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f901 	bl	800224c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(dDropper.drumMotor.enPort, dDropper.drumMotor.enPin, GPIO_PIN_RESET);
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <_dropper_Init+0x270>)
 800104c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104e:	4a30      	ldr	r2, [pc, #192]	; (8001110 <_dropper_Init+0x270>)
 8001050:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8001054:	2200      	movs	r2, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f8f8 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dDropper.drumMotor.dirPort, dDropper.drumMotor.dirPin, GPIO_PIN_RESET);
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <_dropper_Init+0x270>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <_dropper_Init+0x270>)
 8001062:	f8b2 105e 	ldrh.w	r1, [r2, #94]	; 0x5e
 8001066:	2200      	movs	r2, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f001 f8ef 	bl	800224c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(dDropper.dropperMotor.enPort, dDropper.dropperMotor.enPin, GPIO_PIN_RESET);
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <_dropper_Init+0x270>)
 8001070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001072:	4a27      	ldr	r2, [pc, #156]	; (8001110 <_dropper_Init+0x270>)
 8001074:	f8b2 1080 	ldrh.w	r1, [r2, #128]	; 0x80
 8001078:	2200      	movs	r2, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f001 f8e6 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dDropper.dropperMotor.dirPort, dDropper.dropperMotor.dirPin, GPIO_PIN_RESET);
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <_dropper_Init+0x270>)
 8001082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <_dropper_Init+0x270>)
 8001086:	f8b2 1082 	ldrh.w	r1, [r2, #130]	; 0x82
 800108a:	2200      	movs	r2, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f8dd 	bl	800224c <HAL_GPIO_WritePin>

	//turn off other relays
	HAL_GPIO_WritePin(RELAY_8_GPIO_Port, RELAY_8_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f001 f8d6 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_9_GPIO_Port, RELAY_9_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	481b      	ldr	r0, [pc, #108]	; (8001114 <_dropper_Init+0x274>)
 80010a8:	f001 f8d0 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_10_GPIO_Port, RELAY_10_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <_dropper_Init+0x274>)
 80010b2:	f001 f8cb 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_11_GPIO_Port, RELAY_11_Pin, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <_dropper_Init+0x278>)
 80010be:	f001 f8c5 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_12_GPIO_Port, RELAY_12_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2104      	movs	r1, #4
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <_dropper_Init+0x278>)
 80010c8:	f001 f8c0 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_13_GPIO_Port, RELAY_13_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2102      	movs	r1, #2
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <_dropper_Init+0x278>)
 80010d2:	f001 f8bb 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_14_GPIO_Port, RELAY_14_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <_dropper_Init+0x278>)
 80010de:	f001 f8b5 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_15_GPIO_Port, RELAY_15_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <_dropper_Init+0x278>)
 80010ea:	f001 f8af 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_16_GPIO_Port, RELAY_16_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <_dropper_Init+0x278>)
 80010f6:	f001 f8a9 	bl	800224c <HAL_GPIO_WritePin>

	UART_Init(&huart1);
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <_dropper_Init+0x280>)
 80010fc:	f7ff fdfc 	bl	8000cf8 <UART_Init>

	dDropper.state = INITIALIZED;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <_dropper_Init+0x270>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001c8 	.word	0x200001c8
 8001114:	48000800 	.word	0x48000800
 8001118:	48000400 	.word	0x48000400
 800111c:	20000264 	.word	0x20000264
 8001120:	200002b0 	.word	0x200002b0

08001124 <_dropper_setStepperMoveDirection>:
	_dropper_RotateDrum_deg(-90);

	HAL_Delay(500);
}

void _dropper_setStepperMoveDirection(_dropperStepperMotor * stepper,_stepperMoveDirection md){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
	switch(md){
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <_dropper_setStepperMoveDirection+0x18>
 8001136:	2b01      	cmp	r3, #1
 8001138:	d01a      	beq.n	8001170 <_dropper_setStepperMoveDirection+0x4c>
		else{
			HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, GPIO_PIN_SET);
		}
		break;
	}
}
 800113a:	e033      	b.n	80011a4 <_dropper_setStepperMoveDirection+0x80>
		if(!stepper->invertAxis){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <_dropper_setStepperMoveDirection+0x3a>
			HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, GPIO_PIN_SET);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6858      	ldr	r0, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	895b      	ldrh	r3, [r3, #10]
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f001 f878 	bl	800224c <HAL_GPIO_WritePin>
		break;
 800115c:	e022      	b.n	80011a4 <_dropper_setStepperMoveDirection+0x80>
			HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, GPIO_PIN_RESET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6858      	ldr	r0, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	895b      	ldrh	r3, [r3, #10]
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	f001 f86f 	bl	800224c <HAL_GPIO_WritePin>
		break;
 800116e:	e019      	b.n	80011a4 <_dropper_setStepperMoveDirection+0x80>
		if(!stepper->invertAxis){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001176:	f083 0301 	eor.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <_dropper_setStepperMoveDirection+0x6e>
			HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, GPIO_PIN_RESET);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6858      	ldr	r0, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	895b      	ldrh	r3, [r3, #10]
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	f001 f85e 	bl	800224c <HAL_GPIO_WritePin>
		break;
 8001190:	e007      	b.n	80011a2 <_dropper_setStepperMoveDirection+0x7e>
			HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, GPIO_PIN_SET);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6858      	ldr	r0, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	895b      	ldrh	r3, [r3, #10]
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	f001 f855 	bl	800224c <HAL_GPIO_WritePin>
		break;
 80011a2:	bf00      	nop
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <_dropper_RotateDrum_deg>:

_seedSowingStatus _dropper_RotateDrum_deg(float angle_deg){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	ed87 0a01 	vstr	s0, [r7, #4]

	if(angle_deg < 0){
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d50a      	bpl.n	80011de <_dropper_RotateDrum_deg+0x2e>
		_dropper_setStepperMoveDirection(&(dDropper.drumMotor), BACKWARD);
 80011c8:	2101      	movs	r1, #1
 80011ca:	482d      	ldr	r0, [pc, #180]	; (8001280 <_dropper_RotateDrum_deg+0xd0>)
 80011cc:	f7ff ffaa 	bl	8001124 <_dropper_setStepperMoveDirection>
		angle_deg = -angle_deg;
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	eef1 7a67 	vneg.f32	s15, s15
 80011d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80011dc:	e003      	b.n	80011e6 <_dropper_RotateDrum_deg+0x36>
	}
	else{
		_dropper_setStepperMoveDirection(&(dDropper.drumMotor), FORWARD);
 80011de:	2100      	movs	r1, #0
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <_dropper_RotateDrum_deg+0xd0>)
 80011e2:	f7ff ff9f 	bl	8001124 <_dropper_setStepperMoveDirection>
	}

	uint32_t stepsToDo = (uint32_t)((angle_deg * (float)DRUM_STEPPER_MICROSTEPPING)/DEFAULT_ANGLE_PER_STEP);
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001284 <_dropper_RotateDrum_deg+0xd4>
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	ee17 0a90 	vmov	r0, s15
 80011f6:	f7ff f973 	bl	80004e0 <__aeabi_f2d>
 80011fa:	a31f      	add	r3, pc, #124	; (adr r3, 8001278 <_dropper_RotateDrum_deg+0xc8>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff faf0 	bl	80007e4 <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fbd2 	bl	80009b4 <__aeabi_d2uiz>
 8001210:	4603      	mov	r3, r0
 8001212:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001214:	2100      	movs	r1, #0
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <_dropper_RotateDrum_deg+0xd8>)
 8001218:	f002 f91e 	bl	8003458 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 49);
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <_dropper_RotateDrum_deg+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2231      	movs	r2, #49	; 0x31
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
	stepCounter = 0;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <_dropper_RotateDrum_deg+0xdc>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
	isSeedSown = false;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <_dropper_RotateDrum_deg+0xe0>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]

	while(stepCounter < stepsToDo){
 8001230:	e00d      	b.n	800124e <_dropper_RotateDrum_deg+0x9e>
		if(isSeedSown){
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <_dropper_RotateDrum_deg+0xe0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <_dropper_RotateDrum_deg+0x9e>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_dropper_RotateDrum_deg+0xd8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001242:	2100      	movs	r1, #0
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <_dropper_RotateDrum_deg+0xd8>)
 8001246:	f002 fa5f 	bl	8003708 <HAL_TIM_PWM_Stop_IT>
			return SEED_SOWN;
 800124a:	2300      	movs	r3, #0
 800124c:	e00d      	b.n	800126a <_dropper_RotateDrum_deg+0xba>
	while(stepCounter < stepsToDo){
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <_dropper_RotateDrum_deg+0xdc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8ec      	bhi.n	8001232 <_dropper_RotateDrum_deg+0x82>
		}
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <_dropper_RotateDrum_deg+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001260:	2100      	movs	r1, #0
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <_dropper_RotateDrum_deg+0xd8>)
 8001264:	f002 fa50 	bl	8003708 <HAL_TIM_PWM_Stop_IT>
	return SEED_ERR;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	cccccccd 	.word	0xcccccccd
 800127c:	3ffccccc 	.word	0x3ffccccc
 8001280:	2000021c 	.word	0x2000021c
 8001284:	42000000 	.word	0x42000000
 8001288:	20000264 	.word	0x20000264
 800128c:	200001c0 	.word	0x200001c0
 8001290:	200001c4 	.word	0x200001c4

08001294 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b79      	ldr	r3, [pc, #484]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a78      	ldr	r2, [pc, #480]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c2:	4b73      	ldr	r3, [pc, #460]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a72      	ldr	r2, [pc, #456]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a6c      	ldr	r2, [pc, #432]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b67      	ldr	r3, [pc, #412]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a66      	ldr	r2, [pc, #408]	; (8001490 <MX_GPIO_Init+0x1fc>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <MX_GPIO_Init+0x1fc>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b61      	ldr	r3, [pc, #388]	; (8001490 <MX_GPIO_Init+0x1fc>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a60      	ldr	r2, [pc, #384]	; (8001490 <MX_GPIO_Init+0x1fc>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b5e      	ldr	r3, [pc, #376]	; (8001490 <MX_GPIO_Init+0x1fc>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 8001322:	2200      	movs	r2, #0
 8001324:	f240 7123 	movw	r1, #1827	; 0x723
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 ff8e 	bl	800224c <HAL_GPIO_WritePin>
                          |RELAY_3_Pin|RELAY_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 8001330:	2200      	movs	r2, #0
 8001332:	f64e 6176 	movw	r1, #61046	; 0xee76
 8001336:	4857      	ldr	r0, [pc, #348]	; (8001494 <MX_GPIO_Init+0x200>)
 8001338:	f000 ff88 	bl	800224c <HAL_GPIO_WritePin>
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001342:	4855      	ldr	r0, [pc, #340]	; (8001498 <MX_GPIO_Init+0x204>)
 8001344:	f000 ff82 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SENSOR_9_Pin|SENSOR_10_Pin;
 8001348:	f242 030c 	movw	r3, #8204	; 0x200c
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001352:	2302      	movs	r3, #2
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	484e      	ldr	r0, [pc, #312]	; (8001498 <MX_GPIO_Init+0x204>)
 800135e:	f000 fdf3 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 8001362:	f240 7323 	movw	r3, #1827	; 0x723
 8001366:	617b      	str	r3, [r7, #20]
                          |RELAY_3_Pin|RELAY_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f000 fde3 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001392:	230c      	movs	r3, #12
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f000 fdd2 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_12_Pin|SENSOR_6_Pin;
 80013a4:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f000 fdc4 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_11_Pin|SENSOR_7_Pin|SENSOR_8_Pin;
 80013c0:	f241 0381 	movw	r3, #4225	; 0x1081
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	482f      	ldr	r0, [pc, #188]	; (8001494 <MX_GPIO_Init+0x200>)
 80013d6:	f000 fdb7 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 80013da:	f64e 6376 	movw	r3, #61046	; 0xee76
 80013de:	617b      	str	r3, [r7, #20]
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4828      	ldr	r0, [pc, #160]	; (8001494 <MX_GPIO_Init+0x200>)
 80013f4:	f000 fda8 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin;
 80013f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4821      	ldr	r0, [pc, #132]	; (8001498 <MX_GPIO_Init+0x204>)
 8001412:	f000 fd99 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_5_Pin;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_5_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f000 fd8b 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENSOR_3_Pin|SENSOR_1_Pin|SENSOR_2_Pin;
 8001432:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001438:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800143e:	2302      	movs	r3, #2
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <MX_GPIO_Init+0x204>)
 800144a:	f000 fd7d 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_4_Pin;
 800144e:	2304      	movs	r3, #4
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001452:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_4_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_GPIO_Init+0x208>)
 8001464:	f000 fd70 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2008      	movs	r0, #8
 800146e:	f000 fc76 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001472:	2008      	movs	r0, #8
 8001474:	f000 fc8d 	bl	8001d92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2028      	movs	r0, #40	; 0x28
 800147e:	f000 fc6e 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001482:	2028      	movs	r0, #40	; 0x28
 8001484:	f000 fc85 	bl	8001d92 <HAL_NVIC_EnableIRQ>

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	48000400 	.word	0x48000400
 8001498:	48000800 	.word	0x48000800
 800149c:	48000c00 	.word	0x48000c00

080014a0 <HAL_TIM_PWM_PulseFinishedCallback>:
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		_dropper_StepIRQ();
 80014b2:	f7ff fccf 	bl	8000e54 <_dropper_StepIRQ>
	}
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40000400 	.word	0x40000400

080014c4 <HAL_GPIO_EXTI_Callback>:

uint8_t channelNo[4] = {0};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == SEED_SENSOR_CHANNEL_1_PIN	 ||
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_EXTI_Callback+0x22>
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_EXTI_Callback+0x22>
			GPIO_Pin == SEED_SENSOR_CHANNEL_2_PIN ||
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_EXTI_Callback+0x28>
			GPIO_Pin == SEED_SENSOR_CHANNEL_3_PIN){
		_dropper_SeedSensorIRQ();
 80014e6:	f7ff fcc3 	bl	8000e70 <_dropper_SeedSensorIRQ>
	}
	else if(GPIO_Pin == DROPPER_HOMING_SENSOR_PIN){
		_dropper_HomingSensorIRQ();
	}
}
 80014ea:	e004      	b.n	80014f6 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_Pin == DROPPER_HOMING_SENSOR_PIN){
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_EXTI_Callback+0x32>
		_dropper_HomingSensorIRQ();
 80014f2:	f7ff fcc9 	bl	8000e88 <_dropper_HomingSensorIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001506:	f000 fabc 	bl	8001a82 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800150a:	f000 f82b 	bl	8001564 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800150e:	f7ff fec1 	bl	8001294 <MX_GPIO_Init>
	MX_TIM3_Init();
 8001512:	f000 f903 	bl	800171c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001516:	f000 f9df 	bl	80018d8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	_dropper_Init();
 800151a:	f7ff fcc1 	bl	8000ea0 <_dropper_Init>
	HAL_Delay(2000);
 800151e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001522:	f000 fb1f 	bl	8001b64 <HAL_Delay>
	_dropperChannelName m_channels[] = {CHANNEL_1, CHANNEL_2, CHANNEL_3};
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <main+0x58>)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	4611      	mov	r1, r2
 800152e:	8019      	strh	r1, [r3, #0]
 8001530:	3302      	adds	r3, #2
 8001532:	0c12      	lsrs	r2, r2, #16
 8001534:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1)
	{
//		if(_dropper_UART.msgReadyToRead) _dropper_execCmd();

		_dropper_RotateDrum_deg(90);
 8001536:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800155c <main+0x5c>
 800153a:	f7ff fe39 	bl	80011b0 <_dropper_RotateDrum_deg>
		HAL_Delay(1000);
 800153e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001542:	f000 fb0f 	bl	8001b64 <HAL_Delay>
		_dropper_RotateDrum_deg(-90);
 8001546:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001560 <main+0x60>
 800154a:	f7ff fe31 	bl	80011b0 <_dropper_RotateDrum_deg>

		HAL_Delay(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001552:	f000 fb07 	bl	8001b64 <HAL_Delay>
		_dropper_RotateDrum_deg(90);
 8001556:	e7ee      	b.n	8001536 <main+0x36>
 8001558:	08006c7c 	.word	0x08006c7c
 800155c:	42b40000 	.word	0x42b40000
 8001560:	c2b40000 	.word	0xc2b40000

08001564 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2238      	movs	r2, #56	; 0x38
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f005 fb6e 	bl	8006c54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 fe90 	bl	80022ac <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159e:	2302      	movs	r3, #2
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015a2:	2304      	movs	r3, #4
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80015a6:	2355      	movs	r3, #85	; 0x55
 80015a8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 ff2a 	bl	8002414 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x66>
	{
		Error_Handler();
 80015c6:	f000 f818 	bl	80015fa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2303      	movs	r3, #3
 80015d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2104      	movs	r1, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fa28 	bl	8002a38 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80015ee:	f000 f804 	bl	80015fa <Error_Handler>
	}
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	; 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001602:	e7fe      	b.n	8001602 <Error_Handler+0x8>

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6613      	str	r3, [r2, #96]	; 0x60
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800163a:	f000 fedb 	bl	80023f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 fa46 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_4_Pin);
 80016a4:	2004      	movs	r0, #4
 80016a6:	f000 fde9 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TIM3_IRQHandler+0x10>)
 80016b6:	f002 f911 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000264 	.word	0x20000264

080016c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <USART1_IRQHandler+0x10>)
 80016ca:	f003 fa9d 	bl	8004c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002b0 	.word	0x200002b0

080016d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_3_Pin);
 80016dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016e0:	f000 fdcc 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_1_Pin);
 80016e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016e8:	f000 fdc8 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_2_Pin);
 80016ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016f0:	f000 fdc4 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	; 0x38
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <MX_TIM3_Init+0xfc>)
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <MX_TIM3_Init+0x100>)
 8001752:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <MX_TIM3_Init+0xfc>)
 8001756:	22a9      	movs	r2, #169	; 0xa9
 8001758:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <MX_TIM3_Init+0xfc>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <MX_TIM3_Init+0xfc>)
 8001762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001766:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <MX_TIM3_Init+0xfc>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <MX_TIM3_Init+0xfc>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001774:	4828      	ldr	r0, [pc, #160]	; (8001818 <MX_TIM3_Init+0xfc>)
 8001776:	f001 fdb7 	bl	80032e8 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001780:	f7ff ff3b 	bl	80015fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178e:	4619      	mov	r1, r3
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <MX_TIM3_Init+0xfc>)
 8001792:	f002 fb07 	bl	8003da4 <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800179c:	f7ff ff2d 	bl	80015fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a0:	481d      	ldr	r0, [pc, #116]	; (8001818 <MX_TIM3_Init+0xfc>)
 80017a2:	f001 fdf8 	bl	8003396 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017ac:	f7ff ff25 	bl	80015fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <MX_TIM3_Init+0xfc>)
 80017c0:	f003 f8b2 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017ca:	f7ff ff16 	bl	80015fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ce:	2360      	movs	r3, #96	; 0x60
 80017d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_TIM3_Init+0xfc>)
 80017e6:	f002 f9c9 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017f0:	f7ff ff03 	bl	80015fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	2204      	movs	r2, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <MX_TIM3_Init+0xfc>)
 80017fc:	f002 f9be 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001806:	f7ff fef8 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800180a:	4803      	ldr	r0, [pc, #12]	; (8001818 <MX_TIM3_Init+0xfc>)
 800180c:	f000 f82e 	bl	800186c <HAL_TIM_MspPostInit>

}
 8001810:	bf00      	nop
 8001812:	3738      	adds	r7, #56	; 0x38
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000264 	.word	0x20000264
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	201d      	movs	r0, #29
 8001850:	f000 fa85 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001854:	201d      	movs	r0, #29
 8001856:	f000 fa9c 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40000400 	.word	0x40000400
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_TIM_MspPostInit+0x64>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11c      	bne.n	80018c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_TIM_MspPostInit+0x68>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_TIM_MspPostInit+0x68>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_TIM_MspPostInit+0x68>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a6:	23c0      	movs	r3, #192	; 0xc0
 80018a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f000 fb40 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40000400 	.word	0x40000400
 80018d4:	40021000 	.word	0x40021000

080018d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <MX_USART1_UART_Init+0x94>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_USART1_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_USART1_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001922:	f003 f8d5 	bl	8004ad0 <HAL_UART_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800192c:	f7ff fe65 	bl	80015fa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001934:	f005 f89f 	bl	8006a76 <HAL_UARTEx_SetTxFifoThreshold>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800193e:	f7ff fe5c 	bl	80015fa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001946:	f005 f8d4 	bl	8006af2 <HAL_UARTEx_SetRxFifoThreshold>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001950:	f7ff fe53 	bl	80015fa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001956:	f005 f855 	bl	8006a04 <HAL_UARTEx_DisableFifoMode>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001960:	f7ff fe4b 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200002b0 	.word	0x200002b0
 800196c:	40013800 	.word	0x40013800

08001970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b09e      	sub	sp, #120	; 0x78
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2250      	movs	r2, #80	; 0x50
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f005 f95f 	bl	8006c54 <memset>
  if(uartHandle->Instance==USART1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_UART_MspInit+0xb4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13d      	bne.n	8001a1c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fa5f 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fe1f 	bl	80015fa <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_UART_MspInit+0xb8>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_UART_MspInit+0xb8>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	6613      	str	r3, [r2, #96]	; 0x60
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0xb8>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_UART_MspInit+0xb8>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_UART_MspInit+0xb8>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_UART_MspInit+0xb8>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019ec:	2330      	movs	r3, #48	; 0x30
 80019ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fc:	2307      	movs	r3, #7
 80019fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a04:	4619      	mov	r1, r3
 8001a06:	4809      	ldr	r0, [pc, #36]	; (8001a2c <HAL_UART_MspInit+0xbc>)
 8001a08:	f000 fa9e 	bl	8001f48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2025      	movs	r0, #37	; 0x25
 8001a12:	f000 f9a4 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a16:	2025      	movs	r0, #37	; 0x25
 8001a18:	f000 f9bb 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3778      	adds	r7, #120	; 0x78
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a32:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff fe60 	bl	80016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	; (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	; (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f005 f8d5 	bl	8006c0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fd4d 	bl	8001500 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   r0, =_estack
 8001a68:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a74:	08006cd0 	.word	0x08006cd0
  ldr r2, =_sbss
 8001a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a7c:	20000348 	.word	0x20000348

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>

08001a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f95b 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f80e 	bl	8001ab4 <HAL_InitTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	e001      	b.n	8001aa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa4:	f7ff fdae 	bl	8001604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa8:	79fb      	ldrb	r3, [r7, #7]

}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_InitTick+0x68>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d022      	beq.n	8001b0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_InitTick+0x6c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_InitTick+0x68>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f966 	bl	8001dae <HAL_SYSTICK_Config>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d809      	bhi.n	8001b02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aee:	2200      	movs	r2, #0
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295
 8001af6:	f000 f932 	bl	8001d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_InitTick+0x70>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e007      	b.n	8001b12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e004      	b.n	8001b12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_IncTick+0x1c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_IncTick+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_IncTick+0x1c>)
 8001b38:	6013      	str	r3, [r2, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000344 	.word	0x20000344
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000344 	.word	0x20000344

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff ffee 	bl	8001b4c <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d004      	beq.n	8001b88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_Delay+0x40>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b88:	bf00      	nop
 8001b8a:	f7ff ffdf 	bl	8001b4c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d8f7      	bhi.n	8001b8a <HAL_Delay+0x26>
  {
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff40 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff33 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa4 	bl	8001d04 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d005      	beq.n	8001dea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2204      	movs	r2, #4
 8001de2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e037      	b.n	8001e5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 020e 	bic.w	r2, r2, #14
 8001df8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 021f 	and.w	r2, r3, #31
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00c      	beq.n	8001e5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d00d      	beq.n	8001eac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2204      	movs	r2, #4
 8001e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e047      	b.n	8001f3c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 020e 	bic.w	r2, r2, #14
 8001eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ef8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f1a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
    }
  }
  return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f56:	e15a      	b.n	800220e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 814c 	beq.w	8002208 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d005      	beq.n	8001f88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d130      	bne.n	8001fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 0201 	and.w	r2, r3, #1
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d017      	beq.n	8002026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d123      	bne.n	800207a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0203 	and.w	r2, r3, #3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a6 	beq.w	8002208 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020bc:	4b5b      	ldr	r3, [pc, #364]	; (800222c <HAL_GPIO_Init+0x2e4>)
 80020be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c0:	4a5a      	ldr	r2, [pc, #360]	; (800222c <HAL_GPIO_Init+0x2e4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6613      	str	r3, [r2, #96]	; 0x60
 80020c8:	4b58      	ldr	r3, [pc, #352]	; (800222c <HAL_GPIO_Init+0x2e4>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d4:	4a56      	ldr	r2, [pc, #344]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fe:	d01f      	beq.n	8002140 <HAL_GPIO_Init+0x1f8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d019      	beq.n	800213c <HAL_GPIO_Init+0x1f4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a4b      	ldr	r2, [pc, #300]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_GPIO_Init+0x1f0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a4a      	ldr	r2, [pc, #296]	; (800223c <HAL_GPIO_Init+0x2f4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00d      	beq.n	8002134 <HAL_GPIO_Init+0x1ec>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a49      	ldr	r2, [pc, #292]	; (8002240 <HAL_GPIO_Init+0x2f8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x1e8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a48      	ldr	r2, [pc, #288]	; (8002244 <HAL_GPIO_Init+0x2fc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_GPIO_Init+0x1e4>
 8002128:	2305      	movs	r3, #5
 800212a:	e00a      	b.n	8002142 <HAL_GPIO_Init+0x1fa>
 800212c:	2306      	movs	r3, #6
 800212e:	e008      	b.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002130:	2304      	movs	r3, #4
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002134:	2303      	movs	r3, #3
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1fa>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002140:	2300      	movs	r3, #0
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002152:	4937      	ldr	r1, [pc, #220]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002184:	4a30      	ldr	r2, [pc, #192]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800218a:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_GPIO_Init+0x300>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_GPIO_Init+0x300>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002202:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f ae9d 	bne.w	8001f58 <HAL_GPIO_Init+0x10>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	48000400 	.word	0x48000400
 8002238:	48000800 	.word	0x48000800
 800223c:	48000c00 	.word	0x48000c00
 8002240:	48001000 	.word	0x48001000
 8002244:	48001400 	.word	0x48001400
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002268:	e002      	b.n	8002270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f912 	bl	80014c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40010400 	.word	0x40010400

080022ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d141      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c6:	d131      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c8:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ce:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e0:	4a41      	ldr	r2, [pc, #260]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2232      	movs	r2, #50	; 0x32
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	4a3f      	ldr	r2, [pc, #252]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fe:	e002      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3b01      	subs	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002306:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d102      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f2      	bne.n	8002300 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231a:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002326:	d158      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e057      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800232c:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002332:	4a2d      	ldr	r2, [pc, #180]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800233c:	e04d      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002344:	d141      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002352:	d131      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235a:	4a23      	ldr	r2, [pc, #140]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2232      	movs	r2, #50	; 0x32
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238a:	e002      	b.n	8002392 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3b01      	subs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d102      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f2      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b2:	d112      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e011      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023c8:	e007      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40007000 	.word	0x40007000
 80023ec:	20000000 	.word	0x20000000
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002402:	6093      	str	r3, [r2, #8]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40007000 	.word	0x40007000

08002414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e2fe      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	4b97      	ldr	r3, [pc, #604]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	4b94      	ldr	r3, [pc, #592]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b0c      	cmp	r3, #12
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0x3e>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d002      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e2d9      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b85      	ldr	r3, [pc, #532]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a84      	ldr	r2, [pc, #528]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7e      	ldr	r2, [pc, #504]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7b      	ldr	r2, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a77      	ldr	r2, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b75      	ldr	r3, [pc, #468]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a74      	ldr	r2, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff fb3e 	bl	8001b4c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fb3a 	bl	8001b4c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e29e      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e6:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff fb2a 	bl	8001b4c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fb26 	bl	8001b4c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e28a      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250e:	4b60      	ldr	r3, [pc, #384]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d075      	beq.n	8002616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x136>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d002      	beq.n	8002550 <HAL_RCC_OscConfig+0x13c>
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11f      	bne.n	8002590 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x154>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e25d      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4946      	ldr	r1, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <HAL_RCC_OscConfig+0x280>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fa97 	bl	8001ab4 <HAL_InitTick>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d043      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e249      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fad2 	bl	8001b4c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff face 	bl	8001b4c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e232      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b31      	ldr	r3, [pc, #196]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	492d      	ldr	r1, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e01a      	b.n	8002616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff faae 	bl	8001b4c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff faaa 	bl	8001b4c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e20e      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e0>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d041      	beq.n	80026a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01c      	beq.n	8002664 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7ff fa87 	bl	8001b4c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff fa83 	bl	8001b4c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1e7      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ef      	beq.n	8002642 <HAL_RCC_OscConfig+0x22e>
 8002662:	e020      	b.n	80026a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7ff fa6a 	bl	8001b4c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267a:	e00d      	b.n	8002698 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff fa66 	bl	8001b4c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d906      	bls.n	8002698 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1ca      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002698:	4b8c      	ldr	r3, [pc, #560]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ea      	bne.n	800267c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a6 	beq.w	8002800 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026b8:	4b84      	ldr	r3, [pc, #528]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2b4>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x2b6>
 80026c8:	2300      	movs	r3, #0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a7e      	ldr	r2, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
 80026da:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ea:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <HAL_RCC_OscConfig+0x4bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x4bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x4bc>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7ff fa23 	bl	8001b4c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7ff fa1f 	bl	8001b4c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e183      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x4bc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <HAL_RCC_OscConfig+0x32e>
 8002730:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002740:	e024      	b.n	800278c <HAL_RCC_OscConfig+0x378>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d110      	bne.n	800276c <HAL_RCC_OscConfig+0x358>
 800274a:	4b60      	ldr	r3, [pc, #384]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	4a5e      	ldr	r2, [pc, #376]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	4a5a      	ldr	r2, [pc, #360]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276a:	e00f      	b.n	800278c <HAL_RCC_OscConfig+0x378>
 800276c:	4b57      	ldr	r3, [pc, #348]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a56      	ldr	r2, [pc, #344]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7ff f9da 	bl	8001b4c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7ff f9d6 	bl	8001b4c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e138      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ed      	beq.n	800279c <HAL_RCC_OscConfig+0x388>
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7ff f9c3 	bl	8001b4c <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7ff f9bf 	bl	8001b4c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e121      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ed      	bne.n	80027ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ee:	7ffb      	ldrb	r3, [r7, #31]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d03c      	beq.n	8002886 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01c      	beq.n	800284e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800281a:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7ff f992 	bl	8001b4c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282c:	f7ff f98e 	bl	8001b4c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0f2      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ef      	beq.n	800282c <HAL_RCC_OscConfig+0x418>
 800284c:	e01b      	b.n	8002886 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285e:	f7ff f975 	bl	8001b4c <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002866:	f7ff f971 	bl	8001b4c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0d5      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ef      	bne.n	8002866 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80c9 	beq.w	8002a22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b0c      	cmp	r3, #12
 800289a:	f000 8083 	beq.w	80029a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d15e      	bne.n	8002964 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7ff f94b 	bl	8001b4c <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b8:	e00c      	b.n	80028d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ba:	f7ff f947 	bl	8001b4c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d905      	bls.n	80028d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0ab      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ec      	bne.n	80028ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_RCC_OscConfig+0x61c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6a11      	ldr	r1, [r2, #32]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f0:	3a01      	subs	r2, #1
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	4311      	orrs	r1, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028fa:	0212      	lsls	r2, r2, #8
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002902:	0852      	lsrs	r2, r2, #1
 8002904:	3a01      	subs	r2, #1
 8002906:	0552      	lsls	r2, r2, #21
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800290e:	0852      	lsrs	r2, r2, #1
 8002910:	3a01      	subs	r2, #1
 8002912:	0652      	lsls	r2, r2, #25
 8002914:	4311      	orrs	r1, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291a:	06d2      	lsls	r2, r2, #27
 800291c:	430a      	orrs	r2, r1
 800291e:	4943      	ldr	r1, [pc, #268]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002920:	4313      	orrs	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a3d      	ldr	r2, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff f906 	bl	8001b4c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7ff f902 	bl	8001b4c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e066      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x530>
 8002962:	e05e      	b.n	8002a22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff f8ec 	bl	8001b4c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff f8e8 	bl	8001b4c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04c      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	4924      	ldr	r1, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_OscConfig+0x620>)
 800299e:	4013      	ands	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
 80029a2:	e03e      	b.n	8002a22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e039      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCC_OscConfig+0x618>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d12c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d123      	bne.n	8002a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d11b      	bne.n	8002a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d113      	bne.n	8002a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	019f800c 	.word	0x019f800c
 8002a34:	feeefffc 	.word	0xfeeefffc

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e11e      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b91      	ldr	r3, [pc, #580]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d910      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 020f 	bic.w	r2, r3, #15
 8002a66:	498c      	ldr	r1, [pc, #560]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b8a      	ldr	r3, [pc, #552]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e106      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d073      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d129      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a94:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0f4      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002aa4:	f000 f99e 	bl	8002de4 <RCC_GetSysClockFreqFromPLLSource>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4a7c      	ldr	r2, [pc, #496]	; (8002ca0 <HAL_RCC_ClockConfig+0x268>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d93f      	bls.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ab2:	4b7a      	ldr	r3, [pc, #488]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d033      	beq.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d12f      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ad2:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ada:	4a70      	ldr	r2, [pc, #448]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e024      	b.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af0:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0c6      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0be      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b10:	f000 f8ce 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <HAL_RCC_ClockConfig+0x268>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d909      	bls.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b26:	4a5d      	ldr	r2, [pc, #372]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4957      	ldr	r1, [pc, #348]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b44:	f7ff f802 	bl	8001b4c <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe fffe 	bl	8001b4c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e095      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a42      	ldr	r2, [pc, #264]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bac:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d105      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bce:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4a32      	ldr	r2, [pc, #200]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d21d      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 020f 	bic.w	r2, r3, #15
 8002bf0:	4929      	ldr	r1, [pc, #164]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe ffa8 	bl	8001b4c <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe ffa4 	bl	8001b4c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e03b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x260>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ed      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4917      	ldr	r1, [pc, #92]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490f      	ldr	r1, [pc, #60]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c62:	f000 f825 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_ClockConfig+0x264>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <HAL_RCC_ClockConfig+0x26c>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x270>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe ff14 	bl	8001ab4 <HAL_InitTick>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	04c4b400 	.word	0x04c4b400
 8002ca4:	08006c80 	.word	0x08006c80
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e047      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	e03e      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d136      	bne.n	8002d54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	0a12      	lsrs	r2, r2, #8
 8002d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
      break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d1e:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	0a12      	lsrs	r2, r2, #8
 8002d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
      break;
 8002d36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0e5b      	lsrs	r3, r3, #25
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e001      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d58:	693b      	ldr	r3, [r7, #16]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	00f42400 	.word	0x00f42400
 8002d70:	016e3600 	.word	0x016e3600

08002d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d90:	f7ff fff0 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4904      	ldr	r1, [pc, #16]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08006c90 	.word	0x08006c90

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dbc:	f7ff ffda 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0adb      	lsrs	r3, r3, #11
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4904      	ldr	r1, [pc, #16]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08006c90 	.word	0x08006c90

08002de4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d10c      	bne.n	8002e22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e12:	68d2      	ldr	r2, [r2, #12]
 8002e14:	0a12      	lsrs	r2, r2, #8
 8002e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	617b      	str	r3, [r7, #20]
    break;
 8002e20:	e00c      	b.n	8002e3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	0a12      	lsrs	r2, r2, #8
 8002e30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    break;
 8002e3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0e5b      	lsrs	r3, r3, #25
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e56:	687b      	ldr	r3, [r7, #4]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40021000 	.word	0x40021000
 8002e68:	016e3600 	.word	0x016e3600
 8002e6c:	00f42400 	.word	0x00f42400

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8098 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10d      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fe41 	bl	8001b4c <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ecc:	e009      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fe fe3d 	bl	8001b4c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d902      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	74fb      	strb	r3, [r7, #19]
        break;
 8002ee0:	e005      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ef      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d159      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01e      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d019      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f10:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fdfd 	bl	8001b4c <HAL_GetTick>
 8002f52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f54:	e00b      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fdf9 	bl	8001b4c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d902      	bls.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f6c:	e006      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ec      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f98:	e008      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	74bb      	strb	r3, [r7, #18]
 8002f9e:	e005      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fac:	7c7b      	ldrb	r3, [r7, #17]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4ba7      	ldr	r3, [pc, #668]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	4aa6      	ldr	r2, [pc, #664]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fca:	4ba1      	ldr	r3, [pc, #644]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f023 0203 	bic.w	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	499d      	ldr	r1, [pc, #628]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fec:	4b98      	ldr	r3, [pc, #608]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f023 020c 	bic.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4995      	ldr	r1, [pc, #596]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800300e:	4b90      	ldr	r3, [pc, #576]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	498c      	ldr	r1, [pc, #560]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003030:	4b87      	ldr	r3, [pc, #540]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	4984      	ldr	r1, [pc, #528]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003052:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	497b      	ldr	r1, [pc, #492]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003074:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	4973      	ldr	r1, [pc, #460]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	496a      	ldr	r1, [pc, #424]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b8:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4962      	ldr	r1, [pc, #392]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	4959      	ldr	r1, [pc, #356]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fc:	4b54      	ldr	r3, [pc, #336]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	4951      	ldr	r1, [pc, #324]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	4948      	ldr	r1, [pc, #288]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313c:	d105      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a43      	ldr	r2, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003148:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	2b00      	cmp	r3, #0
 8003154:	d015      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	493a      	ldr	r1, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003174:	d105      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4a35      	ldr	r2, [pc, #212]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003180:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d015      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	492c      	ldr	r1, [pc, #176]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ac:	d105      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4a27      	ldr	r2, [pc, #156]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	491e      	ldr	r1, [pc, #120]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e4:	d105      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a19      	ldr	r2, [pc, #100]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	4910      	ldr	r1, [pc, #64]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321c:	d105      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003228:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	4902      	ldr	r1, [pc, #8]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003250:	40021000 	.word	0x40021000
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d015      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4918      	ldr	r1, [pc, #96]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d105      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d015      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ba:	490a      	ldr	r1, [pc, #40]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80032d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e049      	b.n	800338e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe fa86 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f000 fe68 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e049      	b.n	800343c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f841 	bl	8003444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f000 fe11 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_TIM_PWM_Start_IT+0x28>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e03c      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0xa2>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d109      	bne.n	800349a <HAL_TIM_PWM_Start_IT+0x42>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e02f      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0xa2>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d109      	bne.n	80034b4 <HAL_TIM_PWM_Start_IT+0x5c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e022      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0xa2>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d109      	bne.n	80034ce <HAL_TIM_PWM_Start_IT+0x76>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e015      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0xa2>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d109      	bne.n	80034e8 <HAL_TIM_PWM_Start_IT+0x90>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e008      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0xa2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0ec      	b.n	80036dc <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <HAL_TIM_PWM_Start_IT+0xba>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	e023      	b.n	800355a <HAL_TIM_PWM_Start_IT+0x102>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d104      	bne.n	8003522 <HAL_TIM_PWM_Start_IT+0xca>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003520:	e01b      	b.n	800355a <HAL_TIM_PWM_Start_IT+0x102>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d104      	bne.n	8003532 <HAL_TIM_PWM_Start_IT+0xda>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003530:	e013      	b.n	800355a <HAL_TIM_PWM_Start_IT+0x102>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d104      	bne.n	8003542 <HAL_TIM_PWM_Start_IT+0xea>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003540:	e00b      	b.n	800355a <HAL_TIM_PWM_Start_IT+0x102>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b10      	cmp	r3, #16
 8003546:	d104      	bne.n	8003552 <HAL_TIM_PWM_Start_IT+0xfa>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003550:	e003      	b.n	800355a <HAL_TIM_PWM_Start_IT+0x102>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d841      	bhi.n	80035e4 <HAL_TIM_PWM_Start_IT+0x18c>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_TIM_PWM_Start_IT+0x110>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035e5 	.word	0x080035e5
 8003570:	080035e5 	.word	0x080035e5
 8003574:	080035e5 	.word	0x080035e5
 8003578:	080035af 	.word	0x080035af
 800357c:	080035e5 	.word	0x080035e5
 8003580:	080035e5 	.word	0x080035e5
 8003584:	080035e5 	.word	0x080035e5
 8003588:	080035c1 	.word	0x080035c1
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035e5 	.word	0x080035e5
 8003594:	080035e5 	.word	0x080035e5
 8003598:	080035d3 	.word	0x080035d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0202 	orr.w	r2, r2, #2
 80035aa:	60da      	str	r2, [r3, #12]
      break;
 80035ac:	e01d      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0204 	orr.w	r2, r2, #4
 80035bc:	60da      	str	r2, [r3, #12]
      break;
 80035be:	e014      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	60da      	str	r2, [r3, #12]
      break;
 80035d0:	e00b      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0210 	orr.w	r2, r2, #16
 80035e0:	60da      	str	r2, [r3, #12]
      break;
 80035e2:	e002      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d174      	bne.n	80036da <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 f96f 	bl	80048dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_TIM_PWM_Start_IT+0x1e2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a36      	ldr	r2, [pc, #216]	; (80036e8 <HAL_TIM_PWM_Start_IT+0x290>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_TIM_PWM_Start_IT+0x1e2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a35      	ldr	r2, [pc, #212]	; (80036ec <HAL_TIM_PWM_Start_IT+0x294>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIM_PWM_Start_IT+0x1e2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a33      	ldr	r2, [pc, #204]	; (80036f0 <HAL_TIM_PWM_Start_IT+0x298>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_TIM_PWM_Start_IT+0x1e2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a32      	ldr	r2, [pc, #200]	; (80036f4 <HAL_TIM_PWM_Start_IT+0x29c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIM_PWM_Start_IT+0x1e2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_TIM_PWM_Start_IT+0x1e6>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_TIM_PWM_Start_IT+0x1e8>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <HAL_TIM_PWM_Start_IT+0x28c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_TIM_PWM_Start_IT+0x242>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003666:	d018      	beq.n	800369a <HAL_TIM_PWM_Start_IT+0x242>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_TIM_PWM_Start_IT+0x242>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_TIM_PWM_Start_IT+0x242>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_TIM_PWM_Start_IT+0x290>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_TIM_PWM_Start_IT+0x242>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_TIM_PWM_Start_IT+0x294>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_TIM_PWM_Start_IT+0x242>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d115      	bne.n	80036c6 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d015      	beq.n	80036d8 <HAL_TIM_PWM_Start_IT+0x280>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d011      	beq.n	80036d8 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	e008      	b.n	80036d8 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e000      	b.n	80036da <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40015000 	.word	0x40015000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	00010007 	.word	0x00010007

08003708 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d841      	bhi.n	80037a0 <HAL_TIM_PWM_Stop_IT+0x98>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003759 	.word	0x08003759
 8003728:	080037a1 	.word	0x080037a1
 800372c:	080037a1 	.word	0x080037a1
 8003730:	080037a1 	.word	0x080037a1
 8003734:	0800376b 	.word	0x0800376b
 8003738:	080037a1 	.word	0x080037a1
 800373c:	080037a1 	.word	0x080037a1
 8003740:	080037a1 	.word	0x080037a1
 8003744:	0800377d 	.word	0x0800377d
 8003748:	080037a1 	.word	0x080037a1
 800374c:	080037a1 	.word	0x080037a1
 8003750:	080037a1 	.word	0x080037a1
 8003754:	0800378f 	.word	0x0800378f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0202 	bic.w	r2, r2, #2
 8003766:	60da      	str	r2, [r3, #12]
      break;
 8003768:	e01d      	b.n	80037a6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0204 	bic.w	r2, r2, #4
 8003778:	60da      	str	r2, [r3, #12]
      break;
 800377a:	e014      	b.n	80037a6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	60da      	str	r2, [r3, #12]
      break;
 800378c:	e00b      	b.n	80037a6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0210 	bic.w	r2, r2, #16
 800379c:	60da      	str	r2, [r3, #12]
      break;
 800379e:	e002      	b.n	80037a6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 8086 	bne.w	80038ba <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f890 	bl	80048dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <HAL_TIM_PWM_Stop_IT+0xf0>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <HAL_TIM_PWM_Stop_IT+0xf0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3d      	ldr	r2, [pc, #244]	; (80038cc <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_TIM_PWM_Stop_IT+0xf0>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_TIM_PWM_Stop_IT+0xf0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_PWM_Stop_IT+0xf0>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a39      	ldr	r2, [pc, #228]	; (80038d8 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_TIM_PWM_Stop_IT+0xf4>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_TIM_PWM_Stop_IT+0xf6>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d017      	beq.n	8003832 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	f241 1311 	movw	r3, #4369	; 0x1111
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_TIM_PWM_Stop_IT+0x12a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	f244 4344 	movw	r3, #17476	; 0x4444
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_TIM_PWM_Stop_IT+0x12a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	f241 1311 	movw	r3, #4369	; 0x1111
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <HAL_TIM_PWM_Stop_IT+0x15a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1a      	ldr	r2, [r3, #32]
 8003848:	f244 4344 	movw	r3, #17476	; 0x4444
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_TIM_PWM_Stop_IT+0x15a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Stop_IT+0x16a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	e023      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Stop_IT+0x17a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	e01b      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Stop_IT+0x18a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003890:	e013      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Stop_IT+0x19a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038a0:	e00b      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x1b2>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_PWM_Stop_IT+0x1aa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b0:	e003      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x1b2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800
 80038d8:	40015000 	.word	0x40015000

080038dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0202 	mvn.w	r2, #2
 8003910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fb54 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fb46 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fd fdb3 	bl	80014a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d020      	beq.n	800398c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0204 	mvn.w	r2, #4
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb2e 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fb20 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fd fd8d 	bl	80014a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0208 	mvn.w	r2, #8
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2204      	movs	r2, #4
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fb08 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fafa 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd fd67 	bl	80014a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0210 	mvn.w	r2, #16
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2208      	movs	r2, #8
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fae2 	bl	8003fd4 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fad4 	bl	8003fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd fd41 	bl	80014a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0201 	mvn.w	r2, #1
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fab2 	bl	8003fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fff1 	bl	8004a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00c      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 ffe9 	bl	8004a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00c      	beq.n	8003abe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa95 	bl	8003fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0220 	mvn.w	r2, #32
 8003ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 ffb1 	bl	8004a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 ffbd 	bl	8004a80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 ffb5 	bl	8004a94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 ffad 	bl	8004aa8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 ffa5 	bl	8004abc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0ff      	b.n	8003d9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b14      	cmp	r3, #20
 8003ba6:	f200 80f0 	bhi.w	8003d8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003d8b 	.word	0x08003d8b
 8003bb8:	08003d8b 	.word	0x08003d8b
 8003bbc:	08003d8b 	.word	0x08003d8b
 8003bc0:	08003c45 	.word	0x08003c45
 8003bc4:	08003d8b 	.word	0x08003d8b
 8003bc8:	08003d8b 	.word	0x08003d8b
 8003bcc:	08003d8b 	.word	0x08003d8b
 8003bd0:	08003c87 	.word	0x08003c87
 8003bd4:	08003d8b 	.word	0x08003d8b
 8003bd8:	08003d8b 	.word	0x08003d8b
 8003bdc:	08003d8b 	.word	0x08003d8b
 8003be0:	08003cc7 	.word	0x08003cc7
 8003be4:	08003d8b 	.word	0x08003d8b
 8003be8:	08003d8b 	.word	0x08003d8b
 8003bec:	08003d8b 	.word	0x08003d8b
 8003bf0:	08003d09 	.word	0x08003d09
 8003bf4:	08003d8b 	.word	0x08003d8b
 8003bf8:	08003d8b 	.word	0x08003d8b
 8003bfc:	08003d8b 	.word	0x08003d8b
 8003c00:	08003d49 	.word	0x08003d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 faa0 	bl	8004150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6999      	ldr	r1, [r3, #24]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	619a      	str	r2, [r3, #24]
      break;
 8003c42:	e0a5      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fb1a 	bl	8004284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	619a      	str	r2, [r3, #24]
      break;
 8003c84:	e084      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fb8d 	bl	80043ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0208 	orr.w	r2, r2, #8
 8003ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0204 	bic.w	r2, r2, #4
 8003cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
      break;
 8003cc4:	e064      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fbff 	bl	80044d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	021a      	lsls	r2, r3, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	61da      	str	r2, [r3, #28]
      break;
 8003d06:	e043      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fc72 	bl	80045f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d46:	e023      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fcbc 	bl	80046cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d88:	e002      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop

08003da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e0e6      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x1ea>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <HAL_TIM_ConfigClockSource+0x1f4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f000 80b1 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e00:	4a65      	ldr	r2, [pc, #404]	; (8003f98 <HAL_TIM_ConfigClockSource+0x1f4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f200 80b6 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e08:	4a64      	ldr	r2, [pc, #400]	; (8003f9c <HAL_TIM_ConfigClockSource+0x1f8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f000 80a9 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e10:	4a62      	ldr	r2, [pc, #392]	; (8003f9c <HAL_TIM_ConfigClockSource+0x1f8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f200 80ae 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e18:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f000 80a1 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e20:	4a5f      	ldr	r2, [pc, #380]	; (8003fa0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	f200 80a6 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e28:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_TIM_ConfigClockSource+0x200>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f000 8099 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e30:	4a5c      	ldr	r2, [pc, #368]	; (8003fa4 <HAL_TIM_ConfigClockSource+0x200>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f200 809e 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e38:	4a5b      	ldr	r2, [pc, #364]	; (8003fa8 <HAL_TIM_ConfigClockSource+0x204>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f000 8091 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e40:	4a59      	ldr	r2, [pc, #356]	; (8003fa8 <HAL_TIM_ConfigClockSource+0x204>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f200 8096 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e4c:	f000 8089 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e54:	f200 808e 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5c:	d03e      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x138>
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	f200 8087 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	f000 8086 	beq.w	8003f7a <HAL_TIM_ConfigClockSource+0x1d6>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d87f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d01a      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x10a>
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d87b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d050      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x17e>
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d877      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d03c      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x15e>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d873      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d058      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x19e>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d86f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d064      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d86b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d060      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d867      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d05a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003eac:	e062      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 fced 	bl	800489c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e04f      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fcd6 	bl	800489c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e03c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fc48 	bl	80047a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2150      	movs	r1, #80	; 0x50
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fca1 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e02c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fc67 	bl	8004802 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2160      	movs	r1, #96	; 0x60
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc91 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 8003f40:	e01c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fc28 	bl	80047a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fc81 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e00c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 fc78 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 8003f72:	e003      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e000      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8003f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	00100070 	.word	0x00100070
 8003f9c:	00100050 	.word	0x00100050
 8003fa0:	00100040 	.word	0x00100040
 8003fa4:	00100030 	.word	0x00100030
 8003fa8:	00100020 	.word	0x00100020

08003fac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a48      	ldr	r2, [pc, #288]	; (8004130 <TIM_Base_SetConfig+0x134>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a45      	ldr	r2, [pc, #276]	; (8004134 <TIM_Base_SetConfig+0x138>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a44      	ldr	r2, [pc, #272]	; (8004138 <TIM_Base_SetConfig+0x13c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a43      	ldr	r2, [pc, #268]	; (800413c <TIM_Base_SetConfig+0x140>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a42      	ldr	r2, [pc, #264]	; (8004140 <TIM_Base_SetConfig+0x144>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a37      	ldr	r2, [pc, #220]	; (8004130 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a34      	ldr	r2, [pc, #208]	; (8004134 <TIM_Base_SetConfig+0x138>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a33      	ldr	r2, [pc, #204]	; (8004138 <TIM_Base_SetConfig+0x13c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a32      	ldr	r2, [pc, #200]	; (800413c <TIM_Base_SetConfig+0x140>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a32      	ldr	r2, [pc, #200]	; (8004144 <TIM_Base_SetConfig+0x148>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a31      	ldr	r2, [pc, #196]	; (8004148 <TIM_Base_SetConfig+0x14c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a30      	ldr	r2, [pc, #192]	; (800414c <TIM_Base_SetConfig+0x150>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <TIM_Base_SetConfig+0x144>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <TIM_Base_SetConfig+0x134>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_Base_SetConfig+0x100>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a19      	ldr	r2, [pc, #100]	; (800413c <TIM_Base_SetConfig+0x140>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x100>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a19      	ldr	r2, [pc, #100]	; (8004144 <TIM_Base_SetConfig+0x148>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x100>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a18      	ldr	r2, [pc, #96]	; (8004148 <TIM_Base_SetConfig+0x14c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x100>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <TIM_Base_SetConfig+0x150>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x100>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <TIM_Base_SetConfig+0x144>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  }
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40013400 	.word	0x40013400
 8004140:	40015000 	.word	0x40015000
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800

08004150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f023 0201 	bic.w	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 0302 	bic.w	r3, r3, #2
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a30      	ldr	r2, [pc, #192]	; (800426c <TIM_OC1_SetConfig+0x11c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <TIM_OC1_SetConfig+0x88>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a2f      	ldr	r2, [pc, #188]	; (8004270 <TIM_OC1_SetConfig+0x120>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00f      	beq.n	80041d8 <TIM_OC1_SetConfig+0x88>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a2e      	ldr	r2, [pc, #184]	; (8004274 <TIM_OC1_SetConfig+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00b      	beq.n	80041d8 <TIM_OC1_SetConfig+0x88>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <TIM_OC1_SetConfig+0x128>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <TIM_OC1_SetConfig+0x88>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a2c      	ldr	r2, [pc, #176]	; (800427c <TIM_OC1_SetConfig+0x12c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_OC1_SetConfig+0x88>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <TIM_OC1_SetConfig+0x130>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d10c      	bne.n	80041f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0308 	bic.w	r3, r3, #8
 80041de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <TIM_OC1_SetConfig+0x11c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_OC1_SetConfig+0xd2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <TIM_OC1_SetConfig+0x120>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_OC1_SetConfig+0xd2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <TIM_OC1_SetConfig+0x124>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_OC1_SetConfig+0xd2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1a      	ldr	r2, [pc, #104]	; (8004278 <TIM_OC1_SetConfig+0x128>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_OC1_SetConfig+0xd2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <TIM_OC1_SetConfig+0x12c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_OC1_SetConfig+0xd2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <TIM_OC1_SetConfig+0x130>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d111      	bne.n	8004246 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40013400 	.word	0x40013400
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	40015000 	.word	0x40015000

08004284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f023 0210 	bic.w	r2, r3, #16
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0320 	bic.w	r3, r3, #32
 80042d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <TIM_OC2_SetConfig+0x110>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_OC2_SetConfig+0x74>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <TIM_OC2_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC2_SetConfig+0x74>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <TIM_OC2_SetConfig+0x118>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10d      	bne.n	8004314 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004312:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <TIM_OC2_SetConfig+0x110>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <TIM_OC2_SetConfig+0xc0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <TIM_OC2_SetConfig+0x114>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00f      	beq.n	8004344 <TIM_OC2_SetConfig+0xc0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <TIM_OC2_SetConfig+0x11c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00b      	beq.n	8004344 <TIM_OC2_SetConfig+0xc0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <TIM_OC2_SetConfig+0x120>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_OC2_SetConfig+0xc0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <TIM_OC2_SetConfig+0x124>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC2_SetConfig+0xc0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <TIM_OC2_SetConfig+0x118>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d113      	bne.n	800436c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40015000 	.word	0x40015000
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <TIM_OC3_SetConfig+0x10c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_OC3_SetConfig+0x72>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <TIM_OC3_SetConfig+0x110>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC3_SetConfig+0x72>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <TIM_OC3_SetConfig+0x114>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10d      	bne.n	800443a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <TIM_OC3_SetConfig+0x10c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <TIM_OC3_SetConfig+0xbe>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <TIM_OC3_SetConfig+0x110>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00f      	beq.n	800446a <TIM_OC3_SetConfig+0xbe>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <TIM_OC3_SetConfig+0x118>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_OC3_SetConfig+0xbe>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <TIM_OC3_SetConfig+0x11c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_OC3_SetConfig+0xbe>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <TIM_OC3_SetConfig+0x120>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC3_SetConfig+0xbe>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <TIM_OC3_SetConfig+0x114>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d113      	bne.n	8004492 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40015000 	.word	0x40015000
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800

080044d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800451e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	031b      	lsls	r3, r3, #12
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <TIM_OC4_SetConfig+0x110>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_OC4_SetConfig+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <TIM_OC4_SetConfig+0x114>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC4_SetConfig+0x74>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <TIM_OC4_SetConfig+0x118>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10d      	bne.n	8004560 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	031b      	lsls	r3, r3, #12
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800455e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <TIM_OC4_SetConfig+0x110>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <TIM_OC4_SetConfig+0xc0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <TIM_OC4_SetConfig+0x114>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00f      	beq.n	8004590 <TIM_OC4_SetConfig+0xc0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <TIM_OC4_SetConfig+0x11c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00b      	beq.n	8004590 <TIM_OC4_SetConfig+0xc0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <TIM_OC4_SetConfig+0x120>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_OC4_SetConfig+0xc0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <TIM_OC4_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_OC4_SetConfig+0xc0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <TIM_OC4_SetConfig+0x118>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d113      	bne.n	80045b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004596:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800459e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40015000 	.word	0x40015000
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40014400 	.word	0x40014400
 80045f4:	40014800 	.word	0x40014800

080045f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800463c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <TIM_OC5_SetConfig+0xbc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <TIM_OC5_SetConfig+0x82>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <TIM_OC5_SetConfig+0xc0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00f      	beq.n	800467a <TIM_OC5_SetConfig+0x82>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a17      	ldr	r2, [pc, #92]	; (80046bc <TIM_OC5_SetConfig+0xc4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00b      	beq.n	800467a <TIM_OC5_SetConfig+0x82>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <TIM_OC5_SetConfig+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <TIM_OC5_SetConfig+0x82>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <TIM_OC5_SetConfig+0xcc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_OC5_SetConfig+0x82>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <TIM_OC5_SetConfig+0xd0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d109      	bne.n	800468e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004680:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40013400 	.word	0x40013400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	40015000 	.word	0x40015000

080046cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	051b      	lsls	r3, r3, #20
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <TIM_OC6_SetConfig+0xc0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <TIM_OC6_SetConfig+0x84>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a19      	ldr	r2, [pc, #100]	; (8004790 <TIM_OC6_SetConfig+0xc4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00f      	beq.n	8004750 <TIM_OC6_SetConfig+0x84>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <TIM_OC6_SetConfig+0xc8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_OC6_SetConfig+0x84>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <TIM_OC6_SetConfig+0xcc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d007      	beq.n	8004750 <TIM_OC6_SetConfig+0x84>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <TIM_OC6_SetConfig+0xd0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_OC6_SetConfig+0x84>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <TIM_OC6_SetConfig+0xd4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d109      	bne.n	8004764 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	40015000 	.word	0x40015000

080047a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 030a 	bic.w	r3, r3, #10
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 0210 	bic.w	r2, r3, #16
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800482c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800483e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	f043 0307 	orr.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	021a      	lsls	r2, r3, #8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	431a      	orrs	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2201      	movs	r2, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e06f      	b.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a31      	ldr	r2, [pc, #196]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2e      	ldr	r2, [pc, #184]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004984:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d018      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1a      	ldr	r2, [pc, #104]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10c      	bne.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40015000 	.word	0x40015000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40014000 	.word	0x40014000

08004a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e042      	b.n	8004b68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc ff3b 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2224      	movs	r2, #36	; 0x24
 8004afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 feb4 	bl	8005888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fbb5 	bl	8005290 <UART_SetConfig>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e01b      	b.n	8004b68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 ff33 	bl	80059cc <UART_CheckIdleState>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d137      	bne.n	8004bf8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UART_Receive_IT+0x24>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e030      	b.n	8004bfa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_UART_Receive_IT+0x94>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01f      	beq.n	8004be8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69f9      	ldr	r1, [r7, #28]
 8004bda:	6a3a      	ldr	r2, [r7, #32]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	461a      	mov	r2, r3
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f001 f804 	bl	8005bfc <UART_Start_Receive_IT>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3728      	adds	r7, #40	; 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40008000 	.word	0x40008000

08004c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0ba      	sub	sp, #232	; 0xe8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c36:	4013      	ands	r3, r2
 8004c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11b      	bne.n	8004c7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 82e3 	beq.w	8005238 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      }
      return;
 8004c7a:	e2dd      	b.n	8005238 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8123 	beq.w	8004ecc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	; (8004ec0 <HAL_UART_IRQHandler+0x2b8>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c96:	4b8b      	ldr	r3, [pc, #556]	; (8004ec4 <HAL_UART_IRQHandler+0x2bc>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8116 	beq.w	8004ecc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xc8>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d011      	beq.n	8004d00 <HAL_UART_IRQHandler+0xf8>
 8004cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2202      	movs	r2, #2
 8004cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d011      	beq.n	8004d30 <HAL_UART_IRQHandler+0x128>
 8004d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d4c:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_UART_IRQHandler+0x2b8>)
 8004d4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f043 0208 	orr.w	r2, r3, #8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d012      	beq.n	8004d9e <HAL_UART_IRQHandler+0x196>
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8249 	beq.w	800523c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d005      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d054      	beq.n	8004eac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 f81c 	bl	8005e40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d146      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1d9      	bne.n	8004e16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d017      	beq.n	8004e9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e72:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <HAL_UART_IRQHandler+0x2c0>)
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fc fffb 	bl	8001e78 <HAL_DMA_Abort_IT>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d019      	beq.n	8004ebc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004e96:	4610      	mov	r0, r2
 8004e98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	e00f      	b.n	8004ebc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f9e1 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea2:	e00b      	b.n	8004ebc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f9dd 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eaa:	e007      	b.n	8004ebc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f9d9 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004eba:	e1bf      	b.n	800523c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	bf00      	nop
    return;
 8004ebe:	e1bd      	b.n	800523c <HAL_UART_IRQHandler+0x634>
 8004ec0:	10000001 	.word	0x10000001
 8004ec4:	04000120 	.word	0x04000120
 8004ec8:	08005f0d 	.word	0x08005f0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 8153 	bne.w	800517c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 814c 	beq.w	800517c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8145 	beq.w	800517c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	f040 80bb 	bne.w	8005080 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 818f 	beq.w	8005240 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	f080 8187 	bcs.w	8005240 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 8087 	bne.w	800505e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1da      	bne.n	8004f50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e1      	bne.n	8004f9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e3      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800502a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800503e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005040:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800504c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e4      	bne.n	800501c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005058:	4618      	mov	r0, r3
 800505a:	f7fc feb4 	bl	8001dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005070:	b29b      	uxth	r3, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	b29b      	uxth	r3, r3
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8fd 	bl	8005278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800507e:	e0df      	b.n	8005240 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800508c:	b29b      	uxth	r3, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80d1 	beq.w	8005244 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80050a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80cc 	beq.w	8005244 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
 80050d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e4      	bne.n	80050ac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	623b      	str	r3, [r7, #32]
   return(result);
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800510a:	633a      	str	r2, [r7, #48]	; 0x30
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e1      	bne.n	80050e2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	69b9      	ldr	r1, [r7, #24]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	617b      	str	r3, [r7, #20]
   return(result);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e4      	bne.n	8005132 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800516e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f87f 	bl	8005278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800517a:	e063      	b.n	8005244 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800517c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <HAL_UART_IRQHandler+0x59e>
 8005188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800518c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800519c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fc12 	bl	80069c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051a4:	e051      	b.n	800524a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d014      	beq.n	80051dc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03a      	beq.n	8005248 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
    }
    return;
 80051da:	e035      	b.n	8005248 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HAL_UART_IRQHandler+0x5f4>
 80051e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fe9f 	bl	8005f38 <UART_EndTransmit_IT>
    return;
 80051fa:	e026      	b.n	800524a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_UART_IRQHandler+0x614>
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 fbeb 	bl	80069f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800521a:	e016      	b.n	800524a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800521c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d010      	beq.n	800524a <HAL_UART_IRQHandler+0x642>
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522c:	2b00      	cmp	r3, #0
 800522e:	da0c      	bge.n	800524a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 fbd3 	bl	80069dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005236:	e008      	b.n	800524a <HAL_UART_IRQHandler+0x642>
      return;
 8005238:	bf00      	nop
 800523a:	e006      	b.n	800524a <HAL_UART_IRQHandler+0x642>
    return;
 800523c:	bf00      	nop
 800523e:	e004      	b.n	800524a <HAL_UART_IRQHandler+0x642>
      return;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <HAL_UART_IRQHandler+0x642>
      return;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_UART_IRQHandler+0x642>
    return;
 8005248:	bf00      	nop
  }
}
 800524a:	37e8      	adds	r7, #232	; 0xe8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005294:	b08c      	sub	sp, #48	; 0x30
 8005296:	af00      	add	r7, sp, #0
 8005298:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4baa      	ldr	r3, [pc, #680]	; (8005568 <UART_SetConfig+0x2d8>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a9f      	ldr	r2, [pc, #636]	; (800556c <UART_SetConfig+0x2dc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f8:	4313      	orrs	r3, r2
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005306:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005310:	430b      	orrs	r3, r1
 8005312:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	f023 010f 	bic.w	r1, r3, #15
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a90      	ldr	r2, [pc, #576]	; (8005570 <UART_SetConfig+0x2e0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d125      	bne.n	8005380 <UART_SetConfig+0xf0>
 8005334:	4b8f      	ldr	r3, [pc, #572]	; (8005574 <UART_SetConfig+0x2e4>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b03      	cmp	r3, #3
 8005340:	d81a      	bhi.n	8005378 <UART_SetConfig+0xe8>
 8005342:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <UART_SetConfig+0xb8>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005359 	.word	0x08005359
 800534c:	08005369 	.word	0x08005369
 8005350:	08005361 	.word	0x08005361
 8005354:	08005371 	.word	0x08005371
 8005358:	2301      	movs	r3, #1
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535e:	e116      	b.n	800558e <UART_SetConfig+0x2fe>
 8005360:	2302      	movs	r3, #2
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005366:	e112      	b.n	800558e <UART_SetConfig+0x2fe>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536e:	e10e      	b.n	800558e <UART_SetConfig+0x2fe>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005376:	e10a      	b.n	800558e <UART_SetConfig+0x2fe>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537e:	e106      	b.n	800558e <UART_SetConfig+0x2fe>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a7c      	ldr	r2, [pc, #496]	; (8005578 <UART_SetConfig+0x2e8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d138      	bne.n	80053fc <UART_SetConfig+0x16c>
 800538a:	4b7a      	ldr	r3, [pc, #488]	; (8005574 <UART_SetConfig+0x2e4>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d82d      	bhi.n	80053f4 <UART_SetConfig+0x164>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x110>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053d5 	.word	0x080053d5
 80053a4:	080053f5 	.word	0x080053f5
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	080053f5 	.word	0x080053f5
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053f5 	.word	0x080053f5
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e0d8      	b.n	800558e <UART_SetConfig+0x2fe>
 80053dc:	2302      	movs	r3, #2
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e0d4      	b.n	800558e <UART_SetConfig+0x2fe>
 80053e4:	2304      	movs	r3, #4
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e0d0      	b.n	800558e <UART_SetConfig+0x2fe>
 80053ec:	2308      	movs	r3, #8
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f2:	e0cc      	b.n	800558e <UART_SetConfig+0x2fe>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053fa:	e0c8      	b.n	800558e <UART_SetConfig+0x2fe>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5e      	ldr	r2, [pc, #376]	; (800557c <UART_SetConfig+0x2ec>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d125      	bne.n	8005452 <UART_SetConfig+0x1c2>
 8005406:	4b5b      	ldr	r3, [pc, #364]	; (8005574 <UART_SetConfig+0x2e4>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d016      	beq.n	8005442 <UART_SetConfig+0x1b2>
 8005414:	2b30      	cmp	r3, #48	; 0x30
 8005416:	d818      	bhi.n	800544a <UART_SetConfig+0x1ba>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d00a      	beq.n	8005432 <UART_SetConfig+0x1a2>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d814      	bhi.n	800544a <UART_SetConfig+0x1ba>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <UART_SetConfig+0x19a>
 8005424:	2b10      	cmp	r3, #16
 8005426:	d008      	beq.n	800543a <UART_SetConfig+0x1aa>
 8005428:	e00f      	b.n	800544a <UART_SetConfig+0x1ba>
 800542a:	2300      	movs	r3, #0
 800542c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005430:	e0ad      	b.n	800558e <UART_SetConfig+0x2fe>
 8005432:	2302      	movs	r3, #2
 8005434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005438:	e0a9      	b.n	800558e <UART_SetConfig+0x2fe>
 800543a:	2304      	movs	r3, #4
 800543c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005440:	e0a5      	b.n	800558e <UART_SetConfig+0x2fe>
 8005442:	2308      	movs	r3, #8
 8005444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005448:	e0a1      	b.n	800558e <UART_SetConfig+0x2fe>
 800544a:	2310      	movs	r3, #16
 800544c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005450:	e09d      	b.n	800558e <UART_SetConfig+0x2fe>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a4a      	ldr	r2, [pc, #296]	; (8005580 <UART_SetConfig+0x2f0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d125      	bne.n	80054a8 <UART_SetConfig+0x218>
 800545c:	4b45      	ldr	r3, [pc, #276]	; (8005574 <UART_SetConfig+0x2e4>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005466:	2bc0      	cmp	r3, #192	; 0xc0
 8005468:	d016      	beq.n	8005498 <UART_SetConfig+0x208>
 800546a:	2bc0      	cmp	r3, #192	; 0xc0
 800546c:	d818      	bhi.n	80054a0 <UART_SetConfig+0x210>
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d00a      	beq.n	8005488 <UART_SetConfig+0x1f8>
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d814      	bhi.n	80054a0 <UART_SetConfig+0x210>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <UART_SetConfig+0x1f0>
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d008      	beq.n	8005490 <UART_SetConfig+0x200>
 800547e:	e00f      	b.n	80054a0 <UART_SetConfig+0x210>
 8005480:	2300      	movs	r3, #0
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005486:	e082      	b.n	800558e <UART_SetConfig+0x2fe>
 8005488:	2302      	movs	r3, #2
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548e:	e07e      	b.n	800558e <UART_SetConfig+0x2fe>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005496:	e07a      	b.n	800558e <UART_SetConfig+0x2fe>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549e:	e076      	b.n	800558e <UART_SetConfig+0x2fe>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e072      	b.n	800558e <UART_SetConfig+0x2fe>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a35      	ldr	r2, [pc, #212]	; (8005584 <UART_SetConfig+0x2f4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d12a      	bne.n	8005508 <UART_SetConfig+0x278>
 80054b2:	4b30      	ldr	r3, [pc, #192]	; (8005574 <UART_SetConfig+0x2e4>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c0:	d01a      	beq.n	80054f8 <UART_SetConfig+0x268>
 80054c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c6:	d81b      	bhi.n	8005500 <UART_SetConfig+0x270>
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054cc:	d00c      	beq.n	80054e8 <UART_SetConfig+0x258>
 80054ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d2:	d815      	bhi.n	8005500 <UART_SetConfig+0x270>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <UART_SetConfig+0x250>
 80054d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054dc:	d008      	beq.n	80054f0 <UART_SetConfig+0x260>
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x270>
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e6:	e052      	b.n	800558e <UART_SetConfig+0x2fe>
 80054e8:	2302      	movs	r3, #2
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ee:	e04e      	b.n	800558e <UART_SetConfig+0x2fe>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e04a      	b.n	800558e <UART_SetConfig+0x2fe>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fe:	e046      	b.n	800558e <UART_SetConfig+0x2fe>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005506:	e042      	b.n	800558e <UART_SetConfig+0x2fe>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a17      	ldr	r2, [pc, #92]	; (800556c <UART_SetConfig+0x2dc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d13a      	bne.n	8005588 <UART_SetConfig+0x2f8>
 8005512:	4b18      	ldr	r3, [pc, #96]	; (8005574 <UART_SetConfig+0x2e4>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800551c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005520:	d01a      	beq.n	8005558 <UART_SetConfig+0x2c8>
 8005522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005526:	d81b      	bhi.n	8005560 <UART_SetConfig+0x2d0>
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d00c      	beq.n	8005548 <UART_SetConfig+0x2b8>
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d815      	bhi.n	8005560 <UART_SetConfig+0x2d0>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <UART_SetConfig+0x2b0>
 8005538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553c:	d008      	beq.n	8005550 <UART_SetConfig+0x2c0>
 800553e:	e00f      	b.n	8005560 <UART_SetConfig+0x2d0>
 8005540:	2300      	movs	r3, #0
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e022      	b.n	800558e <UART_SetConfig+0x2fe>
 8005548:	2302      	movs	r3, #2
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e01e      	b.n	800558e <UART_SetConfig+0x2fe>
 8005550:	2304      	movs	r3, #4
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e01a      	b.n	800558e <UART_SetConfig+0x2fe>
 8005558:	2308      	movs	r3, #8
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e016      	b.n	800558e <UART_SetConfig+0x2fe>
 8005560:	2310      	movs	r3, #16
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005566:	e012      	b.n	800558e <UART_SetConfig+0x2fe>
 8005568:	cfff69f3 	.word	0xcfff69f3
 800556c:	40008000 	.word	0x40008000
 8005570:	40013800 	.word	0x40013800
 8005574:	40021000 	.word	0x40021000
 8005578:	40004400 	.word	0x40004400
 800557c:	40004800 	.word	0x40004800
 8005580:	40004c00 	.word	0x40004c00
 8005584:	40005000 	.word	0x40005000
 8005588:	2310      	movs	r3, #16
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4aae      	ldr	r2, [pc, #696]	; (800584c <UART_SetConfig+0x5bc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	f040 8097 	bne.w	80056c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d823      	bhi.n	80055ea <UART_SetConfig+0x35a>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0x318>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055eb 	.word	0x080055eb
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055eb 	.word	0x080055eb
 80055b8:	080055db 	.word	0x080055db
 80055bc:	080055eb 	.word	0x080055eb
 80055c0:	080055eb 	.word	0x080055eb
 80055c4:	080055eb 	.word	0x080055eb
 80055c8:	080055e3 	.word	0x080055e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055cc:	f7fd fbde 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 80055d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055d2:	e010      	b.n	80055f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d4:	4b9e      	ldr	r3, [pc, #632]	; (8005850 <UART_SetConfig+0x5c0>)
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055d8:	e00d      	b.n	80055f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055da:	f7fd fb69 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055e0:	e009      	b.n	80055f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055e8:	e005      	b.n	80055f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8130 	beq.w	800585e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	4a94      	ldr	r2, [pc, #592]	; (8005854 <UART_SetConfig+0x5c4>)
 8005604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005608:	461a      	mov	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005610:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	4413      	add	r3, r2
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	429a      	cmp	r2, r3
 8005620:	d305      	bcc.n	800562e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	429a      	cmp	r2, r3
 800562c:	d903      	bls.n	8005636 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005634:	e113      	b.n	800585e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	2200      	movs	r2, #0
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	60fa      	str	r2, [r7, #12]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	4a84      	ldr	r2, [pc, #528]	; (8005854 <UART_SetConfig+0x5c4>)
 8005644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005648:	b29b      	uxth	r3, r3
 800564a:	2200      	movs	r2, #0
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005654:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005658:	f7fb f9cc 	bl	80009f4 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	020b      	lsls	r3, r1, #8
 800566e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005672:	0202      	lsls	r2, r0, #8
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	6849      	ldr	r1, [r1, #4]
 8005678:	0849      	lsrs	r1, r1, #1
 800567a:	2000      	movs	r0, #0
 800567c:	460c      	mov	r4, r1
 800567e:	4605      	mov	r5, r0
 8005680:	eb12 0804 	adds.w	r8, r2, r4
 8005684:	eb43 0905 	adc.w	r9, r3, r5
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	469a      	mov	sl, r3
 8005690:	4693      	mov	fp, r2
 8005692:	4652      	mov	r2, sl
 8005694:	465b      	mov	r3, fp
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f7fb f9ab 	bl	80009f4 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4613      	mov	r3, r2
 80056a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ac:	d308      	bcc.n	80056c0 <UART_SetConfig+0x430>
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b4:	d204      	bcs.n	80056c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e0ce      	b.n	800585e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056c6:	e0ca      	b.n	800585e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d0:	d166      	bne.n	80057a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80056d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d827      	bhi.n	800572a <UART_SetConfig+0x49a>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x450>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fd fb42 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800570a:	e014      	b.n	8005736 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fd fb54 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b4e      	ldr	r3, [pc, #312]	; (8005850 <UART_SetConfig+0x5c0>)
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fd fac9 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8090 	beq.w	800585e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	4a44      	ldr	r2, [pc, #272]	; (8005854 <UART_SetConfig+0x5c4>)
 8005744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005748:	461a      	mov	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005750:	005a      	lsls	r2, r3, #1
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	441a      	add	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d916      	bls.n	8005798 <UART_SetConfig+0x508>
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d212      	bcs.n	8005798 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f023 030f 	bic.w	r3, r3, #15
 800577a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	b29a      	uxth	r2, r3
 8005788:	8bfb      	ldrh	r3, [r7, #30]
 800578a:	4313      	orrs	r3, r2
 800578c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	8bfa      	ldrh	r2, [r7, #30]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e062      	b.n	800585e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800579e:	e05e      	b.n	800585e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d828      	bhi.n	80057fa <UART_SetConfig+0x56a>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x520>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	080057fb 	.word	0x080057fb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	080057fb 	.word	0x080057fb
 80057cc:	080057fb 	.word	0x080057fb
 80057d0:	080057f3 	.word	0x080057f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fd fada 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 80057d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057da:	e014      	b.n	8005806 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fd faec 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e2:	e010      	b.n	8005806 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e4:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <UART_SetConfig+0x5c0>)
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057e8:	e00d      	b.n	8005806 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ea:	f7fd fa61 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057f0:	e009      	b.n	8005806 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057f8:	e005      	b.n	8005806 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005804:	bf00      	nop
    }

    if (pclk != 0U)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d028      	beq.n	800585e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	4a10      	ldr	r2, [pc, #64]	; (8005854 <UART_SetConfig+0x5c4>)
 8005812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005816:	461a      	mov	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	fbb3 f2f2 	udiv	r2, r3, r2
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	441a      	add	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2b0f      	cmp	r3, #15
 8005834:	d910      	bls.n	8005858 <UART_SetConfig+0x5c8>
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583c:	d20c      	bcs.n	8005858 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	b29a      	uxth	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60da      	str	r2, [r3, #12]
 8005848:	e009      	b.n	800585e <UART_SetConfig+0x5ce>
 800584a:	bf00      	nop
 800584c:	40008000 	.word	0x40008000
 8005850:	00f42400 	.word	0x00f42400
 8005854:	08006c98 	.word	0x08006c98
      }
      else
      {
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2201      	movs	r2, #1
 8005862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2201      	movs	r2, #1
 800586a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2200      	movs	r2, #0
 8005878:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800587a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800587e:	4618      	mov	r0, r3
 8005880:	3730      	adds	r7, #48	; 0x30
 8005882:	46bd      	mov	sp, r7
 8005884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01a      	beq.n	800599e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d10a      	bne.n	800599e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b098      	sub	sp, #96	; 0x60
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059dc:	f7fc f8b6 	bl	8001b4c <HAL_GetTick>
 80059e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d12f      	bne.n	8005a50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	2200      	movs	r2, #0
 80059fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f88e 	bl	8005b20 <UART_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d022      	beq.n	8005a50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a28:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e063      	b.n	8005b18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d149      	bne.n	8005af2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	2200      	movs	r2, #0
 8005a68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f857 	bl	8005b20 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d03c      	beq.n	8005af2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	623b      	str	r3, [r7, #32]
   return(result);
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a96:	633b      	str	r3, [r7, #48]	; 0x30
 8005a98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e6      	bne.n	8005a78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	61fa      	str	r2, [r7, #28]
 8005acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e012      	b.n	8005b18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3758      	adds	r7, #88	; 0x58
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b30:	e04f      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d04b      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3a:	f7fc f807 	bl	8001b4c <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d302      	bcc.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e04e      	b.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d037      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b80      	cmp	r3, #128	; 0x80
 8005b66:	d034      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d031      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d110      	bne.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2208      	movs	r2, #8
 8005b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f95b 	bl	8005e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e029      	b.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bac:	d111      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f941 	bl	8005e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e00f      	b.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d0a0      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b0a3      	sub	sp, #140	; 0x8c
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	d10e      	bne.n	8005c4e <UART_Start_Receive_IT+0x52>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d105      	bne.n	8005c44 <UART_Start_Receive_IT+0x48>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c42:	e02d      	b.n	8005ca0 <UART_Start_Receive_IT+0xa4>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c4c:	e028      	b.n	8005ca0 <UART_Start_Receive_IT+0xa4>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <UART_Start_Receive_IT+0x76>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <UART_Start_Receive_IT+0x6c>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	22ff      	movs	r2, #255	; 0xff
 8005c62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c66:	e01b      	b.n	8005ca0 <UART_Start_Receive_IT+0xa4>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	227f      	movs	r2, #127	; 0x7f
 8005c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c70:	e016      	b.n	8005ca0 <UART_Start_Receive_IT+0xa4>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c7a:	d10d      	bne.n	8005c98 <UART_Start_Receive_IT+0x9c>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <UART_Start_Receive_IT+0x92>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	227f      	movs	r2, #127	; 0x7f
 8005c88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c8c:	e008      	b.n	8005ca0 <UART_Start_Receive_IT+0xa4>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	223f      	movs	r2, #63	; 0x3f
 8005c92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c96:	e003      	b.n	8005ca0 <UART_Start_Receive_IT+0xa4>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2222      	movs	r2, #34	; 0x22
 8005cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005cd4:	673a      	str	r2, [r7, #112]	; 0x70
 8005cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e3      	bne.n	8005cb0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf0:	d14f      	bne.n	8005d92 <UART_Start_Receive_IT+0x196>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d349      	bcc.n	8005d92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d107      	bne.n	8005d18 <UART_Start_Receive_IT+0x11c>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a47      	ldr	r2, [pc, #284]	; (8005e30 <UART_Start_Receive_IT+0x234>)
 8005d14:	675a      	str	r2, [r3, #116]	; 0x74
 8005d16:	e002      	b.n	8005d1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a46      	ldr	r2, [pc, #280]	; (8005e34 <UART_Start_Receive_IT+0x238>)
 8005d1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01a      	beq.n	8005d5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e4      	bne.n	8005d26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <UART_Start_Receive_IT+0x160>
 8005d90:	e046      	b.n	8005e20 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	d107      	bne.n	8005dac <UART_Start_Receive_IT+0x1b0>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d103      	bne.n	8005dac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <UART_Start_Receive_IT+0x23c>)
 8005da8:	675a      	str	r2, [r3, #116]	; 0x74
 8005daa:	e002      	b.n	8005db2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a23      	ldr	r2, [pc, #140]	; (8005e3c <UART_Start_Receive_IT+0x240>)
 8005db0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d019      	beq.n	8005dee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005dce:	677b      	str	r3, [r7, #116]	; 0x74
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_Start_Receive_IT+0x1be>
 8005dec:	e018      	b.n	8005e20 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f043 0320 	orr.w	r3, r3, #32
 8005e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	69f9      	ldr	r1, [r7, #28]
 8005e12:	6a3a      	ldr	r2, [r7, #32]
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	378c      	adds	r7, #140	; 0x8c
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	08006661 	.word	0x08006661
 8005e34:	08006301 	.word	0x08006301
 8005e38:	08006149 	.word	0x08006149
 8005e3c:	08005f91 	.word	0x08005f91

08005e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b095      	sub	sp, #84	; 0x54
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e6      	bne.n	8005e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e3      	bne.n	8005e7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d118      	bne.n	8005eec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f023 0310 	bic.w	r3, r3, #16
 8005ece:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6979      	ldr	r1, [r7, #20]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e6      	bne.n	8005eba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f00:	bf00      	nop
 8005f02:	3754      	adds	r7, #84	; 0x54
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff f99a 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6979      	ldr	r1, [r7, #20]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e6      	bne.n	8005f40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff f965 	bl	8005250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f86:	bf00      	nop
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b09c      	sub	sp, #112	; 0x70
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa8:	2b22      	cmp	r3, #34	; 0x22
 8005faa:	f040 80be 	bne.w	800612a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005fbc:	b2d9      	uxtb	r1, r3
 8005fbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc8:	400a      	ands	r2, r1
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 80a1 	bne.w	800613a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800600c:	66bb      	str	r3, [r7, #104]	; 0x68
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006016:	65bb      	str	r3, [r7, #88]	; 0x58
 8006018:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800601c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e6      	bne.n	8005ff8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3308      	adds	r3, #8
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	667b      	str	r3, [r7, #100]	; 0x64
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800604a:	647a      	str	r2, [r7, #68]	; 0x44
 800604c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a33      	ldr	r2, [pc, #204]	; (8006144 <UART_RxISR_8BIT+0x1b4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d01f      	beq.n	80060bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d018      	beq.n	80060bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	623b      	str	r3, [r7, #32]
   return(result);
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800609e:	663b      	str	r3, [r7, #96]	; 0x60
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a8:	633b      	str	r3, [r7, #48]	; 0x30
 80060aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e6      	bne.n	800608a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d12e      	bne.n	8006122 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69b9      	ldr	r1, [r7, #24]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	617b      	str	r3, [r7, #20]
   return(result);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b10      	cmp	r3, #16
 8006108:	d103      	bne.n	8006112 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2210      	movs	r2, #16
 8006110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff f8ac 	bl	8005278 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006120:	e00b      	b.n	800613a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fa fe04 	bl	8000d30 <HAL_UART_RxCpltCallback>
}
 8006128:	e007      	b.n	800613a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699a      	ldr	r2, [r3, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0208 	orr.w	r2, r2, #8
 8006138:	619a      	str	r2, [r3, #24]
}
 800613a:	bf00      	nop
 800613c:	3770      	adds	r7, #112	; 0x70
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40008000 	.word	0x40008000

08006148 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b09c      	sub	sp, #112	; 0x70
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006156:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006160:	2b22      	cmp	r3, #34	; 0x22
 8006162:	f040 80be 	bne.w	80062e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006174:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006176:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800617a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800617e:	4013      	ands	r3, r2
 8006180:	b29a      	uxth	r2, r3
 8006182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006184:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 80a1 	bne.w	80062f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c4:	667b      	str	r3, [r7, #100]	; 0x64
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ce:	657b      	str	r3, [r7, #84]	; 0x54
 80061d0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e6      	bne.n	80061b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006202:	643a      	str	r2, [r7, #64]	; 0x40
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a33      	ldr	r2, [pc, #204]	; (80062fc <UART_RxISR_16BIT+0x1b4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01f      	beq.n	8006274 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006262:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d12e      	bne.n	80062da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0310 	bic.w	r3, r3, #16
 8006296:	65bb      	str	r3, [r7, #88]	; 0x58
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6979      	ldr	r1, [r7, #20]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	613b      	str	r3, [r7, #16]
   return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e6      	bne.n	8006282 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d103      	bne.n	80062ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fe ffd0 	bl	8005278 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062d8:	e00b      	b.n	80062f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fa fd28 	bl	8000d30 <HAL_UART_RxCpltCallback>
}
 80062e0:	e007      	b.n	80062f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0208 	orr.w	r2, r2, #8
 80062f0:	619a      	str	r2, [r3, #24]
}
 80062f2:	bf00      	nop
 80062f4:	3770      	adds	r7, #112	; 0x70
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40008000 	.word	0x40008000

08006300 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b0ac      	sub	sp, #176	; 0xb0
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800630e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006336:	2b22      	cmp	r3, #34	; 0x22
 8006338:	f040 8182 	bne.w	8006640 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006342:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006346:	e125      	b.n	8006594 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006352:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006356:	b2d9      	uxtb	r1, r3
 8006358:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006362:	400a      	ands	r2, r1
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800638e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d053      	beq.n	8006442 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800639a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d011      	beq.n	80063ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80063a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2201      	movs	r2, #1
 80063b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80063d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2202      	movs	r2, #2
 80063e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f0:	f043 0204 	orr.w	r2, r3, #4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d011      	beq.n	800642a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2204      	movs	r2, #4
 8006418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f043 0202 	orr.w	r2, r3, #2
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fe ff15 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 80a2 	bne.w	8006594 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006474:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006478:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e4      	bne.n	8006450 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80064b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80064b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80064bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e1      	bne.n	8006486 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a5f      	ldr	r2, [pc, #380]	; (8006658 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d021      	beq.n	8006524 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01a      	beq.n	8006524 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006510:	657b      	str	r3, [r7, #84]	; 0x54
 8006512:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006516:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800651e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e4      	bne.n	80064ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d130      	bne.n	800658e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f023 0310 	bic.w	r3, r3, #16
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006554:	643b      	str	r3, [r7, #64]	; 0x40
 8006556:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800655a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e4      	bne.n	8006532 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d103      	bne.n	800657e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2210      	movs	r2, #16
 800657c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fe fe76 	bl	8005278 <HAL_UARTEx_RxEventCallback>
 800658c:	e002      	b.n	8006594 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fa fbce 	bl	8000d30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006594:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006598:	2b00      	cmp	r3, #0
 800659a:	d006      	beq.n	80065aa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800659c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f47f aecf 	bne.w	8006348 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d049      	beq.n	8006650 <UART_RxISR_8BIT_FIFOEN+0x350>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d242      	bcs.n	8006650 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80065ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e3      	bne.n	80065ca <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a15      	ldr	r2, [pc, #84]	; (800665c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006606:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	60bb      	str	r3, [r7, #8]
   return(result);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f043 0320 	orr.w	r3, r3, #32
 800661c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6979      	ldr	r1, [r7, #20]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	613b      	str	r3, [r7, #16]
   return(result);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e4      	bne.n	8006608 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800663e:	e007      	b.n	8006650 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	619a      	str	r2, [r3, #24]
}
 8006650:	bf00      	nop
 8006652:	37b0      	adds	r7, #176	; 0xb0
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40008000 	.word	0x40008000
 800665c:	08005f91 	.word	0x08005f91

08006660 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b0ae      	sub	sp, #184	; 0xb8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800666e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006696:	2b22      	cmp	r3, #34	; 0x22
 8006698:	f040 8186 	bne.w	80069a8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066a6:	e129      	b.n	80068fc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80066ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80066be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80066c2:	4013      	ands	r3, r2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	1c9a      	adds	r2, r3, #2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80066f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d053      	beq.n	80067a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d011      	beq.n	800672e <UART_RxISR_16BIT_FIFOEN+0xce>
 800670a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2201      	movs	r2, #1
 800671c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006724:	f043 0201 	orr.w	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800672e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d011      	beq.n	800675e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800673a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2202      	movs	r2, #2
 800674c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f043 0204 	orr.w	r2, r3, #4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d011      	beq.n	800678e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800676a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2204      	movs	r2, #4
 800677c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006784:	f043 0202 	orr.w	r2, r3, #2
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	2b00      	cmp	r3, #0
 8006796:	d006      	beq.n	80067a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fe fd63 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 80a4 	bne.w	80068fc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e2      	bne.n	80067b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006816:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006818:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800681c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e1      	bne.n	80067ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a5f      	ldr	r2, [pc, #380]	; (80069c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d021      	beq.n	800688c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01a      	beq.n	800688c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800686a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006878:	65bb      	str	r3, [r7, #88]	; 0x58
 800687a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800687e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e4      	bne.n	8006856 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d130      	bne.n	80068f6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	f023 0310 	bic.w	r3, r3, #16
 80068ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068bc:	647b      	str	r3, [r7, #68]	; 0x44
 80068be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e4      	bne.n	800689a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f003 0310 	and.w	r3, r3, #16
 80068da:	2b10      	cmp	r3, #16
 80068dc:	d103      	bne.n	80068e6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2210      	movs	r2, #16
 80068e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fe fcc2 	bl	8005278 <HAL_UARTEx_RxEventCallback>
 80068f4:	e002      	b.n	80068fc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fa fa1a 	bl	8000d30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006900:	2b00      	cmp	r3, #0
 8006902:	d006      	beq.n	8006912 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	f47f aecb 	bne.w	80066a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006918:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800691c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006920:	2b00      	cmp	r3, #0
 8006922:	d049      	beq.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800692a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800692e:	429a      	cmp	r2, r3
 8006930:	d242      	bcs.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006956:	633a      	str	r2, [r7, #48]	; 0x30
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800696e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	60fb      	str	r3, [r7, #12]
   return(result);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f043 0320 	orr.w	r3, r3, #32
 8006984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	69b9      	ldr	r1, [r7, #24]
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	617b      	str	r3, [r7, #20]
   return(result);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e4      	bne.n	8006970 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069a6:	e007      	b.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0208 	orr.w	r2, r2, #8
 80069b6:	619a      	str	r2, [r3, #24]
}
 80069b8:	bf00      	nop
 80069ba:	37b8      	adds	r7, #184	; 0xb8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40008000 	.word	0x40008000
 80069c4:	08006149 	.word	0x08006149

080069c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <HAL_UARTEx_DisableFifoMode+0x16>
 8006a16:	2302      	movs	r3, #2
 8006a18:	e027      	b.n	8006a6a <HAL_UARTEx_DisableFifoMode+0x66>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2224      	movs	r2, #36	; 0x24
 8006a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e02d      	b.n	8006aea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2224      	movs	r2, #36	; 0x24
 8006a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f850 	bl	8006b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e02d      	b.n	8006b66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2224      	movs	r2, #36	; 0x24
 8006b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f812 	bl	8006b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d108      	bne.n	8006b92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b90:	e031      	b.n	8006bf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b92:	2308      	movs	r3, #8
 8006b94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b96:	2308      	movs	r3, #8
 8006b98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	0e5b      	lsrs	r3, r3, #25
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	0f5b      	lsrs	r3, r3, #29
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	7b3a      	ldrb	r2, [r7, #12]
 8006bbe:	4911      	ldr	r1, [pc, #68]	; (8006c04 <UARTEx_SetNbDataToProcess+0x94>)
 8006bc0:	5c8a      	ldrb	r2, [r1, r2]
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bc6:	7b3a      	ldrb	r2, [r7, #12]
 8006bc8:	490f      	ldr	r1, [pc, #60]	; (8006c08 <UARTEx_SetNbDataToProcess+0x98>)
 8006bca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	7b7a      	ldrb	r2, [r7, #13]
 8006bdc:	4909      	ldr	r1, [pc, #36]	; (8006c04 <UARTEx_SetNbDataToProcess+0x94>)
 8006bde:	5c8a      	ldrb	r2, [r1, r2]
 8006be0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006be4:	7b7a      	ldrb	r2, [r7, #13]
 8006be6:	4908      	ldr	r1, [pc, #32]	; (8006c08 <UARTEx_SetNbDataToProcess+0x98>)
 8006be8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	08006cb0 	.word	0x08006cb0
 8006c08:	08006cb8 	.word	0x08006cb8

08006c0c <__libc_init_array>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4d0d      	ldr	r5, [pc, #52]	; (8006c44 <__libc_init_array+0x38>)
 8006c10:	4c0d      	ldr	r4, [pc, #52]	; (8006c48 <__libc_init_array+0x3c>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	2600      	movs	r6, #0
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	d109      	bne.n	8006c30 <__libc_init_array+0x24>
 8006c1c:	4d0b      	ldr	r5, [pc, #44]	; (8006c4c <__libc_init_array+0x40>)
 8006c1e:	4c0c      	ldr	r4, [pc, #48]	; (8006c50 <__libc_init_array+0x44>)
 8006c20:	f000 f820 	bl	8006c64 <_init>
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	2600      	movs	r6, #0
 8006c2a:	42a6      	cmp	r6, r4
 8006c2c:	d105      	bne.n	8006c3a <__libc_init_array+0x2e>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c34:	4798      	blx	r3
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7ee      	b.n	8006c18 <__libc_init_array+0xc>
 8006c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3e:	4798      	blx	r3
 8006c40:	3601      	adds	r6, #1
 8006c42:	e7f2      	b.n	8006c2a <__libc_init_array+0x1e>
 8006c44:	08006cc8 	.word	0x08006cc8
 8006c48:	08006cc8 	.word	0x08006cc8
 8006c4c:	08006cc8 	.word	0x08006cc8
 8006c50:	08006ccc 	.word	0x08006ccc

08006c54 <memset>:
 8006c54:	4402      	add	r2, r0
 8006c56:	4603      	mov	r3, r0
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d100      	bne.n	8006c5e <memset+0xa>
 8006c5c:	4770      	bx	lr
 8006c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c62:	e7f9      	b.n	8006c58 <memset+0x4>

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
