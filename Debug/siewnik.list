
siewnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b8  080055b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080055cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080055cc  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dfc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fd  00000000  00000000  00033e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00036538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000375b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef2e  00000000  00000000  00038530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136ee  00000000  00000000  0005745e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca4c0  00000000  00000000  0006ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013500c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  0013505c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005558 	.word	0x08005558

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005558 	.word	0x08005558

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b974 	b.w	8000cf4 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468e      	mov	lr, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14d      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4694      	mov	ip, r2
 8000a36:	d969      	bls.n	8000b0c <__udivmoddi4+0xe8>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b152      	cbz	r2, 8000a54 <__udivmoddi4+0x30>
 8000a3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a42:	f1c2 0120 	rsb	r1, r2, #32
 8000a46:	fa20 f101 	lsr.w	r1, r0, r1
 8000a4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a52:	4094      	lsls	r4, r2
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	0c21      	lsrs	r1, r4, #16
 8000a5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a5e:	fa1f f78c 	uxth.w	r7, ip
 8000a62:	fb08 e316 	mls	r3, r8, r6, lr
 8000a66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a6a:	fb06 f107 	mul.w	r1, r6, r7
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a7a:	f080 811f 	bcs.w	8000cbc <__udivmoddi4+0x298>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 811c 	bls.w	8000cbc <__udivmoddi4+0x298>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3310 	mls	r3, r8, r0, r3
 8000a94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a98:	fb00 f707 	mul.w	r7, r0, r7
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	d90a      	bls.n	8000ab6 <__udivmoddi4+0x92>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa8:	f080 810a 	bcs.w	8000cc0 <__udivmoddi4+0x29c>
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	f240 8107 	bls.w	8000cc0 <__udivmoddi4+0x29c>
 8000ab2:	4464      	add	r4, ip
 8000ab4:	3802      	subs	r0, #2
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	1be4      	subs	r4, r4, r7
 8000abc:	2600      	movs	r6, #0
 8000abe:	b11d      	cbz	r5, 8000ac8 <__udivmoddi4+0xa4>
 8000ac0:	40d4      	lsrs	r4, r2
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0xc2>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	f000 80ef 	beq.w	8000cb6 <__udivmoddi4+0x292>
 8000ad8:	2600      	movs	r6, #0
 8000ada:	e9c5 0100 	strd	r0, r1, [r5]
 8000ade:	4630      	mov	r0, r6
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	fab3 f683 	clz	r6, r3
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d14a      	bne.n	8000b84 <__udivmoddi4+0x160>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xd4>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 80f9 	bhi.w	8000cea <__udivmoddi4+0x2c6>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb61 0303 	sbc.w	r3, r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	469e      	mov	lr, r3
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d0e0      	beq.n	8000ac8 <__udivmoddi4+0xa4>
 8000b06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b0a:	e7dd      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000b0c:	b902      	cbnz	r2, 8000b10 <__udivmoddi4+0xec>
 8000b0e:	deff      	udf	#255	; 0xff
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	f040 8092 	bne.w	8000c3e <__udivmoddi4+0x21a>
 8000b1a:	eba1 010c 	sub.w	r1, r1, ip
 8000b1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b22:	fa1f fe8c 	uxth.w	lr, ip
 8000b26:	2601      	movs	r6, #1
 8000b28:	0c20      	lsrs	r0, r4, #16
 8000b2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b36:	fb0e f003 	mul.w	r0, lr, r3
 8000b3a:	4288      	cmp	r0, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x12c>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x12a>
 8000b48:	4288      	cmp	r0, r1
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2c0>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	1a09      	subs	r1, r1, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b58:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b60:	fb0e fe00 	mul.w	lr, lr, r0
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x156>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x154>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 80bb 	bhi.w	8000cee <__udivmoddi4+0x2ca>
 8000b78:	4608      	mov	r0, r1
 8000b7a:	eba4 040e 	sub.w	r4, r4, lr
 8000b7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b82:	e79c      	b.n	8000abe <__udivmoddi4+0x9a>
 8000b84:	f1c6 0720 	rsb	r7, r6, #32
 8000b88:	40b3      	lsls	r3, r6
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa20 f407 	lsr.w	r4, r0, r7
 8000b96:	fa01 f306 	lsl.w	r3, r1, r6
 8000b9a:	431c      	orrs	r4, r3
 8000b9c:	40f9      	lsrs	r1, r7
 8000b9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ba6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000baa:	0c20      	lsrs	r0, r4, #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b8>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bcc:	f080 8088 	bcs.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f240 8085 	bls.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bda:	4461      	add	r1, ip
 8000bdc:	1a09      	subs	r1, r1, r0
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000be4:	fb09 1110 	mls	r1, r9, r0, r1
 8000be8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf0:	458e      	cmp	lr, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1e2>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfc:	d26c      	bcs.n	8000cd8 <__udivmoddi4+0x2b4>
 8000bfe:	458e      	cmp	lr, r1
 8000c00:	d96a      	bls.n	8000cd8 <__udivmoddi4+0x2b4>
 8000c02:	3802      	subs	r0, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c0e:	eba1 010e 	sub.w	r1, r1, lr
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	46c8      	mov	r8, r9
 8000c16:	46a6      	mov	lr, r4
 8000c18:	d356      	bcc.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c1a:	d053      	beq.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c1c:	b15d      	cbz	r5, 8000c36 <__udivmoddi4+0x212>
 8000c1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c22:	eb61 010e 	sbc.w	r1, r1, lr
 8000c26:	fa01 f707 	lsl.w	r7, r1, r7
 8000c2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c2e:	40f1      	lsrs	r1, r6
 8000c30:	431f      	orrs	r7, r3
 8000c32:	e9c5 7100 	strd	r7, r1, [r5]
 8000c36:	2600      	movs	r6, #0
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	40d8      	lsrs	r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	fa21 f303 	lsr.w	r3, r1, r3
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4301      	orrs	r1, r0
 8000c50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c60:	0c0b      	lsrs	r3, r1, #16
 8000c62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c66:	fb00 f60e 	mul.w	r6, r0, lr
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x260>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c7a:	d22f      	bcs.n	8000cdc <__udivmoddi4+0x2b8>
 8000c7c:	429e      	cmp	r6, r3
 8000c7e:	d92d      	bls.n	8000cdc <__udivmoddi4+0x2b8>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	b289      	uxth	r1, r1
 8000c88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb06 f30e 	mul.w	r3, r6, lr
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x28a>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ca4:	d216      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d914      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000caa:	3e02      	subs	r6, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cb4:	e738      	b.n	8000b28 <__udivmoddi4+0x104>
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e705      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e3      	b.n	8000a88 <__udivmoddi4+0x64>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6f8      	b.n	8000ab6 <__udivmoddi4+0x92>
 8000cc4:	454b      	cmp	r3, r9
 8000cc6:	d2a9      	bcs.n	8000c1c <__udivmoddi4+0x1f8>
 8000cc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ccc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7a3      	b.n	8000c1c <__udivmoddi4+0x1f8>
 8000cd4:	4646      	mov	r6, r8
 8000cd6:	e7ea      	b.n	8000cae <__udivmoddi4+0x28a>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	e794      	b.n	8000c06 <__udivmoddi4+0x1e2>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	e7d1      	b.n	8000c84 <__udivmoddi4+0x260>
 8000ce0:	46d0      	mov	r8, sl
 8000ce2:	e77b      	b.n	8000bdc <__udivmoddi4+0x1b8>
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	4461      	add	r1, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x12c>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e709      	b.n	8000b02 <__udivmoddi4+0xde>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	e742      	b.n	8000b7a <__udivmoddi4+0x156>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <_dropper_StepIRQ>:

#include "dropper.h"

uint32_t stepCounter = 0;

void _dropper_StepIRQ(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	++stepCounter;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <_dropper_StepIRQ+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <_dropper_StepIRQ+0x18>)
 8000d04:	6013      	str	r3, [r2, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20000028 	.word	0x20000028

08000d14 <_dropper_Init>:

void _dropper_Init(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEED_CHANNEL_1_PORT, SEED_CHANNEL_1_PIN, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1e:	4839      	ldr	r0, [pc, #228]	; (8000e04 <_dropper_Init+0xf0>)
 8000d20:	f001 f932 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_2_PORT, SEED_CHANNEL_2_PIN, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	4837      	ldr	r0, [pc, #220]	; (8000e08 <_dropper_Init+0xf4>)
 8000d2c:	f001 f92c 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_3_PORT, SEED_CHANNEL_3_PIN, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f001 f925 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_4_PORT, SEED_CHANNEL_4_PIN, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f001 f91e 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_5_PORT, SEED_CHANNEL_5_PIN, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	482d      	ldr	r0, [pc, #180]	; (8000e08 <_dropper_Init+0xf4>)
 8000d54:	f001 f918 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_6_PORT, SEED_CHANNEL_6_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	482a      	ldr	r0, [pc, #168]	; (8000e08 <_dropper_Init+0xf4>)
 8000d5e:	f001 f913 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PORT, VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PIN, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	4828      	ldr	r0, [pc, #160]	; (8000e08 <_dropper_Init+0xf4>)
 8000d68:	f001 f90e 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f001 f907 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_EN_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 f901 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f001 f8fb 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DROPPER_STEPPER_EN_PORT, DROPPER_STEPPER_EN_PIN, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	481c      	ldr	r0, [pc, #112]	; (8000e08 <_dropper_Init+0xf4>)
 8000d98:	f001 f8f6 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <_dropper_Init+0xf0>)
 8000da2:	f001 f8f1 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RELAY_9_GPIO_Port, RELAY_9_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <_dropper_Init+0xf0>)
 8000dae:	f001 f8eb 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_10_GPIO_Port, RELAY_10_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <_dropper_Init+0xf0>)
 8000db8:	f001 f8e6 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_11_GPIO_Port, RELAY_11_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <_dropper_Init+0xf4>)
 8000dc4:	f001 f8e0 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_12_GPIO_Port, RELAY_12_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2104      	movs	r1, #4
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <_dropper_Init+0xf4>)
 8000dce:	f001 f8db 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_13_GPIO_Port, RELAY_13_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <_dropper_Init+0xf4>)
 8000dd8:	f001 f8d6 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_14_GPIO_Port, RELAY_14_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <_dropper_Init+0xf4>)
 8000de4:	f001 f8d0 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_15_GPIO_Port, RELAY_15_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <_dropper_Init+0xf4>)
 8000df0:	f001 f8ca 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_16_GPIO_Port, RELAY_16_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <_dropper_Init+0xf4>)
 8000dfc:	f001 f8c4 	bl	8001f88 <HAL_GPIO_WritePin>

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000400 	.word	0x48000400

08000e0c <_dropper_OpenChannel>:

void _dropper_OpenChannel(_dropperChannelName dC){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	switch(dC){
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d83a      	bhi.n	8000e92 <_dropper_OpenChannel+0x86>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <_dropper_OpenChannel+0x18>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e3d 	.word	0x08000e3d
 8000e28:	08000e4b 	.word	0x08000e4b
 8000e2c:	08000e59 	.word	0x08000e59
 8000e30:	08000e69 	.word	0x08000e69
 8000e34:	08000e79 	.word	0x08000e79
 8000e38:	08000e87 	.word	0x08000e87
	case CHANNEL_1:
		HAL_GPIO_WritePin(SEED_CHANNEL_1_PORT, SEED_CHANNEL_1_PIN, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e42:	4816      	ldr	r0, [pc, #88]	; (8000e9c <_dropper_OpenChannel+0x90>)
 8000e44:	f001 f8a0 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000e48:	e023      	b.n	8000e92 <_dropper_OpenChannel+0x86>
	case CHANNEL_2:
		HAL_GPIO_WritePin(SEED_CHANNEL_2_PORT, SEED_CHANNEL_2_PIN, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <_dropper_OpenChannel+0x94>)
 8000e52:	f001 f899 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000e56:	e01c      	b.n	8000e92 <_dropper_OpenChannel+0x86>
	case CHANNEL_3:
		HAL_GPIO_WritePin(SEED_CHANNEL_3_PORT, SEED_CHANNEL_3_PIN, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f001 f891 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000e66:	e014      	b.n	8000e92 <_dropper_OpenChannel+0x86>
	case CHANNEL_4:
		HAL_GPIO_WritePin(SEED_CHANNEL_4_PORT, SEED_CHANNEL_4_PIN, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 f889 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000e76:	e00c      	b.n	8000e92 <_dropper_OpenChannel+0x86>
	case CHANNEL_5:
		HAL_GPIO_WritePin(SEED_CHANNEL_5_PORT, SEED_CHANNEL_5_PIN, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <_dropper_OpenChannel+0x94>)
 8000e80:	f001 f882 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000e84:	e005      	b.n	8000e92 <_dropper_OpenChannel+0x86>
	case CHANNEL_6:
		HAL_GPIO_WritePin(SEED_CHANNEL_6_PORT, SEED_CHANNEL_6_PIN, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2110      	movs	r1, #16
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <_dropper_OpenChannel+0x94>)
 8000e8c:	f001 f87c 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000e90:	bf00      	nop
	}
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <_dropper_CloseChannel>:
void _dropper_CloseChannel(_dropperChannelName dC){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	switch(dC){
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d83a      	bhi.n	8000f2a <_dropper_CloseChannel+0x86>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <_dropper_CloseChannel+0x18>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ed5 	.word	0x08000ed5
 8000ec0:	08000ee3 	.word	0x08000ee3
 8000ec4:	08000ef1 	.word	0x08000ef1
 8000ec8:	08000f01 	.word	0x08000f01
 8000ecc:	08000f11 	.word	0x08000f11
 8000ed0:	08000f1f 	.word	0x08000f1f
	case CHANNEL_1:
		HAL_GPIO_WritePin(SEED_CHANNEL_1_PORT, SEED_CHANNEL_1_PIN, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	4816      	ldr	r0, [pc, #88]	; (8000f34 <_dropper_CloseChannel+0x90>)
 8000edc:	f001 f854 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000ee0:	e023      	b.n	8000f2a <_dropper_CloseChannel+0x86>
	case CHANNEL_2:
		HAL_GPIO_WritePin(SEED_CHANNEL_2_PORT, SEED_CHANNEL_2_PIN, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <_dropper_CloseChannel+0x94>)
 8000eea:	f001 f84d 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000eee:	e01c      	b.n	8000f2a <_dropper_CloseChannel+0x86>
	case CHANNEL_3:
		HAL_GPIO_WritePin(SEED_CHANNEL_3_PORT, SEED_CHANNEL_3_PIN, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f001 f845 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000efe:	e014      	b.n	8000f2a <_dropper_CloseChannel+0x86>
	case CHANNEL_4:
		HAL_GPIO_WritePin(SEED_CHANNEL_4_PORT, SEED_CHANNEL_4_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f001 f83d 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000f0e:	e00c      	b.n	8000f2a <_dropper_CloseChannel+0x86>
	case CHANNEL_5:
		HAL_GPIO_WritePin(SEED_CHANNEL_5_PORT, SEED_CHANNEL_5_PIN, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <_dropper_CloseChannel+0x94>)
 8000f18:	f001 f836 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000f1c:	e005      	b.n	8000f2a <_dropper_CloseChannel+0x86>
	case CHANNEL_6:
		HAL_GPIO_WritePin(SEED_CHANNEL_6_PORT, SEED_CHANNEL_6_PIN, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2110      	movs	r1, #16
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <_dropper_CloseChannel+0x94>)
 8000f24:	f001 f830 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000f28:	bf00      	nop
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000400 	.word	0x48000400

08000f3c <_dropper_StartVibrate>:

void _dropper_StartVibrate(_seedsType sT){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	switch(sT){
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <_dropper_StartVibrate+0x16>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d006      	beq.n	8000f5e <_dropper_StartVibrate+0x22>
		break;
	case PELLETED:
		HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_RESET);
		break;
	}
}
 8000f50:	e00d      	b.n	8000f6e <_dropper_StartVibrate+0x32>
		HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PORT, VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PIN, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <_dropper_StartVibrate+0x3c>)
 8000f58:	f001 f816 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000f5c:	e007      	b.n	8000f6e <_dropper_StartVibrate+0x32>
		HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f001 f80e 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000f6c:	bf00      	nop
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	48000400 	.word	0x48000400

08000f7c <_dropper_StopVibrate>:
void _dropper_StopVibrate(_seedsType sT){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	switch(sT){
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <_dropper_StopVibrate+0x16>
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d006      	beq.n	8000f9e <_dropper_StopVibrate+0x22>
		break;
	case PELLETED:
		HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_SET);
		break;
	}
}
 8000f90:	e00d      	b.n	8000fae <_dropper_StopVibrate+0x32>
		HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PORT, VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PIN, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2120      	movs	r1, #32
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <_dropper_StopVibrate+0x3c>)
 8000f98:	f000 fff6 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000f9c:	e007      	b.n	8000fae <_dropper_StopVibrate+0x32>
		HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 ffee 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	48000400 	.word	0x48000400

08000fbc <_dropper_DropperSetMoveDirection>:
	stepCounter = 0;
	while(stepCounter < 6400);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
}

void _dropper_DropperSetMoveDirection(_stepperMoveDirection md){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	switch(md){
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <_dropper_DropperSetMoveDirection+0x16>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d006      	beq.n	8000fde <_dropper_DropperSetMoveDirection+0x22>
		break;
	case BACKWARD:
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
		break;
	}
}
 8000fd0:	e00b      	b.n	8000fea <_dropper_DropperSetMoveDirection+0x2e>
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <_dropper_DropperSetMoveDirection+0x38>)
 8000fd8:	f000 ffd6 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000fdc:	e005      	b.n	8000fea <_dropper_DropperSetMoveDirection+0x2e>
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <_dropper_DropperSetMoveDirection+0x38>)
 8000fe4:	f000 ffd0 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8000fe8:	bf00      	nop
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <_dropper_DrumSetMoveDirection>:

void _dropper_DrumSetMoveDirection(_stepperMoveDirection md){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	switch(md){
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <_dropper_DrumSetMoveDirection+0x16>
 8001008:	2b01      	cmp	r3, #1
 800100a:	d007      	beq.n	800101c <_dropper_DrumSetMoveDirection+0x24>
		break;
	case BACKWARD:
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
		break;
	}
}
 800100c:	e00d      	b.n	800102a <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 ffb7 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 800101a:	e006      	b.n	800102a <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f000 ffb0 	bl	8001f88 <HAL_GPIO_WritePin>
		break;
 8001028:	bf00      	nop
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	0000      	movs	r0, r0
 8001034:	0000      	movs	r0, r0
	...

08001038 <_dropper_RotateDrum_deg>:

void _dropper_RotateDrum_deg(float angle_deg){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(angle_deg < 0){
 8001042:	edd7 7a01 	vldr	s15, [r7, #4]
 8001046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d503      	bpl.n	8001058 <_dropper_RotateDrum_deg+0x20>
		_dropper_DrumSetMoveDirection(BACKWARD);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ffd1 	bl	8000ff8 <_dropper_DrumSetMoveDirection>
 8001056:	e002      	b.n	800105e <_dropper_RotateDrum_deg+0x26>
	}
	else{
		_dropper_DrumSetMoveDirection(FORWARD);
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff ffcd 	bl	8000ff8 <_dropper_DrumSetMoveDirection>
	}

	uint32_t stepsToDo = (uint32_t)((angle_deg * (float)DRUM_STEPPER_MICROSTEPPING)/DEFAULT_ANGLE_PER_STEP);
 800105e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001062:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80010d0 <_dropper_RotateDrum_deg+0x98>
 8001066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106a:	ee17 0a90 	vmov	r0, s15
 800106e:	f7ff fa37 	bl	80004e0 <__aeabi_f2d>
 8001072:	a315      	add	r3, pc, #84	; (adr r3, 80010c8 <_dropper_RotateDrum_deg+0x90>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fbb4 	bl	80007e4 <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fc96 	bl	80009b4 <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800108c:	2100      	movs	r1, #0
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <_dropper_RotateDrum_deg+0x9c>)
 8001090:	f002 f88c 	bl	80031ac <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 49);
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <_dropper_RotateDrum_deg+0x9c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2231      	movs	r2, #49	; 0x31
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
	stepCounter = 0;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <_dropper_RotateDrum_deg+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
	while(stepCounter < stepsToDo);
 80010a2:	bf00      	nop
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <_dropper_RotateDrum_deg+0xa0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8fa      	bhi.n	80010a4 <_dropper_RotateDrum_deg+0x6c>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <_dropper_RotateDrum_deg+0x9c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <_dropper_RotateDrum_deg+0x9c>)
 80010ba:	f002 f9cf 	bl	800345c <HAL_TIM_PWM_Stop_IT>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	cccccccd 	.word	0xcccccccd
 80010cc:	3ffccccc 	.word	0x3ffccccc
 80010d0:	42000000 	.word	0x42000000
 80010d4:	2000002c 	.word	0x2000002c
 80010d8:	20000028 	.word	0x20000028

080010dc <_dropper_MoveDropper_mm>:

void _dropper_MoveDropper_mm(float distance_mm){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]

	if(distance_mm < 0){
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d503      	bpl.n	80010fc <_dropper_MoveDropper_mm+0x20>
		_dropper_DropperSetMoveDirection(BACKWARD);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff ff61 	bl	8000fbc <_dropper_DropperSetMoveDirection>
 80010fa:	e002      	b.n	8001102 <_dropper_MoveDropper_mm+0x26>
	}
	else{
		_dropper_DropperSetMoveDirection(FORWARD);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff5d 	bl	8000fbc <_dropper_DropperSetMoveDirection>
	}

	float distancePerStep_mm = (DEFAULT_ANGLE_PER_STEP*PI*(float)DROPPER_STEPPER_PULLEY_DIAMETER_MM)/360.0;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <_dropper_MoveDropper_mm+0x84>)
 8001104:	60fb      	str	r3, [r7, #12]
	uint32_t stepsToDo = (uint32_t)((distance_mm * (float)DRUM_STEPPER_MICROSTEPPING)/distancePerStep_mm);
 8001106:	edd7 7a01 	vldr	s15, [r7, #4]
 800110a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001164 <_dropper_MoveDropper_mm+0x88>
 800110e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001112:	ed97 7a03 	vldr	s14, [r7, #12]
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111e:	ee17 3a90 	vmov	r3, s15
 8001122:	60bb      	str	r3, [r7, #8]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <_dropper_MoveDropper_mm+0x8c>)
 8001128:	f002 f840 	bl	80031ac <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 49);
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <_dropper_MoveDropper_mm+0x8c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2231      	movs	r2, #49	; 0x31
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
	stepCounter = 0;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <_dropper_MoveDropper_mm+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
	while(stepCounter < stepsToDo);
 800113a:	bf00      	nop
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <_dropper_MoveDropper_mm+0x90>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8fa      	bhi.n	800113c <_dropper_MoveDropper_mm+0x60>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_dropper_MoveDropper_mm+0x8c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 800114e:	2104      	movs	r1, #4
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <_dropper_MoveDropper_mm+0x8c>)
 8001152:	f002 f983 	bl	800345c <HAL_TIM_PWM_Stop_IT>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	3e20c49c 	.word	0x3e20c49c
 8001164:	42000000 	.word	0x42000000
 8001168:	2000002c 	.word	0x2000002c
 800116c:	20000028 	.word	0x20000028

08001170 <_dropper_SowSeeds>:

void _dropper_SowSeeds(_dropperChannelName channel){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]

	//pelleted seeds
	if(channel == CHANNEL_1 || channel == CHANNEL_2 || channel == CHANNEL_3){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <_dropper_SowSeeds+0x1c>
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d002      	beq.n	800118c <_dropper_SowSeeds+0x1c>
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d118      	bne.n	80011be <_dropper_SowSeeds+0x4e>
		_dropper_OpenChannel(channel);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fe3c 	bl	8000e0c <_dropper_OpenChannel>
		HAL_Delay(10);
 8001194:	200a      	movs	r0, #10
 8001196:	f000 fc43 	bl	8001a20 <HAL_Delay>
		_dropper_StartVibrate(PELLETED);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fece 	bl	8000f3c <_dropper_StartVibrate>
		_dropper_RotateDrum_deg(180);
 80011a0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001204 <_dropper_SowSeeds+0x94>
 80011a4:	f7ff ff48 	bl	8001038 <_dropper_RotateDrum_deg>
		HAL_Delay(SOWING_TIME_FOR_CASUAL_SEEDS_MS/2);
 80011a8:	20fa      	movs	r0, #250	; 0xfa
 80011aa:	f000 fc39 	bl	8001a20 <HAL_Delay>
		_dropper_StopVibrate(PELLETED);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fee4 	bl	8000f7c <_dropper_StopVibrate>
		_dropper_CloseChannel(channel);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe74 	bl	8000ea4 <_dropper_CloseChannel>
		_dropper_StartVibrate(CASUAL);
		HAL_Delay(SOWING_TIME_FOR_CASUAL_SEEDS_MS);
		_dropper_StopVibrate(CASUAL);
		_dropper_CloseChannel(channel);
	}
}
 80011bc:	e01d      	b.n	80011fa <_dropper_SowSeeds+0x8a>
	else if(channel == CHANNEL_4 || channel == CHANNEL_5 || channel == CHANNEL_6){
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d005      	beq.n	80011d0 <_dropper_SowSeeds+0x60>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d002      	beq.n	80011d0 <_dropper_SowSeeds+0x60>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d114      	bne.n	80011fa <_dropper_SowSeeds+0x8a>
		_dropper_OpenChannel(channel);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe1a 	bl	8000e0c <_dropper_OpenChannel>
		HAL_Delay(10);
 80011d8:	200a      	movs	r0, #10
 80011da:	f000 fc21 	bl	8001a20 <HAL_Delay>
		_dropper_StartVibrate(CASUAL);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff feac 	bl	8000f3c <_dropper_StartVibrate>
		HAL_Delay(SOWING_TIME_FOR_CASUAL_SEEDS_MS);
 80011e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e8:	f000 fc1a 	bl	8001a20 <HAL_Delay>
		_dropper_StopVibrate(CASUAL);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fec5 	bl	8000f7c <_dropper_StopVibrate>
		_dropper_CloseChannel(channel);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe55 	bl	8000ea4 <_dropper_CloseChannel>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	43340000 	.word	0x43340000

08001208 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a6d      	ldr	r2, [pc, #436]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a67      	ldr	r2, [pc, #412]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a61      	ldr	r2, [pc, #388]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a55      	ldr	r2, [pc, #340]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <MX_GPIO_Init+0x1d0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 8001296:	2200      	movs	r2, #0
 8001298:	f240 7123 	movw	r1, #1827	; 0x723
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f000 fe72 	bl	8001f88 <HAL_GPIO_WritePin>
                          |RELAY_3_Pin|RELAY_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 80012a4:	2200      	movs	r2, #0
 80012a6:	f64e 6176 	movw	r1, #61046	; 0xee76
 80012aa:	484c      	ldr	r0, [pc, #304]	; (80013dc <MX_GPIO_Init+0x1d4>)
 80012ac:	f000 fe6c 	bl	8001f88 <HAL_GPIO_WritePin>
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80012b6:	484a      	ldr	r0, [pc, #296]	; (80013e0 <MX_GPIO_Init+0x1d8>)
 80012b8:	f000 fe66 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4843      	ldr	r0, [pc, #268]	; (80013e0 <MX_GPIO_Init+0x1d8>)
 80012d4:	f000 fcd6 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SENSOR_9_Pin|SENSOR_10_Pin|SENSOR_3_Pin|SENSOR_1_Pin
 80012d8:	f641 430c 	movw	r3, #7180	; 0x1c0c
 80012dc:	617b      	str	r3, [r7, #20]
                          |SENSOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	483c      	ldr	r0, [pc, #240]	; (80013e0 <MX_GPIO_Init+0x1d8>)
 80012ee:	f000 fcc9 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 80012f2:	f240 7323 	movw	r3, #1827	; 0x723
 80012f6:	617b      	str	r3, [r7, #20]
                          |RELAY_3_Pin|RELAY_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f000 fcb9 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001312:	230c      	movs	r3, #12
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001322:	230c      	movs	r3, #12
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f000 fca8 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_12_Pin|SENSOR_6_Pin|SENSOR_5_Pin;
 8001334:	f641 0310 	movw	r3, #6160	; 0x1810
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f000 fc9a 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_11_Pin|SENSOR_7_Pin|SENSOR_8_Pin;
 8001350:	f241 0381 	movw	r3, #4225	; 0x1081
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <MX_GPIO_Init+0x1d4>)
 8001366:	f000 fc8d 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 800136a:	f64e 6376 	movw	r3, #61046	; 0xee76
 800136e:	617b      	str	r3, [r7, #20]
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4816      	ldr	r0, [pc, #88]	; (80013dc <MX_GPIO_Init+0x1d4>)
 8001384:	f000 fc7e 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin;
 8001388:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <MX_GPIO_Init+0x1d8>)
 80013a2:	f000 fc6f 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_2_Pin;
 80013a6:	2304      	movs	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_2_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <MX_GPIO_Init+0x1dc>)
 80013ba:	f000 fc63 	bl	8001c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2028      	movs	r0, #40	; 0x28
 80013c4:	f000 fc29 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c8:	2028      	movs	r0, #40	; 0x28
 80013ca:	f000 fc40 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000c00 	.word	0x48000c00

080013e8 <HAL_TIM_PWM_PulseFinishedCallback>:
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		_dropper_StepIRQ();
 80013fa:	f7ff fc7d 	bl	8000cf8 <_dropper_StepIRQ>
	}
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40000400 	.word	0x40000400

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f000 fa95 	bl	800193e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f826 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f7ff fef6 	bl	8001208 <MX_GPIO_Init>
  MX_TIM3_Init();
 800141c:	f000 f8e4 	bl	80015e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001420:	f000 f9c0 	bl	80017a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 	_dropper_Init();
 8001424:	f7ff fc76 	bl	8000d14 <_dropper_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		_dropper_MoveDropper_mm(50.0);
 8001428:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001460 <main+0x54>
 800142c:	f7ff fe56 	bl	80010dc <_dropper_MoveDropper_mm>
		_dropper_SowSeeds(CHANNEL_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f7ff fe9d 	bl	8001170 <_dropper_SowSeeds>
		_dropper_SowSeeds(CHANNEL_5);
 8001436:	2004      	movs	r0, #4
 8001438:	f7ff fe9a 	bl	8001170 <_dropper_SowSeeds>
		_dropper_SowSeeds(CHANNEL_6);
 800143c:	2005      	movs	r0, #5
 800143e:	f7ff fe97 	bl	8001170 <_dropper_SowSeeds>

		_dropper_SowSeeds(CHANNEL_1);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fe94 	bl	8001170 <_dropper_SowSeeds>
		_dropper_SowSeeds(CHANNEL_2);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fe91 	bl	8001170 <_dropper_SowSeeds>
		_dropper_SowSeeds(CHANNEL_3);
 800144e:	2002      	movs	r0, #2
 8001450:	f7ff fe8e 	bl	8001170 <_dropper_SowSeeds>
		HAL_Delay(1000);
 8001454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001458:	f000 fae2 	bl	8001a20 <HAL_Delay>
		_dropper_MoveDropper_mm(50.0);
 800145c:	e7e4      	b.n	8001428 <main+0x1c>
 800145e:	bf00      	nop
 8001460:	42480000 	.word	0x42480000

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	2238      	movs	r2, #56	; 0x38
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 f868 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fdba 	bl	8002000 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001496:	2340      	movs	r3, #64	; 0x40
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149e:	2302      	movs	r3, #2
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014a2:	2304      	movs	r3, #4
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014a6:	2355      	movs	r3, #85	; 0x55
 80014a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fe54 	bl	8002168 <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014c6:	f000 f818 	bl	80014fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2303      	movs	r3, #3
 80014d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2104      	movs	r1, #4
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 f952 	bl	800278c <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014ee:	f000 f804 	bl	80014fa <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fe:	b672      	cpsid	i
}
 8001500:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001502:	e7fe      	b.n	8001502 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6613      	str	r3, [r2, #96]	; 0x60
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800153a:	f000 fe05 	bl	8002148 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 fa24 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM3_IRQHandler+0x10>)
 80015a6:	f002 f843 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000002c 	.word	0x2000002c

080015b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015bc:	f000 fcfc 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	; 0x38
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <MX_TIM3_Init+0xfc>)
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <MX_TIM3_Init+0x100>)
 800161e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <MX_TIM3_Init+0xfc>)
 8001622:	22a9      	movs	r2, #169	; 0xa9
 8001624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_TIM3_Init+0xfc>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_TIM3_Init+0xfc>)
 800162e:	2263      	movs	r2, #99	; 0x63
 8001630:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <MX_TIM3_Init+0xfc>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_TIM3_Init+0xfc>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163e:	4829      	ldr	r0, [pc, #164]	; (80016e4 <MX_TIM3_Init+0xfc>)
 8001640:	f001 fcfc 	bl	800303c <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800164a:	f7ff ff56 	bl	80014fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001658:	4619      	mov	r1, r3
 800165a:	4822      	ldr	r0, [pc, #136]	; (80016e4 <MX_TIM3_Init+0xfc>)
 800165c:	f002 fa4c 	bl	8003af8 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001666:	f7ff ff48 	bl	80014fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800166a:	481e      	ldr	r0, [pc, #120]	; (80016e4 <MX_TIM3_Init+0xfc>)
 800166c:	f001 fd3d 	bl	80030ea <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001676:	f7ff ff40 	bl	80014fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	4816      	ldr	r0, [pc, #88]	; (80016e4 <MX_TIM3_Init+0xfc>)
 800168a:	f002 fff7 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001694:	f7ff ff31 	bl	80014fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_TIM3_Init+0xfc>)
 80016b0:	f002 f90e 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016ba:	f7ff ff1e 	bl	80014fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	2204      	movs	r2, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM3_Init+0xfc>)
 80016c6:	f002 f903 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80016d0:	f7ff ff13 	bl	80014fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM3_Init+0xfc>)
 80016d6:	f000 f82f 	bl	8001738 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3738      	adds	r7, #56	; 0x38
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000002c 	.word	0x2000002c
 80016e8:	40000400 	.word	0x40000400

080016ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_TIM_Base_MspInit+0x44>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d113      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_TIM_Base_MspInit+0x48>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_TIM_Base_MspInit+0x48>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_TIM_Base_MspInit+0x48>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	201d      	movs	r0, #29
 800171c:	f000 fa7d 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001720:	201d      	movs	r0, #29
 8001722:	f000 fa94 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40000400 	.word	0x40000400
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_TIM_MspPostInit+0x64>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d11c      	bne.n	8001794 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_TIM_MspPostInit+0x68>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_TIM_MspPostInit+0x68>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_TIM_MspPostInit+0x68>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001782:	2302      	movs	r3, #2
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f000 fa78 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40000400 	.word	0x40000400
 80017a0:	40021000 	.word	0x40021000

080017a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <MX_USART1_UART_Init+0x94>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_USART1_UART_Init+0x90>)
 80017ee:	f003 f819 	bl	8004824 <HAL_UART_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017f8:	f7ff fe7f 	bl	80014fa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_USART1_UART_Init+0x90>)
 8001800:	f003 fdb4 	bl	800536c <HAL_UARTEx_SetTxFifoThreshold>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800180a:	f7ff fe76 	bl	80014fa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180e:	2100      	movs	r1, #0
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <MX_USART1_UART_Init+0x90>)
 8001812:	f003 fde9 	bl	80053e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800181c:	f7ff fe6d 	bl	80014fa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_USART1_UART_Init+0x90>)
 8001822:	f003 fd6a 	bl	80052fa <HAL_UARTEx_DisableFifoMode>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800182c:	f7ff fe65 	bl	80014fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000078 	.word	0x20000078
 8001838:	40013800 	.word	0x40013800

0800183c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09e      	sub	sp, #120	; 0x78
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2250      	movs	r2, #80	; 0x50
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fe73 	bl	8005548 <memset>
  if(uartHandle->Instance==USART1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_UART_MspInit+0xa4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d135      	bne.n	80018d8 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800186c:	2301      	movs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4618      	mov	r0, r3
 800187a:	f001 f9a3 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001884:	f7ff fe39 	bl	80014fa <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_UART_MspInit+0xa8>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0xa8>)
 800188e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001892:	6613      	str	r3, [r2, #96]	; 0x60
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_UART_MspInit+0xa8>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_UART_MspInit+0xa8>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <HAL_UART_MspInit+0xa8>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_UART_MspInit+0xa8>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018b8:	2330      	movs	r3, #48	; 0x30
 80018ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c8:	2307      	movs	r3, #7
 80018ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d0:	4619      	mov	r1, r3
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_UART_MspInit+0xac>)
 80018d4:	f000 f9d6 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3778      	adds	r7, #120	; 0x78
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800

080018ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f0:	f7ff fe68 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	; (800192c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <LoopForever+0xe>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	; (8001938 <LoopForever+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191a:	f003 fdf1 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191e:	f7ff fd75 	bl	800140c <main>

08001922 <LoopForever>:

LoopForever:
    b LoopForever
 8001922:	e7fe      	b.n	8001922 <LoopForever>
  ldr   r0, =_estack
 8001924:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001930:	080055c0 	.word	0x080055c0
  ldr r2, =_sbss
 8001934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001938:	20000110 	.word	0x20000110

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>

0800193e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f95b 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f80e 	bl	8001970 <HAL_InitTick>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	e001      	b.n	8001964 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001960:	f7ff fdd0 	bl	8001504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001964:	79fb      	ldrb	r3, [r7, #7]

}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_InitTick+0x68>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d022      	beq.n	80019ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_InitTick+0x6c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_InitTick+0x68>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001990:	fbb1 f3f3 	udiv	r3, r1, r3
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f966 	bl	8001c6a <HAL_SYSTICK_Config>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10f      	bne.n	80019c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	d809      	bhi.n	80019be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019aa:	2200      	movs	r2, #0
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	f04f 30ff 	mov.w	r0, #4294967295
 80019b2:	f000 f932 	bl	8001c1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_InitTick+0x70>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e007      	b.n	80019ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e004      	b.n	80019ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_IncTick+0x1c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_IncTick+0x20>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_IncTick+0x1c>)
 80019f4:	6013      	str	r3, [r2, #0]
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	2000010c 	.word	0x2000010c
 8001a04:	20000008 	.word	0x20000008

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000010c 	.word	0x2000010c

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d004      	beq.n	8001a44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_Delay+0x40>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a44:	bf00      	nop
 8001a46:	f7ff ffdf 	bl	8001a08 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d8f7      	bhi.n	8001a46 <HAL_Delay+0x26>
  {
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000008 	.word	0x20000008

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff29 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff40 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff90 	bl	8001b58 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5f 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff33 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa4 	bl	8001bc0 <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c92:	e15a      	b.n	8001f4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 814c 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a6 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e10:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x1f8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x1f4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a49      	ldr	r2, [pc, #292]	; (8001f7c <HAL_GPIO_Init+0x2f8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e4>
 8001e64:	2305      	movs	r3, #5
 8001e66:	e00a      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e68:	2306      	movs	r3, #6
 8001e6a:	e008      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8e:	4937      	ldr	r1, [pc, #220]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec0:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eea:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f47f ae9d 	bne.w	8001c94 <HAL_GPIO_Init+0x10>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	48001400 	.word	0x48001400
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d141      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800200e:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d131      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800201c:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002022:	4a46      	ldr	r2, [pc, #280]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002034:	4a41      	ldr	r2, [pc, #260]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2232      	movs	r2, #50	; 0x32
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9b      	lsrs	r3, r3, #18
 800204e:	3301      	adds	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002052:	e002      	b.n	800205a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3b01      	subs	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002066:	d102      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f2      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800206e:	4b33      	ldr	r3, [pc, #204]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207a:	d158      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e057      	b.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002086:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002090:	e04d      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002098:	d141      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d131      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ae:	4a23      	ldr	r2, [pc, #140]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c0:	4a1e      	ldr	r2, [pc, #120]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2232      	movs	r2, #50	; 0x32
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	0c9b      	lsrs	r3, r3, #18
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020de:	e002      	b.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d102      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f2      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d112      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e011      	b.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800211c:	e007      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40007000 	.word	0x40007000
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83

08002148 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002156:	6093      	str	r3, [r2, #8]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e2fe      	b.n	8002778 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d075      	beq.n	8002272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002186:	4b97      	ldr	r3, [pc, #604]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	4b94      	ldr	r3, [pc, #592]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3e>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_OscConfig+0x44>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05b      	beq.n	8002270 <HAL_RCC_OscConfig+0x108>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d157      	bne.n	8002270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e2d9      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x74>
 80021ce:	4b85      	ldr	r3, [pc, #532]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a84      	ldr	r2, [pc, #528]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xb0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x98>
 80021e6:	4b7f      	ldr	r3, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7e      	ldr	r2, [pc, #504]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7b      	ldr	r2, [pc, #492]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xb0>
 8002200:	4b78      	ldr	r3, [pc, #480]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a77      	ldr	r2, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a74      	ldr	r2, [pc, #464]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff fbf2 	bl	8001a08 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fbee 	bl	8001a08 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e29e      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223a:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xc0>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fbde 	bl	8001a08 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fbda 	bl	8001a08 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e28a      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002262:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0xe8>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d075      	beq.n	800236a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227e:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0x136>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_OscConfig+0x13c>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d11f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x154>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e25d      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	4946      	ldr	r1, [pc, #280]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022d0:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fb4b 	bl	8001970 <HAL_InitTick>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d043      	beq.n	8002368 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e249      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a3c      	ldr	r2, [pc, #240]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff fb86 	bl	8001a08 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff fb82 	bl	8001a08 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e232      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	492d      	ldr	r1, [pc, #180]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
 8002332:	e01a      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2a      	ldr	r2, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800233a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff fb62 	bl	8001a08 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7ff fb5e 	bl	8001a08 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e20e      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1e0>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d041      	beq.n	80023fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002384:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7ff fb3b 	bl	8001a08 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7ff fb37 	bl	8001a08 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1e7      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ef      	beq.n	8002396 <HAL_RCC_OscConfig+0x22e>
 80023b6:	e020      	b.n	80023fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7ff fb1e 	bl	8001a08 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ce:	e00d      	b.n	80023ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff fb1a 	bl	8001a08 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d906      	bls.n	80023ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1ca      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ec:	4b8c      	ldr	r3, [pc, #560]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ea      	bne.n	80023d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a6 	beq.w	8002554 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x2b4>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x2b6>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b7f      	ldr	r3, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a7e      	ldr	r2, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
 800242e:	4b7c      	ldr	r3, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243e:	4b79      	ldr	r3, [pc, #484]	; (8002624 <HAL_RCC_OscConfig+0x4bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x4bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x4bc>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7ff fad7 	bl	8001a08 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7ff fad3 	bl	8001a08 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e183      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x4bc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d108      	bne.n	8002496 <HAL_RCC_OscConfig+0x32e>
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002494:	e024      	b.n	80024e0 <HAL_RCC_OscConfig+0x378>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d110      	bne.n	80024c0 <HAL_RCC_OscConfig+0x358>
 800249e:	4b60      	ldr	r3, [pc, #384]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	4a5e      	ldr	r2, [pc, #376]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024be:	e00f      	b.n	80024e0 <HAL_RCC_OscConfig+0x378>
 80024c0:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d016      	beq.n	8002516 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff fa8e 	bl	8001a08 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7ff fa8a 	bl	8001a08 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e138      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ed      	beq.n	80024f0 <HAL_RCC_OscConfig+0x388>
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002516:	f7ff fa77 	bl	8001a08 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7ff fa73 	bl	8001a08 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e121      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ed      	bne.n	800251e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	4a34      	ldr	r2, [pc, #208]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002552:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d03c      	beq.n	80025da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800256e:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7ff fa46 	bl	8001a08 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002580:	f7ff fa42 	bl	8001a08 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0f2      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <HAL_RCC_OscConfig+0x418>
 80025a0:	e01b      	b.n	80025da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7ff fa29 	bl	8001a08 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ba:	f7ff fa25 	bl	8001a08 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0d5      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ef      	bne.n	80025ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80c9 	beq.w	8002776 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	f000 8083 	beq.w	80026f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d15e      	bne.n	80026b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff f9ff 	bl	8001a08 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	e00c      	b.n	8002628 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff f9fb 	bl	8001a08 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d905      	bls.n	8002628 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0ab      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	4b55      	ldr	r3, [pc, #340]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ec      	bne.n	800260e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002634:	4b52      	ldr	r3, [pc, #328]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_RCC_OscConfig+0x61c>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6a11      	ldr	r1, [r2, #32]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002644:	3a01      	subs	r2, #1
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800264e:	0212      	lsls	r2, r2, #8
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002656:	0852      	lsrs	r2, r2, #1
 8002658:	3a01      	subs	r2, #1
 800265a:	0552      	lsls	r2, r2, #21
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002662:	0852      	lsrs	r2, r2, #1
 8002664:	3a01      	subs	r2, #1
 8002666:	0652      	lsls	r2, r2, #25
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800266e:	06d2      	lsls	r2, r2, #27
 8002670:	430a      	orrs	r2, r1
 8002672:	4943      	ldr	r1, [pc, #268]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a40      	ldr	r2, [pc, #256]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f9ba 	bl	8001a08 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff f9b6 	bl	8001a08 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e066      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x530>
 80026b6:	e05e      	b.n	8002776 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a30      	ldr	r2, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff f9a0 	bl	8001a08 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff f99c 	bl	8001a08 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04c      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4924      	ldr	r1, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_OscConfig+0x620>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	60cb      	str	r3, [r1, #12]
 80026f6:	e03e      	b.n	8002776 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e039      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_RCC_OscConfig+0x618>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d12c      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d123      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d11b      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d113      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d109      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3720      	adds	r7, #32
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	019f800c 	.word	0x019f800c
 8002788:	feeefffc 	.word	0xfeeefffc

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e11e      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b91      	ldr	r3, [pc, #580]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 020f 	bic.w	r2, r3, #15
 80027ba:	498c      	ldr	r1, [pc, #560]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b8a      	ldr	r3, [pc, #552]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e106      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d073      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d129      	bne.n	800283c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e8:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0f4      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027f8:	f000 f99e 	bl	8002b38 <RCC_GetSysClockFreqFromPLLSource>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4a7c      	ldr	r2, [pc, #496]	; (80029f4 <HAL_RCC_ClockConfig+0x268>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d93f      	bls.n	8002886 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002806:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800281a:	2b00      	cmp	r3, #0
 800281c:	d033      	beq.n	8002886 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12f      	bne.n	8002886 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282e:	4a70      	ldr	r2, [pc, #448]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002834:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e024      	b.n	8002886 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002844:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0c6      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0be      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002864:	f000 f8ce 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4a61      	ldr	r2, [pc, #388]	; (80029f4 <HAL_RCC_ClockConfig+0x268>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d909      	bls.n	8002886 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287a:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 800287c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002880:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4957      	ldr	r1, [pc, #348]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002898:	f7ff f8b6 	bl	8001a08 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7ff f8b2 	bl	8001a08 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e095      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002900:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002906:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4936      	ldr	r1, [pc, #216]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
 800291a:	e008      	b.n	800292e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d105      	bne.n	800292e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292e:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d21d      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 020f 	bic.w	r2, r3, #15
 8002944:	4929      	ldr	r1, [pc, #164]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800294c:	f7ff f85c 	bl	8001a08 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7ff f858 	bl	8001a08 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e03b      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d1ed      	bne.n	8002954 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4917      	ldr	r1, [pc, #92]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490f      	ldr	r1, [pc, #60]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b6:	f000 f825 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	490c      	ldr	r1, [pc, #48]	; (80029f8 <HAL_RCC_ClockConfig+0x26c>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x270>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe ffc8 	bl	8001970 <HAL_InitTick>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	04c4b400 	.word	0x04c4b400
 80029f8:	08005570 	.word	0x08005570
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000004 	.word	0x20000004

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e047      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e03e      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d136      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a58:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	68d2      	ldr	r2, [r2, #12]
 8002a64:	0a12      	lsrs	r2, r2, #8
 8002a66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	617b      	str	r3, [r7, #20]
      break;
 8002a70:	e00c      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0a12      	lsrs	r2, r2, #8
 8002a80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
      break;
 8002a8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0e5b      	lsrs	r3, r3, #25
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	e001      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002aac:	693b      	ldr	r3, [r7, #16]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	016e3600 	.word	0x016e3600

08002ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4904      	ldr	r1, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08005580 	.word	0x08005580

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b10:	f7ff ffda 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0adb      	lsrs	r3, r3, #11
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08005580 	.word	0x08005580

08002b38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3301      	adds	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d10c      	bne.n	8002b76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5c:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b66:	68d2      	ldr	r2, [r2, #12]
 8002b68:	0a12      	lsrs	r2, r2, #8
 8002b6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
    break;
 8002b74:	e00c      	b.n	8002b90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	0a12      	lsrs	r2, r2, #8
 8002b84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
    break;
 8002b8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0e5b      	lsrs	r3, r3, #25
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	016e3600 	.word	0x016e3600
 8002bc0:	00f42400 	.word	0x00f42400

08002bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bcc:	2300      	movs	r3, #0
 8002bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8098 	beq.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c1a:	f7fe fef5 	bl	8001a08 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c20:	e009      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe fef1 	bl	8001a08 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d902      	bls.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	74fb      	strb	r3, [r7, #19]
        break;
 8002c34:	e005      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ef      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d159      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d019      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe feb1 	bl	8001a08 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fead 	bl	8001a08 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d902      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ec      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cec:	e008      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	74bb      	strb	r3, [r7, #18]
 8002cf2:	e005      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d00:	7c7b      	ldrb	r3, [r7, #17]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d105      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4ba7      	ldr	r3, [pc, #668]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	4aa6      	ldr	r2, [pc, #664]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1e:	4ba1      	ldr	r3, [pc, #644]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f023 0203 	bic.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	499d      	ldr	r1, [pc, #628]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d40:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 020c 	bic.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4995      	ldr	r1, [pc, #596]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d62:	4b90      	ldr	r3, [pc, #576]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	498c      	ldr	r1, [pc, #560]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d84:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4984      	ldr	r1, [pc, #528]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da6:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	497b      	ldr	r1, [pc, #492]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc8:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4973      	ldr	r1, [pc, #460]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	496a      	ldr	r1, [pc, #424]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e0c:	4b65      	ldr	r3, [pc, #404]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4962      	ldr	r1, [pc, #392]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	4959      	ldr	r1, [pc, #356]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e50:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	4951      	ldr	r1, [pc, #324]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d015      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	4948      	ldr	r1, [pc, #288]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d105      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e92:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d015      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	493a      	ldr	r1, [pc, #232]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	492c      	ldr	r1, [pc, #176]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f00:	d105      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	491e      	ldr	r1, [pc, #120]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f38:	d105      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f44:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	4910      	ldr	r1, [pc, #64]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f70:	d105      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d018      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4902      	ldr	r1, [pc, #8]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	e001      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fae:	d105      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4918      	ldr	r1, [pc, #96]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300e:	490a      	ldr	r1, [pc, #40]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800302c:	7cbb      	ldrb	r3, [r7, #18]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e049      	b.n	80030e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe fb42 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f000 fe68 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e049      	b.n	8003190 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f841 	bl	8003198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f000 fe11 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_TIM_PWM_Start_IT+0x28>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e03c      	b.n	800324e <HAL_TIM_PWM_Start_IT+0xa2>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d109      	bne.n	80031ee <HAL_TIM_PWM_Start_IT+0x42>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	e02f      	b.n	800324e <HAL_TIM_PWM_Start_IT+0xa2>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d109      	bne.n	8003208 <HAL_TIM_PWM_Start_IT+0x5c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e022      	b.n	800324e <HAL_TIM_PWM_Start_IT+0xa2>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d109      	bne.n	8003222 <HAL_TIM_PWM_Start_IT+0x76>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e015      	b.n	800324e <HAL_TIM_PWM_Start_IT+0xa2>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b10      	cmp	r3, #16
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start_IT+0x90>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e008      	b.n	800324e <HAL_TIM_PWM_Start_IT+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0ec      	b.n	8003430 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_PWM_Start_IT+0xba>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	e023      	b.n	80032ae <HAL_TIM_PWM_Start_IT+0x102>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_PWM_Start_IT+0xca>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003274:	e01b      	b.n	80032ae <HAL_TIM_PWM_Start_IT+0x102>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_PWM_Start_IT+0xda>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003284:	e013      	b.n	80032ae <HAL_TIM_PWM_Start_IT+0x102>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start_IT+0xea>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003294:	e00b      	b.n	80032ae <HAL_TIM_PWM_Start_IT+0x102>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b10      	cmp	r3, #16
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_PWM_Start_IT+0xfa>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a4:	e003      	b.n	80032ae <HAL_TIM_PWM_Start_IT+0x102>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d841      	bhi.n	8003338 <HAL_TIM_PWM_Start_IT+0x18c>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_TIM_PWM_Start_IT+0x110>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	08003339 	.word	0x08003339
 80032c4:	08003339 	.word	0x08003339
 80032c8:	08003339 	.word	0x08003339
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003339 	.word	0x08003339
 80032d4:	08003339 	.word	0x08003339
 80032d8:	08003339 	.word	0x08003339
 80032dc:	08003315 	.word	0x08003315
 80032e0:	08003339 	.word	0x08003339
 80032e4:	08003339 	.word	0x08003339
 80032e8:	08003339 	.word	0x08003339
 80032ec:	08003327 	.word	0x08003327
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0202 	orr.w	r2, r2, #2
 80032fe:	60da      	str	r2, [r3, #12]
      break;
 8003300:	e01d      	b.n	800333e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0204 	orr.w	r2, r2, #4
 8003310:	60da      	str	r2, [r3, #12]
      break;
 8003312:	e014      	b.n	800333e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	60da      	str	r2, [r3, #12]
      break;
 8003324:	e00b      	b.n	800333e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0210 	orr.w	r2, r2, #16
 8003334:	60da      	str	r2, [r3, #12]
      break;
 8003336:	e002      	b.n	800333e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	bf00      	nop
  }

  if (status == HAL_OK)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d174      	bne.n	800342e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	6839      	ldr	r1, [r7, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f001 f96f 	bl	8004630 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIM_PWM_Start_IT+0x1e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a36      	ldr	r2, [pc, #216]	; (800343c <HAL_TIM_PWM_Start_IT+0x290>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_TIM_PWM_Start_IT+0x294>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a33      	ldr	r2, [pc, #204]	; (8003444 <HAL_TIM_PWM_Start_IT+0x298>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIM_PWM_Start_IT+0x1e2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a32      	ldr	r2, [pc, #200]	; (8003448 <HAL_TIM_PWM_Start_IT+0x29c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a30      	ldr	r2, [pc, #192]	; (800344c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_Start_IT+0x1e6>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_TIM_PWM_Start_IT+0x1e8>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_TIM_PWM_Start_IT+0x28c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01d      	beq.n	80033ee <HAL_TIM_PWM_Start_IT+0x242>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d018      	beq.n	80033ee <HAL_TIM_PWM_Start_IT+0x242>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_TIM_PWM_Start_IT+0x242>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_TIM_PWM_Start_IT+0x242>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_TIM_PWM_Start_IT+0x290>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_TIM_PWM_Start_IT+0x242>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_TIM_PWM_Start_IT+0x294>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_TIM_PWM_Start_IT+0x242>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_PWM_Start_IT+0x2a0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d115      	bne.n	800341a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b06      	cmp	r3, #6
 80033fe:	d015      	beq.n	800342c <HAL_TIM_PWM_Start_IT+0x280>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003406:	d011      	beq.n	800342c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	e008      	b.n	800342c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e000      	b.n	800342e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40013400 	.word	0x40013400
 8003440:	40014000 	.word	0x40014000
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800
 800344c:	40015000 	.word	0x40015000
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	00010007 	.word	0x00010007

0800345c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d841      	bhi.n	80034f4 <HAL_TIM_PWM_Stop_IT+0x98>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034f5 	.word	0x080034f5
 8003484:	080034f5 	.word	0x080034f5
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034f5 	.word	0x080034f5
 8003494:	080034f5 	.word	0x080034f5
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	080034f5 	.word	0x080034f5
 80034a4:	080034f5 	.word	0x080034f5
 80034a8:	080034e3 	.word	0x080034e3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0202 	bic.w	r2, r2, #2
 80034ba:	60da      	str	r2, [r3, #12]
      break;
 80034bc:	e01d      	b.n	80034fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0204 	bic.w	r2, r2, #4
 80034cc:	60da      	str	r2, [r3, #12]
      break;
 80034ce:	e014      	b.n	80034fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0208 	bic.w	r2, r2, #8
 80034de:	60da      	str	r2, [r3, #12]
      break;
 80034e0:	e00b      	b.n	80034fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0210 	bic.w	r2, r2, #16
 80034f0:	60da      	str	r2, [r3, #12]
      break;
 80034f2:	e002      	b.n	80034fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 8086 	bne.w	800360e <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f001 f890 	bl	8004630 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a40      	ldr	r2, [pc, #256]	; (8003618 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_TIM_PWM_Stop_IT+0xf0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_TIM_PWM_Stop_IT+0xf0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_PWM_Stop_IT+0xf0>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3c      	ldr	r2, [pc, #240]	; (8003624 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_TIM_PWM_Stop_IT+0xf0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_PWM_Stop_IT+0xf0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a39      	ldr	r2, [pc, #228]	; (800362c <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_TIM_PWM_Stop_IT+0xf4>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_TIM_PWM_Stop_IT+0xf6>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_TIM_PWM_Stop_IT+0x12a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	f244 4344 	movw	r3, #17476	; 0x4444
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_TIM_PWM_Stop_IT+0x12a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_TIM_PWM_Stop_IT+0x15a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	f244 4344 	movw	r3, #17476	; 0x4444
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_PWM_Stop_IT+0x15a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Stop_IT+0x16a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c4:	e023      	b.n	800360e <HAL_TIM_PWM_Stop_IT+0x1b2>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Stop_IT+0x17a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	e01b      	b.n	800360e <HAL_TIM_PWM_Stop_IT+0x1b2>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Stop_IT+0x18a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e4:	e013      	b.n	800360e <HAL_TIM_PWM_Stop_IT+0x1b2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Stop_IT+0x19a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f4:	e00b      	b.n	800360e <HAL_TIM_PWM_Stop_IT+0x1b2>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Stop_IT+0x1aa>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	e003      	b.n	800360e <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40013400 	.word	0x40013400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	40015000 	.word	0x40015000

08003630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fb54 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb46 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd fead 	bl	80013e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0204 	mvn.w	r2, #4
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fb2e 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fb20 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fd fe87 	bl	80013e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0208 	mvn.w	r2, #8
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2204      	movs	r2, #4
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fb08 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fafa 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd fe61 	bl	80013e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0210 	mvn.w	r2, #16
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2208      	movs	r2, #8
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fae2 	bl	8003d28 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fad4 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd fe3b 	bl	80013e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0201 	mvn.w	r2, #1
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fab2 	bl	8003d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80037c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fff1 	bl	80047ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 ffe9 	bl	80047c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa95 	bl	8003d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f06f 0220 	mvn.w	r2, #32
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 ffb1 	bl	8004798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00c      	beq.n	800385a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 ffbd 	bl	80047d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00c      	beq.n	800387e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 ffb5 	bl	80047e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 ffad 	bl	80047fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80038be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 ffa5 	bl	8004810 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0ff      	b.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b14      	cmp	r3, #20
 80038fa:	f200 80f0 	bhi.w	8003ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003959 	.word	0x08003959
 8003908:	08003adf 	.word	0x08003adf
 800390c:	08003adf 	.word	0x08003adf
 8003910:	08003adf 	.word	0x08003adf
 8003914:	08003999 	.word	0x08003999
 8003918:	08003adf 	.word	0x08003adf
 800391c:	08003adf 	.word	0x08003adf
 8003920:	08003adf 	.word	0x08003adf
 8003924:	080039db 	.word	0x080039db
 8003928:	08003adf 	.word	0x08003adf
 800392c:	08003adf 	.word	0x08003adf
 8003930:	08003adf 	.word	0x08003adf
 8003934:	08003a1b 	.word	0x08003a1b
 8003938:	08003adf 	.word	0x08003adf
 800393c:	08003adf 	.word	0x08003adf
 8003940:	08003adf 	.word	0x08003adf
 8003944:	08003a5d 	.word	0x08003a5d
 8003948:	08003adf 	.word	0x08003adf
 800394c:	08003adf 	.word	0x08003adf
 8003950:	08003adf 	.word	0x08003adf
 8003954:	08003a9d 	.word	0x08003a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 faa0 	bl	8003ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0204 	bic.w	r2, r2, #4
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	619a      	str	r2, [r3, #24]
      break;
 8003996:	e0a5      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb1a 	bl	8003fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6999      	ldr	r1, [r3, #24]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	619a      	str	r2, [r3, #24]
      break;
 80039d8:	e084      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb8d 	bl	8004100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0208 	orr.w	r2, r2, #8
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0204 	bic.w	r2, r2, #4
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	61da      	str	r2, [r3, #28]
      break;
 8003a18:	e064      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fbff 	bl	8004224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	61da      	str	r2, [r3, #28]
      break;
 8003a5a:	e043      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fc72 	bl	800434c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003a9a:	e023      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fcbc 	bl	8004420 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003adc:	e002      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_TIM_ConfigClockSource+0x1c>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e0e6      	b.n	8003ce2 <HAL_TIM_ConfigClockSource+0x1ea>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a67      	ldr	r2, [pc, #412]	; (8003cec <HAL_TIM_ConfigClockSource+0x1f4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f000 80b1 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003b54:	4a65      	ldr	r2, [pc, #404]	; (8003cec <HAL_TIM_ConfigClockSource+0x1f4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	f200 80b6 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003b5c:	4a64      	ldr	r2, [pc, #400]	; (8003cf0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f000 80a9 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003b64:	4a62      	ldr	r2, [pc, #392]	; (8003cf0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f200 80ae 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003b6c:	4a61      	ldr	r2, [pc, #388]	; (8003cf4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f000 80a1 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003b74:	4a5f      	ldr	r2, [pc, #380]	; (8003cf4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f200 80a6 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003b7c:	4a5e      	ldr	r2, [pc, #376]	; (8003cf8 <HAL_TIM_ConfigClockSource+0x200>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f000 8099 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003b84:	4a5c      	ldr	r2, [pc, #368]	; (8003cf8 <HAL_TIM_ConfigClockSource+0x200>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f200 809e 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003b8c:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <HAL_TIM_ConfigClockSource+0x204>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f000 8091 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003b94:	4a59      	ldr	r2, [pc, #356]	; (8003cfc <HAL_TIM_ConfigClockSource+0x204>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f200 8096 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003b9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ba0:	f000 8089 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003ba4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ba8:	f200 808e 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d03e      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x138>
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	f200 8087 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	f000 8086 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1d6>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d87f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d01a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x10a>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d87b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d050      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x17e>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d877      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bd8:	2b50      	cmp	r3, #80	; 0x50
 8003bda:	d03c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15e>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d873      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d058      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x19e>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d86f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d064      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d86b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d060      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d867      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d05a      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8003c00:	e062      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f000 fced 	bl	80045f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	609a      	str	r2, [r3, #8]
      break;
 8003c2e:	e04f      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6899      	ldr	r1, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f000 fcd6 	bl	80045f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c52:	609a      	str	r2, [r3, #8]
      break;
 8003c54:	e03c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 fc48 	bl	80044f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2150      	movs	r1, #80	; 0x50
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fca1 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e02c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 fc67 	bl	8004556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2160      	movs	r1, #96	; 0x60
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fc91 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 8003c94:	e01c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 fc28 	bl	80044f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fc81 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e00c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 fc78 	bl	80045b6 <TIM_ITRx_SetConfig>
      break;
 8003cc6:	e003      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e000      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8003cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	00100070 	.word	0x00100070
 8003cf0:	00100050 	.word	0x00100050
 8003cf4:	00100040 	.word	0x00100040
 8003cf8:	00100030 	.word	0x00100030
 8003cfc:	00100020 	.word	0x00100020

08003d00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a48      	ldr	r2, [pc, #288]	; (8003e84 <TIM_Base_SetConfig+0x134>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a45      	ldr	r2, [pc, #276]	; (8003e88 <TIM_Base_SetConfig+0x138>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a44      	ldr	r2, [pc, #272]	; (8003e8c <TIM_Base_SetConfig+0x13c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a43      	ldr	r2, [pc, #268]	; (8003e90 <TIM_Base_SetConfig+0x140>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a42      	ldr	r2, [pc, #264]	; (8003e94 <TIM_Base_SetConfig+0x144>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <TIM_Base_SetConfig+0x134>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d01b      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <TIM_Base_SetConfig+0x138>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d017      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a33      	ldr	r2, [pc, #204]	; (8003e8c <TIM_Base_SetConfig+0x13c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a32      	ldr	r2, [pc, #200]	; (8003e90 <TIM_Base_SetConfig+0x140>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00f      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <TIM_Base_SetConfig+0x148>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <TIM_Base_SetConfig+0x14c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a30      	ldr	r2, [pc, #192]	; (8003ea0 <TIM_Base_SetConfig+0x150>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <TIM_Base_SetConfig+0x144>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <TIM_Base_SetConfig+0x134>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x100>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <TIM_Base_SetConfig+0x140>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x100>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <TIM_Base_SetConfig+0x148>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x100>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <TIM_Base_SetConfig+0x14c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x100>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <TIM_Base_SetConfig+0x150>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x100>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <TIM_Base_SetConfig+0x144>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]
  }
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40013400 	.word	0x40013400
 8003e94:	40015000 	.word	0x40015000
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f023 0201 	bic.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 0302 	bic.w	r3, r3, #2
 8003ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a30      	ldr	r2, [pc, #192]	; (8003fc0 <TIM_OC1_SetConfig+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <TIM_OC1_SetConfig+0x88>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <TIM_OC1_SetConfig+0x120>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00f      	beq.n	8003f2c <TIM_OC1_SetConfig+0x88>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <TIM_OC1_SetConfig+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_OC1_SetConfig+0x88>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <TIM_OC1_SetConfig+0x128>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_OC1_SetConfig+0x88>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a2c      	ldr	r2, [pc, #176]	; (8003fd0 <TIM_OC1_SetConfig+0x12c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC1_SetConfig+0x88>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a2b      	ldr	r2, [pc, #172]	; (8003fd4 <TIM_OC1_SetConfig+0x130>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10c      	bne.n	8003f46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0308 	bic.w	r3, r3, #8
 8003f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <TIM_OC1_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <TIM_OC1_SetConfig+0xd2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <TIM_OC1_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00f      	beq.n	8003f76 <TIM_OC1_SetConfig+0xd2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <TIM_OC1_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_OC1_SetConfig+0xd2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <TIM_OC1_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_OC1_SetConfig+0xd2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <TIM_OC1_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC1_SetConfig+0xd2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <TIM_OC1_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d111      	bne.n	8003f9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	40015000 	.word	0x40015000

08003fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 0210 	bic.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0320 	bic.w	r3, r3, #32
 8004026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <TIM_OC2_SetConfig+0x110>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_OC2_SetConfig+0x74>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <TIM_OC2_SetConfig+0x114>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC2_SetConfig+0x74>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <TIM_OC2_SetConfig+0x118>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10d      	bne.n	8004068 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004066:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <TIM_OC2_SetConfig+0x110>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <TIM_OC2_SetConfig+0xc0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <TIM_OC2_SetConfig+0x114>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00f      	beq.n	8004098 <TIM_OC2_SetConfig+0xc0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <TIM_OC2_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_OC2_SetConfig+0xc0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <TIM_OC2_SetConfig+0x120>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_OC2_SetConfig+0xc0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <TIM_OC2_SetConfig+0x124>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC2_SetConfig+0xc0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <TIM_OC2_SetConfig+0x118>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d113      	bne.n	80040c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40015000 	.word	0x40015000
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800

08004100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2b      	ldr	r2, [pc, #172]	; (800420c <TIM_OC3_SetConfig+0x10c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <TIM_OC3_SetConfig+0x72>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2a      	ldr	r2, [pc, #168]	; (8004210 <TIM_OC3_SetConfig+0x110>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_OC3_SetConfig+0x72>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <TIM_OC3_SetConfig+0x114>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10d      	bne.n	800418e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800418c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <TIM_OC3_SetConfig+0x10c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <TIM_OC3_SetConfig+0xbe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <TIM_OC3_SetConfig+0x110>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_OC3_SetConfig+0xbe>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <TIM_OC3_SetConfig+0x118>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_OC3_SetConfig+0xbe>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <TIM_OC3_SetConfig+0x11c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_OC3_SetConfig+0xbe>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <TIM_OC3_SetConfig+0x120>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0xbe>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a16      	ldr	r2, [pc, #88]	; (8004214 <TIM_OC3_SetConfig+0x114>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d113      	bne.n	80041e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40013400 	.word	0x40013400
 8004214:	40015000 	.word	0x40015000
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800

08004224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <TIM_OC4_SetConfig+0x110>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d007      	beq.n	8004298 <TIM_OC4_SetConfig+0x74>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <TIM_OC4_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_OC4_SetConfig+0x74>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a2a      	ldr	r2, [pc, #168]	; (800433c <TIM_OC4_SetConfig+0x118>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10d      	bne.n	80042b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800429e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <TIM_OC4_SetConfig+0x110>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <TIM_OC4_SetConfig+0xc0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <TIM_OC4_SetConfig+0x114>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00f      	beq.n	80042e4 <TIM_OC4_SetConfig+0xc0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <TIM_OC4_SetConfig+0x11c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <TIM_OC4_SetConfig+0xc0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <TIM_OC4_SetConfig+0x120>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_OC4_SetConfig+0xc0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <TIM_OC4_SetConfig+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC4_SetConfig+0xc0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <TIM_OC4_SetConfig+0x118>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d113      	bne.n	800430c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40013400 	.word	0x40013400
 800433c:	40015000 	.word	0x40015000
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a19      	ldr	r2, [pc, #100]	; (8004408 <TIM_OC5_SetConfig+0xbc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <TIM_OC5_SetConfig+0x82>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <TIM_OC5_SetConfig+0xc0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00f      	beq.n	80043ce <TIM_OC5_SetConfig+0x82>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <TIM_OC5_SetConfig+0xc4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00b      	beq.n	80043ce <TIM_OC5_SetConfig+0x82>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <TIM_OC5_SetConfig+0xc8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d007      	beq.n	80043ce <TIM_OC5_SetConfig+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <TIM_OC5_SetConfig+0xcc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_OC5_SetConfig+0x82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <TIM_OC5_SetConfig+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d109      	bne.n	80043e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40013400 	.word	0x40013400
 8004410:	40014000 	.word	0x40014000
 8004414:	40014400 	.word	0x40014400
 8004418:	40014800 	.word	0x40014800
 800441c:	40015000 	.word	0x40015000

08004420 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	051b      	lsls	r3, r3, #20
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a1a      	ldr	r2, [pc, #104]	; (80044e0 <TIM_OC6_SetConfig+0xc0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d013      	beq.n	80044a4 <TIM_OC6_SetConfig+0x84>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <TIM_OC6_SetConfig+0xc4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00f      	beq.n	80044a4 <TIM_OC6_SetConfig+0x84>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <TIM_OC6_SetConfig+0xc8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_OC6_SetConfig+0x84>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a17      	ldr	r2, [pc, #92]	; (80044ec <TIM_OC6_SetConfig+0xcc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_OC6_SetConfig+0x84>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <TIM_OC6_SetConfig+0xd0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC6_SetConfig+0x84>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <TIM_OC6_SetConfig+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d109      	bne.n	80044b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	40014400 	.word	0x40014400
 80044f0:	40014800 	.word	0x40014800
 80044f4:	40015000 	.word	0x40015000

080044f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 030a 	bic.w	r3, r3, #10
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 0210 	bic.w	r2, r3, #16
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f043 0307 	orr.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	431a      	orrs	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	609a      	str	r2, [r3, #8]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2201      	movs	r2, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1a      	ldr	r2, [r3, #32]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	43db      	mvns	r3, r3
 8004652:	401a      	ands	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e06f      	b.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a30      	ldr	r2, [pc, #192]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d01d      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d018      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1c      	ldr	r2, [pc, #112]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00e      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a15      	ldr	r2, [pc, #84]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d009      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a16      	ldr	r2, [pc, #88]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d10c      	bne.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40015000 	.word	0x40015000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40014000 	.word	0x40014000

08004798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e042      	b.n	80048bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fc fff7 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2224      	movs	r2, #36	; 0x24
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fb24 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f825 	bl	80048c4 <UART_SetConfig>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e01b      	b.n	80048bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fba3 	bl	8005000 <UART_CheckIdleState>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b08c      	sub	sp, #48	; 0x30
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	431a      	orrs	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4baa      	ldr	r3, [pc, #680]	; (8004b9c <UART_SetConfig+0x2d8>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a9f      	ldr	r2, [pc, #636]	; (8004ba0 <UART_SetConfig+0x2dc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492c:	4313      	orrs	r3, r2
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800493a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004944:	430b      	orrs	r3, r1
 8004946:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f023 010f 	bic.w	r1, r3, #15
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a90      	ldr	r2, [pc, #576]	; (8004ba4 <UART_SetConfig+0x2e0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d125      	bne.n	80049b4 <UART_SetConfig+0xf0>
 8004968:	4b8f      	ldr	r3, [pc, #572]	; (8004ba8 <UART_SetConfig+0x2e4>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b03      	cmp	r3, #3
 8004974:	d81a      	bhi.n	80049ac <UART_SetConfig+0xe8>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0xb8>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	0800498d 	.word	0x0800498d
 8004980:	0800499d 	.word	0x0800499d
 8004984:	08004995 	.word	0x08004995
 8004988:	080049a5 	.word	0x080049a5
 800498c:	2301      	movs	r3, #1
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004992:	e116      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004994:	2302      	movs	r3, #2
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e112      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 800499c:	2304      	movs	r3, #4
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e10e      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 80049a4:	2308      	movs	r3, #8
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e10a      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e106      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a7c      	ldr	r2, [pc, #496]	; (8004bac <UART_SetConfig+0x2e8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d138      	bne.n	8004a30 <UART_SetConfig+0x16c>
 80049be:	4b7a      	ldr	r3, [pc, #488]	; (8004ba8 <UART_SetConfig+0x2e4>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d82d      	bhi.n	8004a28 <UART_SetConfig+0x164>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x110>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004a29 	.word	0x08004a29
 80049dc:	08004a29 	.word	0x08004a29
 80049e0:	08004a29 	.word	0x08004a29
 80049e4:	08004a19 	.word	0x08004a19
 80049e8:	08004a29 	.word	0x08004a29
 80049ec:	08004a29 	.word	0x08004a29
 80049f0:	08004a29 	.word	0x08004a29
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a29 	.word	0x08004a29
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	e0d8      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a10:	2302      	movs	r3, #2
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a16:	e0d4      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1e:	e0d0      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a26:	e0cc      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2e:	e0c8      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a5e      	ldr	r2, [pc, #376]	; (8004bb0 <UART_SetConfig+0x2ec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d125      	bne.n	8004a86 <UART_SetConfig+0x1c2>
 8004a3a:	4b5b      	ldr	r3, [pc, #364]	; (8004ba8 <UART_SetConfig+0x2e4>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d016      	beq.n	8004a76 <UART_SetConfig+0x1b2>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d818      	bhi.n	8004a7e <UART_SetConfig+0x1ba>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d00a      	beq.n	8004a66 <UART_SetConfig+0x1a2>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d814      	bhi.n	8004a7e <UART_SetConfig+0x1ba>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <UART_SetConfig+0x19a>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d008      	beq.n	8004a6e <UART_SetConfig+0x1aa>
 8004a5c:	e00f      	b.n	8004a7e <UART_SetConfig+0x1ba>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a64:	e0ad      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a66:	2302      	movs	r3, #2
 8004a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6c:	e0a9      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a74:	e0a5      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a76:	2308      	movs	r3, #8
 8004a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7c:	e0a1      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a7e:	2310      	movs	r3, #16
 8004a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a84:	e09d      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a4a      	ldr	r2, [pc, #296]	; (8004bb4 <UART_SetConfig+0x2f0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d125      	bne.n	8004adc <UART_SetConfig+0x218>
 8004a90:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <UART_SetConfig+0x2e4>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a9c:	d016      	beq.n	8004acc <UART_SetConfig+0x208>
 8004a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa0:	d818      	bhi.n	8004ad4 <UART_SetConfig+0x210>
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d00a      	beq.n	8004abc <UART_SetConfig+0x1f8>
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d814      	bhi.n	8004ad4 <UART_SetConfig+0x210>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <UART_SetConfig+0x1f0>
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d008      	beq.n	8004ac4 <UART_SetConfig+0x200>
 8004ab2:	e00f      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aba:	e082      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac2:	e07e      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aca:	e07a      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004acc:	2308      	movs	r3, #8
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad2:	e076      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ada:	e072      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a35      	ldr	r2, [pc, #212]	; (8004bb8 <UART_SetConfig+0x2f4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d12a      	bne.n	8004b3c <UART_SetConfig+0x278>
 8004ae6:	4b30      	ldr	r3, [pc, #192]	; (8004ba8 <UART_SetConfig+0x2e4>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af4:	d01a      	beq.n	8004b2c <UART_SetConfig+0x268>
 8004af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afa:	d81b      	bhi.n	8004b34 <UART_SetConfig+0x270>
 8004afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b00:	d00c      	beq.n	8004b1c <UART_SetConfig+0x258>
 8004b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b06:	d815      	bhi.n	8004b34 <UART_SetConfig+0x270>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <UART_SetConfig+0x250>
 8004b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b10:	d008      	beq.n	8004b24 <UART_SetConfig+0x260>
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x270>
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1a:	e052      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b22:	e04e      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	e04a      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e046      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e042      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <UART_SetConfig+0x2dc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d13a      	bne.n	8004bbc <UART_SetConfig+0x2f8>
 8004b46:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <UART_SetConfig+0x2e4>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b54:	d01a      	beq.n	8004b8c <UART_SetConfig+0x2c8>
 8004b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b5a:	d81b      	bhi.n	8004b94 <UART_SetConfig+0x2d0>
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b60:	d00c      	beq.n	8004b7c <UART_SetConfig+0x2b8>
 8004b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b66:	d815      	bhi.n	8004b94 <UART_SetConfig+0x2d0>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <UART_SetConfig+0x2b0>
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b70:	d008      	beq.n	8004b84 <UART_SetConfig+0x2c0>
 8004b72:	e00f      	b.n	8004b94 <UART_SetConfig+0x2d0>
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7a:	e022      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b82:	e01e      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b84:	2304      	movs	r3, #4
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8a:	e01a      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b92:	e016      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b94:	2310      	movs	r3, #16
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9a:	e012      	b.n	8004bc2 <UART_SetConfig+0x2fe>
 8004b9c:	cfff69f3 	.word	0xcfff69f3
 8004ba0:	40008000 	.word	0x40008000
 8004ba4:	40013800 	.word	0x40013800
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40004400 	.word	0x40004400
 8004bb0:	40004800 	.word	0x40004800
 8004bb4:	40004c00 	.word	0x40004c00
 8004bb8:	40005000 	.word	0x40005000
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4aae      	ldr	r2, [pc, #696]	; (8004e80 <UART_SetConfig+0x5bc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	f040 8097 	bne.w	8004cfc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d823      	bhi.n	8004c1e <UART_SetConfig+0x35a>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x318>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c1f 	.word	0x08004c1f
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c1f 	.word	0x08004c1f
 8004bec:	08004c0f 	.word	0x08004c0f
 8004bf0:	08004c1f 	.word	0x08004c1f
 8004bf4:	08004c1f 	.word	0x08004c1f
 8004bf8:	08004c1f 	.word	0x08004c1f
 8004bfc:	08004c17 	.word	0x08004c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fd ff6e 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c06:	e010      	b.n	8004c2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c08:	4b9e      	ldr	r3, [pc, #632]	; (8004e84 <UART_SetConfig+0x5c0>)
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c0c:	e00d      	b.n	8004c2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0e:	f7fd fef9 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c14:	e009      	b.n	8004c2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c1c:	e005      	b.n	8004c2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8130 	beq.w	8004e92 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	4a94      	ldr	r2, [pc, #592]	; (8004e88 <UART_SetConfig+0x5c4>)
 8004c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	4413      	add	r3, r2
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d305      	bcc.n	8004c62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d903      	bls.n	8004c6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c68:	e113      	b.n	8004e92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	60fa      	str	r2, [r7, #12]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	4a84      	ldr	r2, [pc, #528]	; (8004e88 <UART_SetConfig+0x5c4>)
 8004c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2200      	movs	r2, #0
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c8c:	f7fb feb2 	bl	80009f4 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	020b      	lsls	r3, r1, #8
 8004ca2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ca6:	0202      	lsls	r2, r0, #8
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	6849      	ldr	r1, [r1, #4]
 8004cac:	0849      	lsrs	r1, r1, #1
 8004cae:	2000      	movs	r0, #0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	eb12 0804 	adds.w	r8, r2, r4
 8004cb8:	eb43 0905 	adc.w	r9, r3, r5
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	469a      	mov	sl, r3
 8004cc4:	4693      	mov	fp, r2
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	465b      	mov	r3, fp
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb fe91 	bl	80009f4 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce0:	d308      	bcc.n	8004cf4 <UART_SetConfig+0x430>
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce8:	d204      	bcs.n	8004cf4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	e0ce      	b.n	8004e92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cfa:	e0ca      	b.n	8004e92 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d04:	d166      	bne.n	8004dd4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d827      	bhi.n	8004d5e <UART_SetConfig+0x49a>
 8004d0e:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0x450>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d41 	.word	0x08004d41
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d4f 	.word	0x08004d4f
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d5f 	.word	0x08004d5f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d38:	f7fd fed2 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d3e:	e014      	b.n	8004d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7fd fee4 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d46:	e010      	b.n	8004d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <UART_SetConfig+0x5c0>)
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d4c:	e00d      	b.n	8004d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fd fe59 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d54:	e009      	b.n	8004d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d5c:	e005      	b.n	8004d6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8090 	beq.w	8004e92 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	4a44      	ldr	r2, [pc, #272]	; (8004e88 <UART_SetConfig+0x5c4>)
 8004d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d84:	005a      	lsls	r2, r3, #1
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	441a      	add	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	2b0f      	cmp	r3, #15
 8004d9c:	d916      	bls.n	8004dcc <UART_SetConfig+0x508>
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d212      	bcs.n	8004dcc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f023 030f 	bic.w	r3, r3, #15
 8004dae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	8bfb      	ldrh	r3, [r7, #30]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	8bfa      	ldrh	r2, [r7, #30]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	e062      	b.n	8004e92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dd2:	e05e      	b.n	8004e92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d828      	bhi.n	8004e2e <UART_SetConfig+0x56a>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x520>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e1f 	.word	0x08004e1f
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fd fe6a 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0e:	e014      	b.n	8004e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fd fe7c 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8004e14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e16:	e010      	b.n	8004e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <UART_SetConfig+0x5c0>)
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e1c:	e00d      	b.n	8004e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fd fdf1 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e2c:	e005      	b.n	8004e3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e38:	bf00      	nop
    }

    if (pclk != 0U)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d028      	beq.n	8004e92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <UART_SetConfig+0x5c4>)
 8004e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	441a      	add	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d910      	bls.n	8004e8c <UART_SetConfig+0x5c8>
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e70:	d20c      	bcs.n	8004e8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60da      	str	r2, [r3, #12]
 8004e7c:	e009      	b.n	8004e92 <UART_SetConfig+0x5ce>
 8004e7e:	bf00      	nop
 8004e80:	40008000 	.word	0x40008000
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	08005588 	.word	0x08005588
      }
      else
      {
        ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004eae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3730      	adds	r7, #48	; 0x30
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fba:	d10a      	bne.n	8004fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b098      	sub	sp, #96	; 0x60
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fc fcfa 	bl	8001a08 <HAL_GetTick>
 8005014:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d12f      	bne.n	8005084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f88e 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d022      	beq.n	8005084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	653b      	str	r3, [r7, #80]	; 0x50
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e063      	b.n	800514c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d149      	bne.n	8005126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f857 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03c      	beq.n	8005126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30
 80050cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e6      	bne.n	80050ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3308      	adds	r3, #8
 80050fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fe:	61fa      	str	r2, [r7, #28]
 8005100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	617b      	str	r3, [r7, #20]
   return(result);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e012      	b.n	800514c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3758      	adds	r7, #88	; 0x58
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e04f      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d04b      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fc fc4b 	bl	8001a08 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e04e      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d037      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d034      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d031      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d110      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f838 	bl	800522e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2208      	movs	r2, #8
 80051c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e029      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e0:	d111      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f81e 	bl	800522e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d0a0      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522e:	b480      	push	{r7}
 8005230:	b095      	sub	sp, #84	; 0x54
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
 8005256:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e6      	bne.n	8005236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	61fb      	str	r3, [r7, #28]
   return(result);
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e3      	bne.n	8005268 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	613b      	str	r3, [r7, #16]
   return(result);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052ee:	bf00      	nop
 80052f0:	3754      	adds	r7, #84	; 0x54
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_UARTEx_DisableFifoMode+0x16>
 800530c:	2302      	movs	r3, #2
 800530e:	e027      	b.n	8005360 <HAL_UARTEx_DisableFifoMode+0x66>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2224      	movs	r2, #36	; 0x24
 800531c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800533e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e02d      	b.n	80053e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f84f 	bl	8005464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e02d      	b.n	800545c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	; 0x24
 800540c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f811 	bl	8005464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005470:	2b00      	cmp	r3, #0
 8005472:	d108      	bne.n	8005486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005484:	e031      	b.n	80054ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005486:	2308      	movs	r3, #8
 8005488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800548a:	2308      	movs	r3, #8
 800548c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	0e5b      	lsrs	r3, r3, #25
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	0f5b      	lsrs	r3, r3, #29
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	7b3a      	ldrb	r2, [r7, #12]
 80054b2:	4911      	ldr	r1, [pc, #68]	; (80054f8 <UARTEx_SetNbDataToProcess+0x94>)
 80054b4:	5c8a      	ldrb	r2, [r1, r2]
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054ba:	7b3a      	ldrb	r2, [r7, #12]
 80054bc:	490f      	ldr	r1, [pc, #60]	; (80054fc <UARTEx_SetNbDataToProcess+0x98>)
 80054be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	7b7a      	ldrb	r2, [r7, #13]
 80054d0:	4909      	ldr	r1, [pc, #36]	; (80054f8 <UARTEx_SetNbDataToProcess+0x94>)
 80054d2:	5c8a      	ldrb	r2, [r1, r2]
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054d8:	7b7a      	ldrb	r2, [r7, #13]
 80054da:	4908      	ldr	r1, [pc, #32]	; (80054fc <UARTEx_SetNbDataToProcess+0x98>)
 80054dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054de:	fb93 f3f2 	sdiv	r3, r3, r2
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	080055a0 	.word	0x080055a0
 80054fc:	080055a8 	.word	0x080055a8

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	; (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	; (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	; (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	; (8005544 <__libc_init_array+0x44>)
 8005514:	f000 f820 	bl	8005558 <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	080055b8 	.word	0x080055b8
 800553c:	080055b8 	.word	0x080055b8
 8005540:	080055b8 	.word	0x080055b8
 8005544:	080055bc 	.word	0x080055bc

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
