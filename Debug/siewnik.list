
siewnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005138  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005350  08005350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005358  08005358  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800536c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800536c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d54  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002719  00000000  00000000  00033d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00037518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef10  00000000  00000000  00038488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013668  00000000  00000000  00057398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca3ec  00000000  00000000  0006aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134dec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045bc  00000000  00000000  00134e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080052f8 	.word	0x080052f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080052f8 	.word	0x080052f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b974 	b.w	8000cf4 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468e      	mov	lr, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14d      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4694      	mov	ip, r2
 8000a36:	d969      	bls.n	8000b0c <__udivmoddi4+0xe8>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b152      	cbz	r2, 8000a54 <__udivmoddi4+0x30>
 8000a3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a42:	f1c2 0120 	rsb	r1, r2, #32
 8000a46:	fa20 f101 	lsr.w	r1, r0, r1
 8000a4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a52:	4094      	lsls	r4, r2
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	0c21      	lsrs	r1, r4, #16
 8000a5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a5e:	fa1f f78c 	uxth.w	r7, ip
 8000a62:	fb08 e316 	mls	r3, r8, r6, lr
 8000a66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a6a:	fb06 f107 	mul.w	r1, r6, r7
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a7a:	f080 811f 	bcs.w	8000cbc <__udivmoddi4+0x298>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 811c 	bls.w	8000cbc <__udivmoddi4+0x298>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3310 	mls	r3, r8, r0, r3
 8000a94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a98:	fb00 f707 	mul.w	r7, r0, r7
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	d90a      	bls.n	8000ab6 <__udivmoddi4+0x92>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa8:	f080 810a 	bcs.w	8000cc0 <__udivmoddi4+0x29c>
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	f240 8107 	bls.w	8000cc0 <__udivmoddi4+0x29c>
 8000ab2:	4464      	add	r4, ip
 8000ab4:	3802      	subs	r0, #2
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	1be4      	subs	r4, r4, r7
 8000abc:	2600      	movs	r6, #0
 8000abe:	b11d      	cbz	r5, 8000ac8 <__udivmoddi4+0xa4>
 8000ac0:	40d4      	lsrs	r4, r2
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0xc2>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	f000 80ef 	beq.w	8000cb6 <__udivmoddi4+0x292>
 8000ad8:	2600      	movs	r6, #0
 8000ada:	e9c5 0100 	strd	r0, r1, [r5]
 8000ade:	4630      	mov	r0, r6
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	fab3 f683 	clz	r6, r3
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d14a      	bne.n	8000b84 <__udivmoddi4+0x160>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xd4>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 80f9 	bhi.w	8000cea <__udivmoddi4+0x2c6>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb61 0303 	sbc.w	r3, r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	469e      	mov	lr, r3
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d0e0      	beq.n	8000ac8 <__udivmoddi4+0xa4>
 8000b06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b0a:	e7dd      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000b0c:	b902      	cbnz	r2, 8000b10 <__udivmoddi4+0xec>
 8000b0e:	deff      	udf	#255	; 0xff
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	f040 8092 	bne.w	8000c3e <__udivmoddi4+0x21a>
 8000b1a:	eba1 010c 	sub.w	r1, r1, ip
 8000b1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b22:	fa1f fe8c 	uxth.w	lr, ip
 8000b26:	2601      	movs	r6, #1
 8000b28:	0c20      	lsrs	r0, r4, #16
 8000b2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b36:	fb0e f003 	mul.w	r0, lr, r3
 8000b3a:	4288      	cmp	r0, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x12c>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x12a>
 8000b48:	4288      	cmp	r0, r1
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2c0>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	1a09      	subs	r1, r1, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b58:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b60:	fb0e fe00 	mul.w	lr, lr, r0
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x156>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x154>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 80bb 	bhi.w	8000cee <__udivmoddi4+0x2ca>
 8000b78:	4608      	mov	r0, r1
 8000b7a:	eba4 040e 	sub.w	r4, r4, lr
 8000b7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b82:	e79c      	b.n	8000abe <__udivmoddi4+0x9a>
 8000b84:	f1c6 0720 	rsb	r7, r6, #32
 8000b88:	40b3      	lsls	r3, r6
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa20 f407 	lsr.w	r4, r0, r7
 8000b96:	fa01 f306 	lsl.w	r3, r1, r6
 8000b9a:	431c      	orrs	r4, r3
 8000b9c:	40f9      	lsrs	r1, r7
 8000b9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ba6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000baa:	0c20      	lsrs	r0, r4, #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b8>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bcc:	f080 8088 	bcs.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f240 8085 	bls.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bda:	4461      	add	r1, ip
 8000bdc:	1a09      	subs	r1, r1, r0
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000be4:	fb09 1110 	mls	r1, r9, r0, r1
 8000be8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf0:	458e      	cmp	lr, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1e2>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfc:	d26c      	bcs.n	8000cd8 <__udivmoddi4+0x2b4>
 8000bfe:	458e      	cmp	lr, r1
 8000c00:	d96a      	bls.n	8000cd8 <__udivmoddi4+0x2b4>
 8000c02:	3802      	subs	r0, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c0e:	eba1 010e 	sub.w	r1, r1, lr
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	46c8      	mov	r8, r9
 8000c16:	46a6      	mov	lr, r4
 8000c18:	d356      	bcc.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c1a:	d053      	beq.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c1c:	b15d      	cbz	r5, 8000c36 <__udivmoddi4+0x212>
 8000c1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c22:	eb61 010e 	sbc.w	r1, r1, lr
 8000c26:	fa01 f707 	lsl.w	r7, r1, r7
 8000c2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c2e:	40f1      	lsrs	r1, r6
 8000c30:	431f      	orrs	r7, r3
 8000c32:	e9c5 7100 	strd	r7, r1, [r5]
 8000c36:	2600      	movs	r6, #0
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	40d8      	lsrs	r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	fa21 f303 	lsr.w	r3, r1, r3
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4301      	orrs	r1, r0
 8000c50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c60:	0c0b      	lsrs	r3, r1, #16
 8000c62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c66:	fb00 f60e 	mul.w	r6, r0, lr
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x260>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c7a:	d22f      	bcs.n	8000cdc <__udivmoddi4+0x2b8>
 8000c7c:	429e      	cmp	r6, r3
 8000c7e:	d92d      	bls.n	8000cdc <__udivmoddi4+0x2b8>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	b289      	uxth	r1, r1
 8000c88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb06 f30e 	mul.w	r3, r6, lr
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x28a>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ca4:	d216      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d914      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000caa:	3e02      	subs	r6, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cb4:	e738      	b.n	8000b28 <__udivmoddi4+0x104>
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e705      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e3      	b.n	8000a88 <__udivmoddi4+0x64>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6f8      	b.n	8000ab6 <__udivmoddi4+0x92>
 8000cc4:	454b      	cmp	r3, r9
 8000cc6:	d2a9      	bcs.n	8000c1c <__udivmoddi4+0x1f8>
 8000cc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ccc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7a3      	b.n	8000c1c <__udivmoddi4+0x1f8>
 8000cd4:	4646      	mov	r6, r8
 8000cd6:	e7ea      	b.n	8000cae <__udivmoddi4+0x28a>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	e794      	b.n	8000c06 <__udivmoddi4+0x1e2>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	e7d1      	b.n	8000c84 <__udivmoddi4+0x260>
 8000ce0:	46d0      	mov	r8, sl
 8000ce2:	e77b      	b.n	8000bdc <__udivmoddi4+0x1b8>
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	4461      	add	r1, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x12c>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e709      	b.n	8000b02 <__udivmoddi4+0xde>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	e742      	b.n	8000b7a <__udivmoddi4+0x156>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <_dropper_StepIRQ>:

#include "dropper.h"

uint32_t stepCounter = 0;

void _dropper_StepIRQ(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	++stepCounter;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <_dropper_StepIRQ+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <_dropper_StepIRQ+0x18>)
 8000d04:	6013      	str	r3, [r2, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20000028 	.word	0x20000028

08000d14 <_dropper_Init>:

void _dropper_Init(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEED_CHANNEL_1_PORT, SEED_CHANNEL_1_PIN, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1e:	4839      	ldr	r0, [pc, #228]	; (8000e04 <_dropper_Init+0xf0>)
 8000d20:	f001 f802 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_2_PORT, SEED_CHANNEL_2_PIN, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	4837      	ldr	r0, [pc, #220]	; (8000e08 <_dropper_Init+0xf4>)
 8000d2c:	f000 fffc 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_3_PORT, SEED_CHANNEL_3_PIN, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f000 fff5 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_4_PORT, SEED_CHANNEL_4_PIN, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 ffee 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_5_PORT, SEED_CHANNEL_5_PIN, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	482d      	ldr	r0, [pc, #180]	; (8000e08 <_dropper_Init+0xf4>)
 8000d54:	f000 ffe8 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEED_CHANNEL_6_PORT, SEED_CHANNEL_6_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	482a      	ldr	r0, [pc, #168]	; (8000e08 <_dropper_Init+0xf4>)
 8000d5e:	f000 ffe3 	bl	8001d28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PORT, VIBRATE_MOTOR_FOR_PELLETED_SEEDS_PIN, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	4828      	ldr	r0, [pc, #160]	; (8000e08 <_dropper_Init+0xf4>)
 8000d68:	f000 ffde 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f000 ffd7 	bl	8001d28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_EN_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f000 ffd1 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f000 ffcb 	bl	8001d28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DROPPER_STEPPER_EN_PORT, DROPPER_STEPPER_EN_PIN, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	481c      	ldr	r0, [pc, #112]	; (8000e08 <_dropper_Init+0xf4>)
 8000d98:	f000 ffc6 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <_dropper_Init+0xf0>)
 8000da2:	f000 ffc1 	bl	8001d28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RELAY_9_GPIO_Port, RELAY_9_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <_dropper_Init+0xf0>)
 8000dae:	f000 ffbb 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_10_GPIO_Port, RELAY_10_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <_dropper_Init+0xf0>)
 8000db8:	f000 ffb6 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_11_GPIO_Port, RELAY_11_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <_dropper_Init+0xf4>)
 8000dc4:	f000 ffb0 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_12_GPIO_Port, RELAY_12_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2104      	movs	r1, #4
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <_dropper_Init+0xf4>)
 8000dce:	f000 ffab 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_13_GPIO_Port, RELAY_13_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <_dropper_Init+0xf4>)
 8000dd8:	f000 ffa6 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_14_GPIO_Port, RELAY_14_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <_dropper_Init+0xf4>)
 8000de4:	f000 ffa0 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_15_GPIO_Port, RELAY_15_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <_dropper_Init+0xf4>)
 8000df0:	f000 ff9a 	bl	8001d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_16_GPIO_Port, RELAY_16_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <_dropper_Init+0xf4>)
 8000dfc:	f000 ff94 	bl	8001d28 <HAL_GPIO_WritePin>

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000400 	.word	0x48000400

08000e0c <_dropper_DropperSetMoveDirection>:
	stepCounter = 0;
	while(stepCounter < 6400);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
}

void _dropper_DropperSetMoveDirection(_stepperMoveDirection md){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	switch(md){
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <_dropper_DropperSetMoveDirection+0x16>
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d006      	beq.n	8000e2e <_dropper_DropperSetMoveDirection+0x22>
		break;
	case BACKWARD:
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
		break;
	}
}
 8000e20:	e00b      	b.n	8000e3a <_dropper_DropperSetMoveDirection+0x2e>
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <_dropper_DropperSetMoveDirection+0x38>)
 8000e28:	f000 ff7e 	bl	8001d28 <HAL_GPIO_WritePin>
		break;
 8000e2c:	e005      	b.n	8000e3a <_dropper_DropperSetMoveDirection+0x2e>
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <_dropper_DropperSetMoveDirection+0x38>)
 8000e34:	f000 ff78 	bl	8001d28 <HAL_GPIO_WritePin>
		break;
 8000e38:	bf00      	nop
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	48000800 	.word	0x48000800

08000e48 <_dropper_DrumSetMoveDirection>:

void _dropper_DrumSetMoveDirection(_stepperMoveDirection md){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	switch(md){
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <_dropper_DrumSetMoveDirection+0x16>
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d007      	beq.n	8000e6c <_dropper_DrumSetMoveDirection+0x24>
		break;
	case BACKWARD:
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
		break;
	}
}
 8000e5c:	e00d      	b.n	8000e7a <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f000 ff5f 	bl	8001d28 <HAL_GPIO_WritePin>
		break;
 8000e6a:	e006      	b.n	8000e7a <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f000 ff58 	bl	8001d28 <HAL_GPIO_WritePin>
		break;
 8000e78:	bf00      	nop
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	0000      	movs	r0, r0
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <_dropper_RotateDrum_deg>:

void _dropper_RotateDrum_deg(float angle_deg){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(angle_deg < 0){
 8000e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d503      	bpl.n	8000ea8 <_dropper_RotateDrum_deg+0x20>
		_dropper_DrumSetMoveDirection(BACKWARD);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff ffd1 	bl	8000e48 <_dropper_DrumSetMoveDirection>
 8000ea6:	e002      	b.n	8000eae <_dropper_RotateDrum_deg+0x26>
	}
	else{
		_dropper_DrumSetMoveDirection(FORWARD);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ffcd 	bl	8000e48 <_dropper_DrumSetMoveDirection>
	}

	uint32_t stepsToDo = (uint32_t)((angle_deg * (float)DRUM_STEPPER_MICROSTEPPING)/DEFAULT_ANGLE_PER_STEP);
 8000eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000f20 <_dropper_RotateDrum_deg+0x98>
 8000eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eba:	ee17 0a90 	vmov	r0, s15
 8000ebe:	f7ff fb0f 	bl	80004e0 <__aeabi_f2d>
 8000ec2:	a315      	add	r3, pc, #84	; (adr r3, 8000f18 <_dropper_RotateDrum_deg+0x90>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	f7ff fc8c 	bl	80007e4 <__aeabi_ddiv>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fd6e 	bl	80009b4 <__aeabi_d2uiz>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4811      	ldr	r0, [pc, #68]	; (8000f24 <_dropper_RotateDrum_deg+0x9c>)
 8000ee0:	f002 f834 	bl	8002f4c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 49);
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <_dropper_RotateDrum_deg+0x9c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2231      	movs	r2, #49	; 0x31
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34
	stepCounter = 0;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <_dropper_RotateDrum_deg+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	while(stepCounter < stepsToDo);
 8000ef2:	bf00      	nop
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <_dropper_RotateDrum_deg+0xa0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d8fa      	bhi.n	8000ef4 <_dropper_RotateDrum_deg+0x6c>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <_dropper_RotateDrum_deg+0x9c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000f06:	2100      	movs	r1, #0
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <_dropper_RotateDrum_deg+0x9c>)
 8000f0a:	f002 f977 	bl	80031fc <HAL_TIM_PWM_Stop_IT>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	cccccccd 	.word	0xcccccccd
 8000f1c:	3ffccccc 	.word	0x3ffccccc
 8000f20:	42000000 	.word	0x42000000
 8000f24:	2000002c 	.word	0x2000002c
 8000f28:	20000028 	.word	0x20000028

08000f2c <_dropper_MoveDropper_mm>:

void _dropper_MoveDropper_mm(float distance_mm){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	ed87 0a01 	vstr	s0, [r7, #4]

	if(distance_mm < 0){
 8000f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f42:	d503      	bpl.n	8000f4c <_dropper_MoveDropper_mm+0x20>
		_dropper_DropperSetMoveDirection(BACKWARD);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ff61 	bl	8000e0c <_dropper_DropperSetMoveDirection>
 8000f4a:	e002      	b.n	8000f52 <_dropper_MoveDropper_mm+0x26>
	}
	else{
		_dropper_DropperSetMoveDirection(FORWARD);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ff5d 	bl	8000e0c <_dropper_DropperSetMoveDirection>
	}

	float distancePerStep_mm = (DEFAULT_ANGLE_PER_STEP*PI*(float)DROPPER_STEPPER_PULLEY_DIAMETER_MM)/360.0;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <_dropper_MoveDropper_mm+0x84>)
 8000f54:	60fb      	str	r3, [r7, #12]
	uint32_t stepsToDo = (uint32_t)((distance_mm * (float)DRUM_STEPPER_MICROSTEPPING)/distancePerStep_mm);
 8000f56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000fb4 <_dropper_MoveDropper_mm+0x88>
 8000f5e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f62:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	60bb      	str	r3, [r7, #8]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <_dropper_MoveDropper_mm+0x8c>)
 8000f78:	f001 ffe8 	bl	8002f4c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 49);
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <_dropper_MoveDropper_mm+0x8c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2231      	movs	r2, #49	; 0x31
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
	stepCounter = 0;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <_dropper_MoveDropper_mm+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
	while(stepCounter < stepsToDo);
 8000f8a:	bf00      	nop
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <_dropper_MoveDropper_mm+0x90>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d8fa      	bhi.n	8000f8c <_dropper_MoveDropper_mm+0x60>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_dropper_MoveDropper_mm+0x8c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <_dropper_MoveDropper_mm+0x8c>)
 8000fa2:	f002 f92b 	bl	80031fc <HAL_TIM_PWM_Stop_IT>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	3e20c49c 	.word	0x3e20c49c
 8000fb4:	42000000 	.word	0x42000000
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	20000028 	.word	0x20000028

08000fc0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a6d      	ldr	r2, [pc, #436]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b6b      	ldr	r3, [pc, #428]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b68      	ldr	r3, [pc, #416]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a67      	ldr	r2, [pc, #412]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b65      	ldr	r3, [pc, #404]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b62      	ldr	r3, [pc, #392]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a61      	ldr	r2, [pc, #388]	; (8001190 <MX_GPIO_Init+0x1d0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a5b      	ldr	r2, [pc, #364]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b59      	ldr	r3, [pc, #356]	; (8001190 <MX_GPIO_Init+0x1d0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a55      	ldr	r2, [pc, #340]	; (8001190 <MX_GPIO_Init+0x1d0>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b53      	ldr	r3, [pc, #332]	; (8001190 <MX_GPIO_Init+0x1d0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 800104e:	2200      	movs	r2, #0
 8001050:	f240 7123 	movw	r1, #1827	; 0x723
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f000 fe66 	bl	8001d28 <HAL_GPIO_WritePin>
                          |RELAY_3_Pin|RELAY_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 800105c:	2200      	movs	r2, #0
 800105e:	f64e 6176 	movw	r1, #61046	; 0xee76
 8001062:	484c      	ldr	r0, [pc, #304]	; (8001194 <MX_GPIO_Init+0x1d4>)
 8001064:	f000 fe60 	bl	8001d28 <HAL_GPIO_WritePin>
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800106e:	484a      	ldr	r0, [pc, #296]	; (8001198 <MX_GPIO_Init+0x1d8>)
 8001070:	f000 fe5a 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4843      	ldr	r0, [pc, #268]	; (8001198 <MX_GPIO_Init+0x1d8>)
 800108c:	f000 fcca 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SENSOR_9_Pin|SENSOR_10_Pin|SENSOR_3_Pin|SENSOR_1_Pin
 8001090:	f641 430c 	movw	r3, #7180	; 0x1c0c
 8001094:	617b      	str	r3, [r7, #20]
                          |SENSOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800109a:	2302      	movs	r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	483c      	ldr	r0, [pc, #240]	; (8001198 <MX_GPIO_Init+0x1d8>)
 80010a6:	f000 fcbd 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 80010aa:	f240 7323 	movw	r3, #1827	; 0x723
 80010ae:	617b      	str	r3, [r7, #20]
                          |RELAY_3_Pin|RELAY_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f000 fcad 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010ca:	230c      	movs	r3, #12
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010da:	230c      	movs	r3, #12
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fc9c 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_12_Pin|SENSOR_6_Pin|SENSOR_5_Pin;
 80010ec:	f641 0310 	movw	r3, #6160	; 0x1810
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f000 fc8e 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_11_Pin|SENSOR_7_Pin|SENSOR_8_Pin;
 8001108:	f241 0381 	movw	r3, #4225	; 0x1081
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <MX_GPIO_Init+0x1d4>)
 800111e:	f000 fc81 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 8001122:	f64e 6376 	movw	r3, #61046	; 0xee76
 8001126:	617b      	str	r3, [r7, #20]
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4816      	ldr	r0, [pc, #88]	; (8001194 <MX_GPIO_Init+0x1d4>)
 800113c:	f000 fc72 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin;
 8001140:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	480f      	ldr	r0, [pc, #60]	; (8001198 <MX_GPIO_Init+0x1d8>)
 800115a:	f000 fc63 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_2_Pin;
 800115e:	2304      	movs	r3, #4
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_2_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <MX_GPIO_Init+0x1dc>)
 8001172:	f000 fc57 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2028      	movs	r0, #40	; 0x28
 800117c:	f000 fc1d 	bl	80019ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001180:	2028      	movs	r0, #40	; 0x28
 8001182:	f000 fc34 	bl	80019ee <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800
 800119c:	48000c00 	.word	0x48000c00

080011a0 <HAL_TIM_PWM_PulseFinishedCallback>:
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		_dropper_StepIRQ();
 80011b2:	f7ff fda1 	bl	8000cf8 <_dropper_StepIRQ>
	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40000400 	.word	0x40000400

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f000 fa89 	bl	80016de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f81a 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f7ff fef6 	bl	8000fc0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80011d4:	f000 f8d8 	bl	8001388 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011d8:	f000 f9b4 	bl	8001544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 	_dropper_Init();
 80011dc:	f7ff fd9a 	bl	8000d14 <_dropper_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		_dropper_RotateDrum_deg(180.0);
 80011e0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80011fc <main+0x38>
 80011e4:	f7ff fe50 	bl	8000e88 <_dropper_RotateDrum_deg>
		_dropper_MoveDropper_mm(50.0);
 80011e8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001200 <main+0x3c>
 80011ec:	f7ff fe9e 	bl	8000f2c <_dropper_MoveDropper_mm>
		HAL_Delay(1000);
 80011f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f4:	f000 fae4 	bl	80017c0 <HAL_Delay>
		_dropper_RotateDrum_deg(180.0);
 80011f8:	e7f2      	b.n	80011e0 <main+0x1c>
 80011fa:	bf00      	nop
 80011fc:	43340000 	.word	0x43340000
 8001200:	42480000 	.word	0x42480000

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	2238      	movs	r2, #56	; 0x38
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f004 f868 	bl	80052e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 fdba 	bl	8001da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001242:	2304      	movs	r3, #4
 8001244:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001246:	2355      	movs	r3, #85	; 0x55
 8001248:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fe54 	bl	8001f08 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001266:	f000 f818 	bl	800129a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2303      	movs	r3, #3
 8001270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2104      	movs	r1, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f952 	bl	800252c <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800128e:	f000 f804 	bl	800129a <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3750      	adds	r7, #80	; 0x50
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129e:	b672      	cpsid	i
}
 80012a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012a2:	e7fe      	b.n	80012a2 <Error_Handler+0x8>

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x44>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_MspInit+0x44>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6613      	str	r3, [r2, #96]	; 0x60
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x44>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x44>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x44>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x44>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012da:	f000 fe05 	bl	8001ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 fa24 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <TIM3_IRQHandler+0x10>)
 8001346:	f002 f843 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000002c 	.word	0x2000002c

08001354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001358:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800135c:	f000 fcfc 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <MX_TIM3_Init+0x100>)
 80013be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013c2:	22a9      	movs	r2, #169	; 0xa9
 80013c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013ce:	2263      	movs	r2, #99	; 0x63
 80013d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013de:	4829      	ldr	r0, [pc, #164]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013e0:	f001 fcfc 	bl	8002ddc <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013ea:	f7ff ff56 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4822      	ldr	r0, [pc, #136]	; (8001484 <MX_TIM3_Init+0xfc>)
 80013fc:	f002 fa4c 	bl	8003898 <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001406:	f7ff ff48 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800140a:	481e      	ldr	r0, [pc, #120]	; (8001484 <MX_TIM3_Init+0xfc>)
 800140c:	f001 fd3d 	bl	8002e8a <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001416:	f7ff ff40 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4816      	ldr	r0, [pc, #88]	; (8001484 <MX_TIM3_Init+0xfc>)
 800142a:	f002 fff7 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001434:	f7ff ff31 	bl	800129a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_TIM3_Init+0xfc>)
 8001450:	f002 f90e 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800145a:	f7ff ff1e 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM3_Init+0xfc>)
 8001466:	f002 f903 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001470:	f7ff ff13 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM3_Init+0xfc>)
 8001476:	f000 f82f 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	; 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000002c 	.word	0x2000002c
 8001488:	40000400 	.word	0x40000400

0800148c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_TIM_Base_MspInit+0x44>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d113      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6593      	str	r3, [r2, #88]	; 0x58
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	201d      	movs	r0, #29
 80014bc:	f000 fa7d 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014c0:	201d      	movs	r0, #29
 80014c2:	f000 fa94 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40000400 	.word	0x40000400
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a11      	ldr	r2, [pc, #68]	; (800153c <HAL_TIM_MspPostInit+0x64>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d11c      	bne.n	8001534 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_TIM_MspPostInit+0x68>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_TIM_MspPostInit+0x68>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_MspPostInit+0x68>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f000 fa78 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40000400 	.word	0x40000400
 8001540:	40021000 	.word	0x40021000

08001544 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <MX_USART1_UART_Init+0x94>)
 800154c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158c:	4811      	ldr	r0, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 800158e:	f003 f819 	bl	80045c4 <HAL_UART_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001598:	f7ff fe7f 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 80015a0:	f003 fdb4 	bl	800510c <HAL_UARTEx_SetTxFifoThreshold>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f7ff fe76 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 80015b2:	f003 fde9 	bl	8005188 <HAL_UARTEx_SetRxFifoThreshold>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015bc:	f7ff fe6d 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_USART1_UART_Init+0x90>)
 80015c2:	f003 fd6a 	bl	800509a <HAL_UARTEx_DisableFifoMode>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f7ff fe65 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000078 	.word	0x20000078
 80015d8:	40013800 	.word	0x40013800

080015dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b09e      	sub	sp, #120	; 0x78
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2250      	movs	r2, #80	; 0x50
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fe73 	bl	80052e8 <memset>
  if(uartHandle->Instance==USART1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_UART_MspInit+0xa4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d135      	bne.n	8001678 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4618      	mov	r0, r3
 800161a:	f001 f9a3 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001624:	f7ff fe39 	bl	800129a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_UART_MspInit+0xa8>)
 800162a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162c:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_UART_MspInit+0xa8>)
 800162e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001632:	6613      	str	r3, [r2, #96]	; 0x60
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_UART_MspInit+0xa8>)
 8001636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_UART_MspInit+0xa8>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_UART_MspInit+0xa8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_UART_MspInit+0xa8>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001658:	2330      	movs	r3, #48	; 0x30
 800165a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001668:	2307      	movs	r3, #7
 800166a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_UART_MspInit+0xac>)
 8001674:	f000 f9d6 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	3778      	adds	r7, #120	; 0x78
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013800 	.word	0x40013800
 8001684:	40021000 	.word	0x40021000
 8001688:	48000800 	.word	0x48000800

0800168c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800168e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff fe68 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f003 fdf1 	bl	80052a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016be:	f7ff fd81 	bl	80011c4 <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   r0, =_estack
 80016c4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016d0:	08005360 	.word	0x08005360
  ldr r2, =_sbss
 80016d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016d8:	20000110 	.word	0x20000110

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>

080016de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f95b 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f80e 	bl	8001710 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001700:	f7ff fdd0 	bl	80012a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001704:	79fb      	ldrb	r3, [r7, #7]

}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_InitTick+0x68>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d022      	beq.n	800176a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_InitTick+0x6c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_InitTick+0x68>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001730:	fbb1 f3f3 	udiv	r3, r1, r3
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f966 	bl	8001a0a <HAL_SYSTICK_Config>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10f      	bne.n	8001764 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	d809      	bhi.n	800175e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174a:	2200      	movs	r2, #0
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f000 f932 	bl	80019ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0x70>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e007      	b.n	800176e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e004      	b.n	800176e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x1c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4413      	add	r3, r2
 8001792:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_IncTick+0x1c>)
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	2000010c 	.word	0x2000010c
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000010c 	.word	0x2000010c

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d004      	beq.n	80017e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_Delay+0x40>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e4:	bf00      	nop
 80017e6:	f7ff ffdf 	bl	80017a8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d8f7      	bhi.n	80017e6 <HAL_Delay+0x26>
  {
  }
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000008 	.word	0x20000008

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff40 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff90 	bl	80018f8 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5f 	bl	80018a4 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff33 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa4 	bl	8001960 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a32:	e15a      	b.n	8001cea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 814c 	beq.w	8001ce4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 0201 	and.w	r2, r3, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80a6 	beq.w	8001ce4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_GPIO_Init+0x2e4>)
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9c:	4a5a      	ldr	r2, [pc, #360]	; (8001d08 <HAL_GPIO_Init+0x2e4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_GPIO_Init+0x2e4>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb0:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bda:	d01f      	beq.n	8001c1c <HAL_GPIO_Init+0x1f8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d019      	beq.n	8001c18 <HAL_GPIO_Init+0x1f4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <HAL_GPIO_Init+0x2f0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4a      	ldr	r2, [pc, #296]	; (8001d18 <HAL_GPIO_Init+0x2f4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1ec>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <HAL_GPIO_Init+0x2f8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1e8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x2fc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001c04:	2305      	movs	r3, #5
 8001c06:	e00a      	b.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c08:	2306      	movs	r3, #6
 8001c0a:	e008      	b.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e006      	b.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c10:	2303      	movs	r3, #3
 8001c12:	e004      	b.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	f002 0203 	and.w	r2, r2, #3
 8001c24:	0092      	lsls	r2, r2, #2
 8001c26:	4093      	lsls	r3, r2
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c2e:	4937      	ldr	r1, [pc, #220]	; (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c60:	4a30      	ldr	r2, [pc, #192]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f47f ae9d 	bne.w	8001a34 <HAL_GPIO_Init+0x10>
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48000800 	.word	0x48000800
 8001d18:	48000c00 	.word	0x48000c00
 8001d1c:	48001000 	.word	0x48001000
 8001d20:	48001400 	.word	0x48001400
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f806 	bl	8001d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d141      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dae:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d131      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dbc:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	4a46      	ldr	r2, [pc, #280]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd4:	4a41      	ldr	r2, [pc, #260]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2232      	movs	r2, #50	; 0x32
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a3f      	ldr	r2, [pc, #252]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df2:	e002      	b.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d102      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f2      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1a:	d158      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e057      	b.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e30:	e04d      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d141      	bne.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e46:	d131      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2232      	movs	r2, #50	; 0x32
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7e:	e002      	b.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d102      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f2      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d112      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e011      	b.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ebc:	e007      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e2fe      	b.n	8002518 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b97      	ldr	r3, [pc, #604]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b94      	ldr	r3, [pc, #592]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3e>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d002      	beq.n	8001f4c <HAL_RCC_OscConfig+0x44>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b8d      	ldr	r3, [pc, #564]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <HAL_RCC_OscConfig+0x108>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d157      	bne.n	8002010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e2d9      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x74>
 8001f6e:	4b85      	ldr	r3, [pc, #532]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a84      	ldr	r2, [pc, #528]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7b      	ldr	r2, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001fa0:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a74      	ldr	r2, [pc, #464]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fbf2 	bl	80017a8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fbee 	bl	80017a8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e29e      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fbde 	bl	80017a8 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fbda 	bl	80017a8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e28a      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d102      	bne.n	800203e <HAL_RCC_OscConfig+0x136>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d002      	beq.n	8002044 <HAL_RCC_OscConfig+0x13c>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11f      	bne.n	8002084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x154>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e25d      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	4946      	ldr	r1, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002070:	4b45      	ldr	r3, [pc, #276]	; (8002188 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fb4b 	bl	8001710 <HAL_InitTick>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d043      	beq.n	8002108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e249      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d023      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3c      	ldr	r2, [pc, #240]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff fb86 	bl	80017a8 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff fb82 	bl	80017a8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e232      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	492d      	ldr	r1, [pc, #180]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
 80020d2:	e01a      	b.n	800210a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb62 	bl	80017a8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e8:	f7ff fb5e 	bl	80017a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e20e      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1e0>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d041      	beq.n	800219a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01c      	beq.n	8002158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	4a17      	ldr	r2, [pc, #92]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff fb3b 	bl	80017a8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7ff fb37 	bl	80017a8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1e7      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ef      	beq.n	8002136 <HAL_RCC_OscConfig+0x22e>
 8002156:	e020      	b.n	800219a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fb1e 	bl	80017a8 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216e:	e00d      	b.n	800218c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fb1a 	bl	80017a8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d906      	bls.n	800218c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1ca      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ea      	bne.n	8002170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a6 	beq.w	80022f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ac:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x2b4>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x2b6>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021de:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fad7 	bl	80017a8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7ff fad3 	bl	80017a8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e183      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002210:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_RCC_OscConfig+0x32e>
 8002224:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002234:	e024      	b.n	8002280 <HAL_RCC_OscConfig+0x378>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d110      	bne.n	8002260 <HAL_RCC_OscConfig+0x358>
 800223e:	4b60      	ldr	r3, [pc, #384]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	4a5e      	ldr	r2, [pc, #376]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	4a5a      	ldr	r2, [pc, #360]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x378>
 8002260:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d016      	beq.n	80022b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7ff fa8e 	bl	80017a8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7ff fa8a 	bl	80017a8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	; 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e138      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a6:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ed      	beq.n	8002290 <HAL_RCC_OscConfig+0x388>
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7ff fa77 	bl	80017a8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff fa73 	bl	80017a8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e121      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ed      	bne.n	80022be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230e:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fa46 	bl	80017a8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002320:	f7ff fa42 	bl	80017a8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0f2      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x418>
 8002340:	e01b      	b.n	800237a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff fa29 	bl	80017a8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235a:	f7ff fa25 	bl	80017a8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0d5      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80c9 	beq.w	8002516 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b0c      	cmp	r3, #12
 800238e:	f000 8083 	beq.w	8002498 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d15e      	bne.n	8002458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff f9ff 	bl	80017a8 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	e00c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7ff f9fb 	bl	80017a8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d905      	bls.n	80023c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0ab      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c8:	4b55      	ldr	r3, [pc, #340]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ec      	bne.n	80023ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b52      	ldr	r3, [pc, #328]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b52      	ldr	r3, [pc, #328]	; (8002524 <HAL_RCC_OscConfig+0x61c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6a11      	ldr	r1, [r2, #32]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80023ee:	0212      	lsls	r2, r2, #8
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f6:	0852      	lsrs	r2, r2, #1
 80023f8:	3a01      	subs	r2, #1
 80023fa:	0552      	lsls	r2, r2, #21
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	0652      	lsls	r2, r2, #25
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800240e:	06d2      	lsls	r2, r2, #27
 8002410:	430a      	orrs	r2, r1
 8002412:	4943      	ldr	r1, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 8002414:	4313      	orrs	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a40      	ldr	r2, [pc, #256]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a3d      	ldr	r2, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff f9ba 	bl	80017a8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7ff f9b6 	bl	80017a8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e066      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x530>
 8002456:	e05e      	b.n	8002516 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a30      	ldr	r2, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff f9a0 	bl	80017a8 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff f99c 	bl	80017a8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04c      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4924      	ldr	r1, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_OscConfig+0x620>)
 8002492:	4013      	ands	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
 8002496:	e03e      	b.n	8002516 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e039      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_OscConfig+0x618>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d12c      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	3b01      	subs	r3, #1
 80024c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d123      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11b      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d113      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	019f800c 	.word	0x019f800c
 8002528:	feeefffc 	.word	0xfeeefffc

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e11e      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b91      	ldr	r3, [pc, #580]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b8e      	ldr	r3, [pc, #568]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	498c      	ldr	r1, [pc, #560]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b8a      	ldr	r3, [pc, #552]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e106      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d073      	beq.n	8002668 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d129      	bne.n	80025dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002588:	4b81      	ldr	r3, [pc, #516]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0f4      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002598:	f000 f99e 	bl	80028d8 <RCC_GetSysClockFreqFromPLLSource>
 800259c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a7c      	ldr	r2, [pc, #496]	; (8002794 <HAL_RCC_ClockConfig+0x268>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d93f      	bls.n	8002626 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025a6:	4b7a      	ldr	r3, [pc, #488]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d033      	beq.n	8002626 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d12f      	bne.n	8002626 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025c6:	4b72      	ldr	r3, [pc, #456]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ce:	4a70      	ldr	r2, [pc, #448]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e024      	b.n	8002626 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0c6      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0be      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002604:	f000 f8ce 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4a61      	ldr	r2, [pc, #388]	; (8002794 <HAL_RCC_ClockConfig+0x268>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d909      	bls.n	8002626 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002612:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261a:	4a5d      	ldr	r2, [pc, #372]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 800261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002620:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b5a      	ldr	r3, [pc, #360]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4957      	ldr	r1, [pc, #348]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7ff f8b6 	bl	80017a8 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7ff f8b2 	bl	80017a8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e095      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a42      	ldr	r2, [pc, #264]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800268a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002698:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026a0:	4a3b      	ldr	r2, [pc, #236]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
 80026ba:	e008      	b.n	80026ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d105      	bne.n	80026ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d21d      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 020f 	bic.w	r2, r3, #15
 80026e4:	4929      	ldr	r1, [pc, #164]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026ec:	f7ff f85c 	bl	80017a8 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7ff f858 	bl	80017a8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e03b      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1ed      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4917      	ldr	r1, [pc, #92]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490f      	ldr	r1, [pc, #60]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002756:	f000 f825 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_ClockConfig+0x264>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490c      	ldr	r1, [pc, #48]	; (8002798 <HAL_RCC_ClockConfig+0x26c>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x270>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_RCC_ClockConfig+0x274>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ffc8 	bl	8001710 <HAL_InitTick>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	04c4b400 	.word	0x04c4b400
 8002798:	08005310 	.word	0x08005310
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	e047      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e03e      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d136      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f8:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	4a16      	ldr	r2, [pc, #88]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002802:	68d2      	ldr	r2, [r2, #12]
 8002804:	0a12      	lsrs	r2, r2, #8
 8002806:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
      break;
 8002810:	e00c      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	0a12      	lsrs	r2, r2, #8
 8002820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
      break;
 800282a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0e5b      	lsrs	r3, r3, #25
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	e001      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800284c:	693b      	ldr	r3, [r7, #16]
}
 800284e:	4618      	mov	r0, r3
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	00f42400 	.word	0x00f42400
 8002864:	016e3600 	.word	0x016e3600

08002868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_RCC_GetHCLKFreq+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002884:	f7ff fff0 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4904      	ldr	r1, [pc, #16]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08005320 	.word	0x08005320

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028b0:	f7ff ffda 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0adb      	lsrs	r3, r3, #11
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4904      	ldr	r1, [pc, #16]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08005320 	.word	0x08005320

080028d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d10c      	bne.n	8002916 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	0a12      	lsrs	r2, r2, #8
 800290a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
    break;
 8002914:	e00c      	b.n	8002930 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	0a12      	lsrs	r2, r2, #8
 8002924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    break;
 800292e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0e5b      	lsrs	r3, r3, #25
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800294a:	687b      	ldr	r3, [r7, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000
 800295c:	016e3600 	.word	0x016e3600
 8002960:	00f42400 	.word	0x00f42400

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800296c:	2300      	movs	r3, #0
 800296e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002970:	2300      	movs	r3, #0
 8002972:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8098 	beq.w	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fef5 	bl	80017a8 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c0:	e009      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe fef1 	bl	80017a8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	74fb      	strb	r3, [r7, #19]
        break;
 80029d4:	e005      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d159      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01e      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d019      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe feb1 	bl	80017a8 <HAL_GetTick>
 8002a46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a48:	e00b      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe fead 	bl	80017a8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d902      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a60:	e006      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ec      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
 8002a92:	e005      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa0:	7c7b      	ldrb	r3, [r7, #17]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4ba7      	ldr	r3, [pc, #668]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4aa6      	ldr	r2, [pc, #664]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002abe:	4ba1      	ldr	r3, [pc, #644]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 0203 	bic.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	499d      	ldr	r1, [pc, #628]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae0:	4b98      	ldr	r3, [pc, #608]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 020c 	bic.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4995      	ldr	r1, [pc, #596]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b02:	4b90      	ldr	r3, [pc, #576]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	498c      	ldr	r1, [pc, #560]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b24:	4b87      	ldr	r3, [pc, #540]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	4984      	ldr	r1, [pc, #528]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b46:	4b7f      	ldr	r3, [pc, #508]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	497b      	ldr	r1, [pc, #492]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b68:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	4973      	ldr	r1, [pc, #460]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	496a      	ldr	r1, [pc, #424]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bac:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4962      	ldr	r1, [pc, #392]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bce:	4b5d      	ldr	r3, [pc, #372]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	4959      	ldr	r1, [pc, #356]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bf0:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4951      	ldr	r1, [pc, #324]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c12:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4948      	ldr	r1, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c30:	d105      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	493a      	ldr	r1, [pc, #232]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c68:	d105      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a35      	ldr	r2, [pc, #212]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c74:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	492c      	ldr	r1, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d105      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cac:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	491e      	ldr	r1, [pc, #120]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	4910      	ldr	r1, [pc, #64]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d10:	d105      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4902      	ldr	r1, [pc, #8]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	e001      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e049      	b.n	8002e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fb42 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fe68 	bl	8003af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e049      	b.n	8002f30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f841 	bl	8002f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 fe11 	bl	8003af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start_IT+0x28>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e03c      	b.n	8002fee <HAL_TIM_PWM_Start_IT+0xa2>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start_IT+0x42>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e02f      	b.n	8002fee <HAL_TIM_PWM_Start_IT+0xa2>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start_IT+0x5c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e022      	b.n	8002fee <HAL_TIM_PWM_Start_IT+0xa2>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d109      	bne.n	8002fc2 <HAL_TIM_PWM_Start_IT+0x76>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e015      	b.n	8002fee <HAL_TIM_PWM_Start_IT+0xa2>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start_IT+0x90>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e008      	b.n	8002fee <HAL_TIM_PWM_Start_IT+0xa2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0ec      	b.n	80031d0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start_IT+0xba>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003004:	e023      	b.n	800304e <HAL_TIM_PWM_Start_IT+0x102>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start_IT+0xca>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	e01b      	b.n	800304e <HAL_TIM_PWM_Start_IT+0x102>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start_IT+0xda>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003024:	e013      	b.n	800304e <HAL_TIM_PWM_Start_IT+0x102>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start_IT+0xea>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003034:	e00b      	b.n	800304e <HAL_TIM_PWM_Start_IT+0x102>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b10      	cmp	r3, #16
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start_IT+0xfa>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003044:	e003      	b.n	800304e <HAL_TIM_PWM_Start_IT+0x102>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d841      	bhi.n	80030d8 <HAL_TIM_PWM_Start_IT+0x18c>
 8003054:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_TIM_PWM_Start_IT+0x110>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	08003091 	.word	0x08003091
 8003060:	080030d9 	.word	0x080030d9
 8003064:	080030d9 	.word	0x080030d9
 8003068:	080030d9 	.word	0x080030d9
 800306c:	080030a3 	.word	0x080030a3
 8003070:	080030d9 	.word	0x080030d9
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030b5 	.word	0x080030b5
 8003080:	080030d9 	.word	0x080030d9
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030d9 	.word	0x080030d9
 800308c:	080030c7 	.word	0x080030c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0202 	orr.w	r2, r2, #2
 800309e:	60da      	str	r2, [r3, #12]
      break;
 80030a0:	e01d      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0204 	orr.w	r2, r2, #4
 80030b0:	60da      	str	r2, [r3, #12]
      break;
 80030b2:	e014      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0208 	orr.w	r2, r2, #8
 80030c2:	60da      	str	r2, [r3, #12]
      break;
 80030c4:	e00b      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0210 	orr.w	r2, r2, #16
 80030d4:	60da      	str	r2, [r3, #12]
      break;
 80030d6:	e002      	b.n	80030de <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d174      	bne.n	80031ce <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f96f 	bl	80043d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_TIM_PWM_Start_IT+0x28c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d018      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0x1e2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a36      	ldr	r2, [pc, #216]	; (80031dc <HAL_TIM_PWM_Start_IT+0x290>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a35      	ldr	r2, [pc, #212]	; (80031e0 <HAL_TIM_PWM_Start_IT+0x294>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00e      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a33      	ldr	r2, [pc, #204]	; (80031e4 <HAL_TIM_PWM_Start_IT+0x298>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0x1e2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0x1e2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a30      	ldr	r2, [pc, #192]	; (80031ec <HAL_TIM_PWM_Start_IT+0x2a0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_Start_IT+0x1e6>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_TIM_PWM_Start_IT+0x1e8>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_TIM_PWM_Start_IT+0x242>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d018      	beq.n	800318e <HAL_TIM_PWM_Start_IT+0x242>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_TIM_PWM_Start_IT+0x242>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_TIM_PWM_Start_IT+0x242>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_TIM_PWM_Start_IT+0x290>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_TIM_PWM_Start_IT+0x242>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_TIM_PWM_Start_IT+0x294>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_TIM_PWM_Start_IT+0x242>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_TIM_PWM_Start_IT+0x2a0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d115      	bne.n	80031ba <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8003196:	4013      	ands	r3, r2
 8003198:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d015      	beq.n	80031cc <HAL_TIM_PWM_Start_IT+0x280>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a6:	d011      	beq.n	80031cc <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	e008      	b.n	80031cc <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e000      	b.n	80031ce <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40013400 	.word	0x40013400
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800
 80031ec:	40015000 	.word	0x40015000
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	00010007 	.word	0x00010007

080031fc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d841      	bhi.n	8003294 <HAL_TIM_PWM_Stop_IT+0x98>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800324d 	.word	0x0800324d
 800321c:	08003295 	.word	0x08003295
 8003220:	08003295 	.word	0x08003295
 8003224:	08003295 	.word	0x08003295
 8003228:	0800325f 	.word	0x0800325f
 800322c:	08003295 	.word	0x08003295
 8003230:	08003295 	.word	0x08003295
 8003234:	08003295 	.word	0x08003295
 8003238:	08003271 	.word	0x08003271
 800323c:	08003295 	.word	0x08003295
 8003240:	08003295 	.word	0x08003295
 8003244:	08003295 	.word	0x08003295
 8003248:	08003283 	.word	0x08003283
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0202 	bic.w	r2, r2, #2
 800325a:	60da      	str	r2, [r3, #12]
      break;
 800325c:	e01d      	b.n	800329a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0204 	bic.w	r2, r2, #4
 800326c:	60da      	str	r2, [r3, #12]
      break;
 800326e:	e014      	b.n	800329a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0208 	bic.w	r2, r2, #8
 800327e:	60da      	str	r2, [r3, #12]
      break;
 8003280:	e00b      	b.n	800329a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0210 	bic.w	r2, r2, #16
 8003290:	60da      	str	r2, [r3, #12]
      break;
 8003292:	e002      	b.n	800329a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	bf00      	nop
  }

  if (status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8086 	bne.w	80033ae <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 f890 	bl	80043d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a40      	ldr	r2, [pc, #256]	; (80033b8 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_TIM_PWM_Stop_IT+0xf0>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_TIM_PWM_Stop_IT+0xf0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3d      	ldr	r2, [pc, #244]	; (80033c0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_TIM_PWM_Stop_IT+0xf0>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_TIM_PWM_Stop_IT+0xf0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3a      	ldr	r2, [pc, #232]	; (80033c8 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_TIM_PWM_Stop_IT+0xf0>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a39      	ldr	r2, [pc, #228]	; (80033cc <HAL_TIM_PWM_Stop_IT+0x1d0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_TIM_PWM_Stop_IT+0xf4>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_TIM_PWM_Stop_IT+0xf6>
 80032f0:	2300      	movs	r3, #0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1a      	ldr	r2, [r3, #32]
 80032fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_TIM_PWM_Stop_IT+0x12a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	f244 4344 	movw	r3, #17476	; 0x4444
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_TIM_PWM_Stop_IT+0x12a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a1a      	ldr	r2, [r3, #32]
 800332c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <HAL_TIM_PWM_Stop_IT+0x15a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	f244 4344 	movw	r3, #17476	; 0x4444
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_TIM_PWM_Stop_IT+0x15a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_TIM_PWM_Stop_IT+0x16a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003364:	e023      	b.n	80033ae <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Stop_IT+0x17a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	e01b      	b.n	80033ae <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Stop_IT+0x18a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003384:	e013      	b.n	80033ae <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Stop_IT+0x19a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003394:	e00b      	b.n	80033ae <HAL_TIM_PWM_Stop_IT+0x1b2>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Stop_IT+0x1aa>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a4:	e003      	b.n	80033ae <HAL_TIM_PWM_Stop_IT+0x1b2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40013400 	.word	0x40013400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40014400 	.word	0x40014400
 80033c8:	40014800 	.word	0x40014800
 80033cc:	40015000 	.word	0x40015000

080033d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0202 	mvn.w	r2, #2
 8003404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fb54 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fb46 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd feb9 	bl	80011a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0204 	mvn.w	r2, #4
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fb2e 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fb20 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd fe93 	bl	80011a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0208 	mvn.w	r2, #8
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2204      	movs	r2, #4
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fb08 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fafa 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fd fe6d 	bl	80011a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fae2 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fad4 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fd fe47 	bl	80011a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0201 	mvn.w	r2, #1
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fab2 	bl	8003aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fff1 	bl	800454c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00c      	beq.n	800358e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 ffe9 	bl	8004560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00c      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa95 	bl	8003adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0220 	mvn.w	r2, #32
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 ffb1 	bl	8004538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 ffbd 	bl	8004574 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 ffb5 	bl	8004588 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 ffad 	bl	800459c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 ffa5 	bl	80045b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800368a:	2302      	movs	r3, #2
 800368c:	e0ff      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b14      	cmp	r3, #20
 800369a:	f200 80f0 	bhi.w	800387e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	0800387f 	.word	0x0800387f
 80036ac:	0800387f 	.word	0x0800387f
 80036b0:	0800387f 	.word	0x0800387f
 80036b4:	08003739 	.word	0x08003739
 80036b8:	0800387f 	.word	0x0800387f
 80036bc:	0800387f 	.word	0x0800387f
 80036c0:	0800387f 	.word	0x0800387f
 80036c4:	0800377b 	.word	0x0800377b
 80036c8:	0800387f 	.word	0x0800387f
 80036cc:	0800387f 	.word	0x0800387f
 80036d0:	0800387f 	.word	0x0800387f
 80036d4:	080037bb 	.word	0x080037bb
 80036d8:	0800387f 	.word	0x0800387f
 80036dc:	0800387f 	.word	0x0800387f
 80036e0:	0800387f 	.word	0x0800387f
 80036e4:	080037fd 	.word	0x080037fd
 80036e8:	0800387f 	.word	0x0800387f
 80036ec:	0800387f 	.word	0x0800387f
 80036f0:	0800387f 	.word	0x0800387f
 80036f4:	0800383d 	.word	0x0800383d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 faa0 	bl	8003c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6999      	ldr	r1, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	619a      	str	r2, [r3, #24]
      break;
 8003736:	e0a5      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fb1a 	bl	8003d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	619a      	str	r2, [r3, #24]
      break;
 8003778:	e084      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fb8d 	bl	8003ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0208 	orr.w	r2, r2, #8
 8003794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0204 	bic.w	r2, r2, #4
 80037a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	61da      	str	r2, [r3, #28]
      break;
 80037b8:	e064      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fbff 	bl	8003fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	021a      	lsls	r2, r3, #8
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
      break;
 80037fa:	e043      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fc72 	bl	80040ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800383a:	e023      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fcbc 	bl	80041c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003856:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800387c:	e002      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
      break;
 8003882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop

08003898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_ConfigClockSource+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0e6      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x1ea>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80038d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a67      	ldr	r2, [pc, #412]	; (8003a8c <HAL_TIM_ConfigClockSource+0x1f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f000 80b1 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 80038f4:	4a65      	ldr	r2, [pc, #404]	; (8003a8c <HAL_TIM_ConfigClockSource+0x1f4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	f200 80b6 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 80038fc:	4a64      	ldr	r2, [pc, #400]	; (8003a90 <HAL_TIM_ConfigClockSource+0x1f8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f000 80a9 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 8003904:	4a62      	ldr	r2, [pc, #392]	; (8003a90 <HAL_TIM_ConfigClockSource+0x1f8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	f200 80ae 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 800390c:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <HAL_TIM_ConfigClockSource+0x1fc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	f000 80a1 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 8003914:	4a5f      	ldr	r2, [pc, #380]	; (8003a94 <HAL_TIM_ConfigClockSource+0x1fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	f200 80a6 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_TIM_ConfigClockSource+0x200>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f000 8099 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 8003924:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_TIM_ConfigClockSource+0x200>)
 8003926:	4293      	cmp	r3, r2
 8003928:	f200 809e 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 800392c:	4a5b      	ldr	r2, [pc, #364]	; (8003a9c <HAL_TIM_ConfigClockSource+0x204>)
 800392e:	4293      	cmp	r3, r2
 8003930:	f000 8091 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 8003934:	4a59      	ldr	r2, [pc, #356]	; (8003a9c <HAL_TIM_ConfigClockSource+0x204>)
 8003936:	4293      	cmp	r3, r2
 8003938:	f200 8096 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 800393c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003940:	f000 8089 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 8003944:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003948:	f200 808e 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 800394c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003950:	d03e      	beq.n	80039d0 <HAL_TIM_ConfigClockSource+0x138>
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	f200 8087 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	f000 8086 	beq.w	8003a6e <HAL_TIM_ConfigClockSource+0x1d6>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	d87f      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d01a      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x10a>
 800396c:	2b70      	cmp	r3, #112	; 0x70
 800396e:	d87b      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d050      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x17e>
 8003974:	2b60      	cmp	r3, #96	; 0x60
 8003976:	d877      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d03c      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x15e>
 800397c:	2b50      	cmp	r3, #80	; 0x50
 800397e:	d873      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d058      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x19e>
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d86f      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d064      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d86b      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d060      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d867      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05c      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 800399c:	2b10      	cmp	r3, #16
 800399e:	d05a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x1be>
 80039a0:	e062      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f000 fced 	bl	8004390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	609a      	str	r2, [r3, #8]
      break;
 80039ce:	e04f      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6899      	ldr	r1, [r3, #8]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f000 fcd6 	bl	8004390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f2:	609a      	str	r2, [r3, #8]
      break;
 80039f4:	e03c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f000 fc48 	bl	8004298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2150      	movs	r1, #80	; 0x50
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fca1 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8003a14:	e02c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 fc67 	bl	80042f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2160      	movs	r1, #96	; 0x60
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fc91 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8003a34:	e01c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 fc28 	bl	8004298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fc81 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e00c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f000 fc78 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8003a66:	e003      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e000      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8003a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	00100070 	.word	0x00100070
 8003a90:	00100050 	.word	0x00100050
 8003a94:	00100040 	.word	0x00100040
 8003a98:	00100030 	.word	0x00100030
 8003a9c:	00100020 	.word	0x00100020

08003aa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a48      	ldr	r2, [pc, #288]	; (8003c24 <TIM_Base_SetConfig+0x134>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0e:	d00f      	beq.n	8003b30 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a45      	ldr	r2, [pc, #276]	; (8003c28 <TIM_Base_SetConfig+0x138>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a44      	ldr	r2, [pc, #272]	; (8003c2c <TIM_Base_SetConfig+0x13c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a43      	ldr	r2, [pc, #268]	; (8003c30 <TIM_Base_SetConfig+0x140>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a42      	ldr	r2, [pc, #264]	; (8003c34 <TIM_Base_SetConfig+0x144>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d108      	bne.n	8003b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a37      	ldr	r2, [pc, #220]	; (8003c24 <TIM_Base_SetConfig+0x134>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01f      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d01b      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <TIM_Base_SetConfig+0x138>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d017      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <TIM_Base_SetConfig+0x13c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a32      	ldr	r2, [pc, #200]	; (8003c30 <TIM_Base_SetConfig+0x140>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <TIM_Base_SetConfig+0x148>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a31      	ldr	r2, [pc, #196]	; (8003c3c <TIM_Base_SetConfig+0x14c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <TIM_Base_SetConfig+0x150>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_Base_SetConfig+0x9a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <TIM_Base_SetConfig+0x144>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <TIM_Base_SetConfig+0x134>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <TIM_Base_SetConfig+0x100>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <TIM_Base_SetConfig+0x140>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x100>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <TIM_Base_SetConfig+0x148>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x100>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_Base_SetConfig+0x14c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x100>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TIM_Base_SetConfig+0x150>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x100>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <TIM_Base_SetConfig+0x144>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f023 0201 	bic.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]
  }
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40015000 	.word	0x40015000
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800

08003c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 0201 	bic.w	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 0302 	bic.w	r3, r3, #2
 8003c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a30      	ldr	r2, [pc, #192]	; (8003d60 <TIM_OC1_SetConfig+0x11c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <TIM_OC1_SetConfig+0x88>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a2f      	ldr	r2, [pc, #188]	; (8003d64 <TIM_OC1_SetConfig+0x120>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <TIM_OC1_SetConfig+0x88>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <TIM_OC1_SetConfig+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_OC1_SetConfig+0x88>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <TIM_OC1_SetConfig+0x128>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_OC1_SetConfig+0x88>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <TIM_OC1_SetConfig+0x12c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC1_SetConfig+0x88>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <TIM_OC1_SetConfig+0x130>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10c      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0308 	bic.w	r3, r3, #8
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <TIM_OC1_SetConfig+0x11c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <TIM_OC1_SetConfig+0xd2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <TIM_OC1_SetConfig+0x120>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00f      	beq.n	8003d16 <TIM_OC1_SetConfig+0xd2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <TIM_OC1_SetConfig+0x124>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <TIM_OC1_SetConfig+0xd2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <TIM_OC1_SetConfig+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_OC1_SetConfig+0xd2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <TIM_OC1_SetConfig+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC1_SetConfig+0xd2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <TIM_OC1_SetConfig+0x130>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d111      	bne.n	8003d3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	40014800 	.word	0x40014800
 8003d74:	40015000 	.word	0x40015000

08003d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f023 0210 	bic.w	r2, r3, #16
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0320 	bic.w	r3, r3, #32
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_OC2_SetConfig+0x110>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC2_SetConfig+0x74>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_OC2_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC2_SetConfig+0x74>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <TIM_OC2_SetConfig+0x118>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <TIM_OC2_SetConfig+0x110>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <TIM_OC2_SetConfig+0xc0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <TIM_OC2_SetConfig+0x114>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00f      	beq.n	8003e38 <TIM_OC2_SetConfig+0xc0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <TIM_OC2_SetConfig+0x11c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_OC2_SetConfig+0xc0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC2_SetConfig+0x120>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_OC2_SetConfig+0xc0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC2_SetConfig+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC2_SetConfig+0xc0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <TIM_OC2_SetConfig+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d113      	bne.n	8003e60 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40015000 	.word	0x40015000
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <TIM_OC3_SetConfig+0x10c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_OC3_SetConfig+0x72>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <TIM_OC3_SetConfig+0x110>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_OC3_SetConfig+0x72>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	; (8003fb4 <TIM_OC3_SetConfig+0x114>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d10d      	bne.n	8003f2e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <TIM_OC3_SetConfig+0x10c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <TIM_OC3_SetConfig+0xbe>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <TIM_OC3_SetConfig+0x110>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <TIM_OC3_SetConfig+0xbe>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <TIM_OC3_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_OC3_SetConfig+0xbe>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <TIM_OC3_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_OC3_SetConfig+0xbe>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <TIM_OC3_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_OC3_SetConfig+0xbe>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <TIM_OC3_SetConfig+0x114>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d113      	bne.n	8003f86 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40013400 	.word	0x40013400
 8003fb4:	40015000 	.word	0x40015000
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800

08003fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	031b      	lsls	r3, r3, #12
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <TIM_OC4_SetConfig+0x110>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_OC4_SetConfig+0x74>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <TIM_OC4_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC4_SetConfig+0x74>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <TIM_OC4_SetConfig+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10d      	bne.n	8004054 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	031b      	lsls	r3, r3, #12
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <TIM_OC4_SetConfig+0x110>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <TIM_OC4_SetConfig+0xc0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <TIM_OC4_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00f      	beq.n	8004084 <TIM_OC4_SetConfig+0xc0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <TIM_OC4_SetConfig+0x11c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00b      	beq.n	8004084 <TIM_OC4_SetConfig+0xc0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <TIM_OC4_SetConfig+0x120>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d007      	beq.n	8004084 <TIM_OC4_SetConfig+0xc0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <TIM_OC4_SetConfig+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC4_SetConfig+0xc0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <TIM_OC4_SetConfig+0x118>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004092:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40015000 	.word	0x40015000
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <TIM_OC5_SetConfig+0xbc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <TIM_OC5_SetConfig+0x82>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <TIM_OC5_SetConfig+0xc0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_OC5_SetConfig+0x82>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <TIM_OC5_SetConfig+0xc4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_OC5_SetConfig+0x82>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <TIM_OC5_SetConfig+0xc8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_OC5_SetConfig+0x82>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC5_SetConfig+0xcc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_OC5_SetConfig+0x82>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <TIM_OC5_SetConfig+0xd0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d109      	bne.n	8004182 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800
 80041bc:	40015000 	.word	0x40015000

080041c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	051b      	lsls	r3, r3, #20
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <TIM_OC6_SetConfig+0xc0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_OC6_SetConfig+0x84>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <TIM_OC6_SetConfig+0xc4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00f      	beq.n	8004244 <TIM_OC6_SetConfig+0x84>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <TIM_OC6_SetConfig+0xc8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_OC6_SetConfig+0x84>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <TIM_OC6_SetConfig+0xcc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_OC6_SetConfig+0x84>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <TIM_OC6_SetConfig+0xd0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC6_SetConfig+0x84>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <TIM_OC6_SetConfig+0xd4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d109      	bne.n	8004258 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800
 8004294:	40015000 	.word	0x40015000

08004298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0201 	bic.w	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 030a 	bic.w	r3, r3, #10
 80042d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b087      	sub	sp, #28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f023 0210 	bic.w	r2, r3, #16
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	031b      	lsls	r3, r3, #12
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004332:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	f043 0307 	orr.w	r3, r3, #7
 800437c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	021a      	lsls	r2, r3, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2201      	movs	r2, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e06f      	b.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a31      	ldr	r2, [pc, #196]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2e      	ldr	r2, [pc, #184]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004478:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d01d      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b4:	d018      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a11      	ldr	r2, [pc, #68]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10c      	bne.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40013400 	.word	0x40013400
 8004528:	40015000 	.word	0x40015000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40014000 	.word	0x40014000

08004538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e042      	b.n	800465c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc fff7 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2224      	movs	r2, #36	; 0x24
 80045f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fb24 	bl	8004c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f825 	bl	8004664 <UART_SetConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e01b      	b.n	800465c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fba3 	bl	8004da0 <UART_CheckIdleState>
 800465a:	4603      	mov	r3, r0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b08c      	sub	sp, #48	; 0x30
 800466a:	af00      	add	r7, sp, #0
 800466c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	431a      	orrs	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4313      	orrs	r3, r2
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4baa      	ldr	r3, [pc, #680]	; (800493c <UART_SetConfig+0x2d8>)
 8004694:	4013      	ands	r3, r2
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469c:	430b      	orrs	r3, r1
 800469e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a9f      	ldr	r2, [pc, #636]	; (8004940 <UART_SetConfig+0x2dc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046cc:	4313      	orrs	r3, r2
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	f023 010f 	bic.w	r1, r3, #15
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a90      	ldr	r2, [pc, #576]	; (8004944 <UART_SetConfig+0x2e0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d125      	bne.n	8004754 <UART_SetConfig+0xf0>
 8004708:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <UART_SetConfig+0x2e4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d81a      	bhi.n	800474c <UART_SetConfig+0xe8>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0xb8>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	0800472d 	.word	0x0800472d
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004735 	.word	0x08004735
 8004728:	08004745 	.word	0x08004745
 800472c:	2301      	movs	r3, #1
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004732:	e116      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004734:	2302      	movs	r3, #2
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473a:	e112      	b.n	8004962 <UART_SetConfig+0x2fe>
 800473c:	2304      	movs	r3, #4
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e10e      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004744:	2308      	movs	r3, #8
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e10a      	b.n	8004962 <UART_SetConfig+0x2fe>
 800474c:	2310      	movs	r3, #16
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e106      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a7c      	ldr	r2, [pc, #496]	; (800494c <UART_SetConfig+0x2e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d138      	bne.n	80047d0 <UART_SetConfig+0x16c>
 800475e:	4b7a      	ldr	r3, [pc, #488]	; (8004948 <UART_SetConfig+0x2e4>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d82d      	bhi.n	80047c8 <UART_SetConfig+0x164>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x110>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047c9 	.word	0x080047c9
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ae:	e0d8      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b6:	e0d4      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047be:	e0d0      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c6:	e0cc      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ce:	e0c8      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5e      	ldr	r2, [pc, #376]	; (8004950 <UART_SetConfig+0x2ec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d125      	bne.n	8004826 <UART_SetConfig+0x1c2>
 80047da:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <UART_SetConfig+0x2e4>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047e4:	2b30      	cmp	r3, #48	; 0x30
 80047e6:	d016      	beq.n	8004816 <UART_SetConfig+0x1b2>
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	d818      	bhi.n	800481e <UART_SetConfig+0x1ba>
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d00a      	beq.n	8004806 <UART_SetConfig+0x1a2>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d814      	bhi.n	800481e <UART_SetConfig+0x1ba>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <UART_SetConfig+0x19a>
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d008      	beq.n	800480e <UART_SetConfig+0x1aa>
 80047fc:	e00f      	b.n	800481e <UART_SetConfig+0x1ba>
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004804:	e0ad      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004806:	2302      	movs	r3, #2
 8004808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480c:	e0a9      	b.n	8004962 <UART_SetConfig+0x2fe>
 800480e:	2304      	movs	r3, #4
 8004810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004814:	e0a5      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004816:	2308      	movs	r3, #8
 8004818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481c:	e0a1      	b.n	8004962 <UART_SetConfig+0x2fe>
 800481e:	2310      	movs	r3, #16
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004824:	e09d      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <UART_SetConfig+0x2f0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d125      	bne.n	800487c <UART_SetConfig+0x218>
 8004830:	4b45      	ldr	r3, [pc, #276]	; (8004948 <UART_SetConfig+0x2e4>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800483a:	2bc0      	cmp	r3, #192	; 0xc0
 800483c:	d016      	beq.n	800486c <UART_SetConfig+0x208>
 800483e:	2bc0      	cmp	r3, #192	; 0xc0
 8004840:	d818      	bhi.n	8004874 <UART_SetConfig+0x210>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d00a      	beq.n	800485c <UART_SetConfig+0x1f8>
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d814      	bhi.n	8004874 <UART_SetConfig+0x210>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <UART_SetConfig+0x1f0>
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d008      	beq.n	8004864 <UART_SetConfig+0x200>
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x210>
 8004854:	2300      	movs	r3, #0
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485a:	e082      	b.n	8004962 <UART_SetConfig+0x2fe>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004862:	e07e      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486a:	e07a      	b.n	8004962 <UART_SetConfig+0x2fe>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004872:	e076      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e072      	b.n	8004962 <UART_SetConfig+0x2fe>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a35      	ldr	r2, [pc, #212]	; (8004958 <UART_SetConfig+0x2f4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d12a      	bne.n	80048dc <UART_SetConfig+0x278>
 8004886:	4b30      	ldr	r3, [pc, #192]	; (8004948 <UART_SetConfig+0x2e4>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004894:	d01a      	beq.n	80048cc <UART_SetConfig+0x268>
 8004896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489a:	d81b      	bhi.n	80048d4 <UART_SetConfig+0x270>
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d00c      	beq.n	80048bc <UART_SetConfig+0x258>
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a6:	d815      	bhi.n	80048d4 <UART_SetConfig+0x270>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x250>
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b0:	d008      	beq.n	80048c4 <UART_SetConfig+0x260>
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x270>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ba:	e052      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c2:	e04e      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ca:	e04a      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d2:	e046      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e042      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <UART_SetConfig+0x2dc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d13a      	bne.n	800495c <UART_SetConfig+0x2f8>
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <UART_SetConfig+0x2e4>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f4:	d01a      	beq.n	800492c <UART_SetConfig+0x2c8>
 80048f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fa:	d81b      	bhi.n	8004934 <UART_SetConfig+0x2d0>
 80048fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004900:	d00c      	beq.n	800491c <UART_SetConfig+0x2b8>
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d815      	bhi.n	8004934 <UART_SetConfig+0x2d0>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <UART_SetConfig+0x2b0>
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004910:	d008      	beq.n	8004924 <UART_SetConfig+0x2c0>
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x2d0>
 8004914:	2300      	movs	r3, #0
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491a:	e022      	b.n	8004962 <UART_SetConfig+0x2fe>
 800491c:	2302      	movs	r3, #2
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004922:	e01e      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004924:	2304      	movs	r3, #4
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492a:	e01a      	b.n	8004962 <UART_SetConfig+0x2fe>
 800492c:	2308      	movs	r3, #8
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004932:	e016      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004934:	2310      	movs	r3, #16
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493a:	e012      	b.n	8004962 <UART_SetConfig+0x2fe>
 800493c:	cfff69f3 	.word	0xcfff69f3
 8004940:	40008000 	.word	0x40008000
 8004944:	40013800 	.word	0x40013800
 8004948:	40021000 	.word	0x40021000
 800494c:	40004400 	.word	0x40004400
 8004950:	40004800 	.word	0x40004800
 8004954:	40004c00 	.word	0x40004c00
 8004958:	40005000 	.word	0x40005000
 800495c:	2310      	movs	r3, #16
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4aae      	ldr	r2, [pc, #696]	; (8004c20 <UART_SetConfig+0x5bc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	f040 8097 	bne.w	8004a9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800496e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004972:	2b08      	cmp	r3, #8
 8004974:	d823      	bhi.n	80049be <UART_SetConfig+0x35a>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x318>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049af 	.word	0x080049af
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049bf 	.word	0x080049bf
 800499c:	080049b7 	.word	0x080049b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fd ff6e 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b9e      	ldr	r3, [pc, #632]	; (8004c24 <UART_SetConfig+0x5c0>)
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049ac:	e00d      	b.n	80049ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fd fef9 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8130 	beq.w	8004c32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	4a94      	ldr	r2, [pc, #592]	; (8004c28 <UART_SetConfig+0x5c4>)
 80049d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049dc:	461a      	mov	r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d305      	bcc.n	8004a02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d903      	bls.n	8004a0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a08:	e113      	b.n	8004c32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	60fa      	str	r2, [r7, #12]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	4a84      	ldr	r2, [pc, #528]	; (8004c28 <UART_SetConfig+0x5c4>)
 8004a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2200      	movs	r2, #0
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a2c:	f7fb ffe2 	bl	80009f4 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	020b      	lsls	r3, r1, #8
 8004a42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a46:	0202      	lsls	r2, r0, #8
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	6849      	ldr	r1, [r1, #4]
 8004a4c:	0849      	lsrs	r1, r1, #1
 8004a4e:	2000      	movs	r0, #0
 8004a50:	460c      	mov	r4, r1
 8004a52:	4605      	mov	r5, r0
 8004a54:	eb12 0804 	adds.w	r8, r2, r4
 8004a58:	eb43 0905 	adc.w	r9, r3, r5
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	469a      	mov	sl, r3
 8004a64:	4693      	mov	fp, r2
 8004a66:	4652      	mov	r2, sl
 8004a68:	465b      	mov	r3, fp
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	f7fb ffc1 	bl	80009f4 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4613      	mov	r3, r2
 8004a78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a80:	d308      	bcc.n	8004a94 <UART_SetConfig+0x430>
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a88:	d204      	bcs.n	8004a94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	e0ce      	b.n	8004c32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a9a:	e0ca      	b.n	8004c32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa4:	d166      	bne.n	8004b74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d827      	bhi.n	8004afe <UART_SetConfig+0x49a>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x450>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004ae1 	.word	0x08004ae1
 8004abc:	08004ae9 	.word	0x08004ae9
 8004ac0:	08004aff 	.word	0x08004aff
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004aff 	.word	0x08004aff
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004af7 	.word	0x08004af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fd fed2 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8004adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ade:	e014      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae0:	f7fd fee4 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae6:	e010      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b4e      	ldr	r3, [pc, #312]	; (8004c24 <UART_SetConfig+0x5c0>)
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fd fe59 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8004af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004afc:	e005      	b.n	8004b0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8090 	beq.w	8004c32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	4a44      	ldr	r2, [pc, #272]	; (8004c28 <UART_SetConfig+0x5c4>)
 8004b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b24:	005a      	lsls	r2, r3, #1
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	441a      	add	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d916      	bls.n	8004b6c <UART_SetConfig+0x508>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d212      	bcs.n	8004b6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f023 030f 	bic.w	r3, r3, #15
 8004b4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	8bfb      	ldrh	r3, [r7, #30]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	8bfa      	ldrh	r2, [r7, #30]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e062      	b.n	8004c32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b72:	e05e      	b.n	8004c32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d828      	bhi.n	8004bce <UART_SetConfig+0x56a>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x520>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004bcf 	.word	0x08004bcf
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004bcf 	.word	0x08004bcf
 8004ba0:	08004bcf 	.word	0x08004bcf
 8004ba4:	08004bc7 	.word	0x08004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fd fe6a 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bae:	e014      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7fd fe7c 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb6:	e010      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <UART_SetConfig+0x5c0>)
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bbc:	e00d      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bbe:	f7fd fdf1 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc4:	e009      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bcc:	e005      	b.n	8004bda <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d028      	beq.n	8004c32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <UART_SetConfig+0x5c4>)
 8004be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d910      	bls.n	8004c2c <UART_SetConfig+0x5c8>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d20c      	bcs.n	8004c2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x5ce>
 8004c1e:	bf00      	nop
 8004c20:	40008000 	.word	0x40008000
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	08005328 	.word	0x08005328
      }
      else
      {
        ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3730      	adds	r7, #48	; 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d10a      	bne.n	8004d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b098      	sub	sp, #96	; 0x60
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db0:	f7fc fcfa 	bl	80017a8 <HAL_GetTick>
 8004db4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d12f      	bne.n	8004e24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f88e 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d022      	beq.n	8004e24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df2:	653b      	str	r3, [r7, #80]	; 0x50
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e063      	b.n	8004eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d149      	bne.n	8004ec6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f857 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03c      	beq.n	8004ec6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e6      	bne.n	8004e4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e9e:	61fa      	str	r2, [r7, #28]
 8004ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e012      	b.n	8004eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3758      	adds	r7, #88	; 0x58
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f04:	e04f      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d04b      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fc fc4b 	bl	80017a8 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e04e      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d037      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d034      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d031      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d110      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f838 	bl	8004fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2208      	movs	r2, #8
 8004f62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e029      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f80:	d111      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f81e 	bl	8004fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e00f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d0a0      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b095      	sub	sp, #84	; 0x54
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	64bb      	str	r3, [r7, #72]	; 0x48
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3308      	adds	r3, #8
 800502a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800502c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e3      	bne.n	8005008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d118      	bne.n	800507a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	60bb      	str	r3, [r7, #8]
   return(result);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6979      	ldr	r1, [r7, #20]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	613b      	str	r3, [r7, #16]
   return(result);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800508e:	bf00      	nop
 8005090:	3754      	adds	r7, #84	; 0x54
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e027      	b.n	8005100 <HAL_UARTEx_DisableFifoMode+0x66>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e02d      	b.n	8005180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	; 0x24
 8005130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f84f 	bl	8005204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e02d      	b.n	80051fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	; 0x24
 80051ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f811 	bl	8005204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005210:	2b00      	cmp	r3, #0
 8005212:	d108      	bne.n	8005226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005224:	e031      	b.n	800528a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005226:	2308      	movs	r3, #8
 8005228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800522a:	2308      	movs	r3, #8
 800522c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	0e5b      	lsrs	r3, r3, #25
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	0f5b      	lsrs	r3, r3, #29
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	7b3a      	ldrb	r2, [r7, #12]
 8005252:	4911      	ldr	r1, [pc, #68]	; (8005298 <UARTEx_SetNbDataToProcess+0x94>)
 8005254:	5c8a      	ldrb	r2, [r1, r2]
 8005256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800525a:	7b3a      	ldrb	r2, [r7, #12]
 800525c:	490f      	ldr	r1, [pc, #60]	; (800529c <UARTEx_SetNbDataToProcess+0x98>)
 800525e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005260:	fb93 f3f2 	sdiv	r3, r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	7b7a      	ldrb	r2, [r7, #13]
 8005270:	4909      	ldr	r1, [pc, #36]	; (8005298 <UARTEx_SetNbDataToProcess+0x94>)
 8005272:	5c8a      	ldrb	r2, [r1, r2]
 8005274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005278:	7b7a      	ldrb	r2, [r7, #13]
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <UARTEx_SetNbDataToProcess+0x98>)
 800527c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800527e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	08005340 	.word	0x08005340
 800529c:	08005348 	.word	0x08005348

080052a0 <__libc_init_array>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4d0d      	ldr	r5, [pc, #52]	; (80052d8 <__libc_init_array+0x38>)
 80052a4:	4c0d      	ldr	r4, [pc, #52]	; (80052dc <__libc_init_array+0x3c>)
 80052a6:	1b64      	subs	r4, r4, r5
 80052a8:	10a4      	asrs	r4, r4, #2
 80052aa:	2600      	movs	r6, #0
 80052ac:	42a6      	cmp	r6, r4
 80052ae:	d109      	bne.n	80052c4 <__libc_init_array+0x24>
 80052b0:	4d0b      	ldr	r5, [pc, #44]	; (80052e0 <__libc_init_array+0x40>)
 80052b2:	4c0c      	ldr	r4, [pc, #48]	; (80052e4 <__libc_init_array+0x44>)
 80052b4:	f000 f820 	bl	80052f8 <_init>
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	2600      	movs	r6, #0
 80052be:	42a6      	cmp	r6, r4
 80052c0:	d105      	bne.n	80052ce <__libc_init_array+0x2e>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c8:	4798      	blx	r3
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7ee      	b.n	80052ac <__libc_init_array+0xc>
 80052ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d2:	4798      	blx	r3
 80052d4:	3601      	adds	r6, #1
 80052d6:	e7f2      	b.n	80052be <__libc_init_array+0x1e>
 80052d8:	08005358 	.word	0x08005358
 80052dc:	08005358 	.word	0x08005358
 80052e0:	08005358 	.word	0x08005358
 80052e4:	0800535c 	.word	0x0800535c

080052e8 <memset>:
 80052e8:	4402      	add	r2, r0
 80052ea:	4603      	mov	r3, r0
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d100      	bne.n	80052f2 <memset+0xa>
 80052f0:	4770      	bx	lr
 80052f2:	f803 1b01 	strb.w	r1, [r3], #1
 80052f6:	e7f9      	b.n	80052ec <memset+0x4>

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
