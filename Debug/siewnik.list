
siewnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800a3b0  0800a3b0  0001a3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c4  0800a9c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9cc  0800a9cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9cc  0800a9cc  0001a9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d0  0800a9d0  0001a9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001e0  0800abb4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800abb4  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e03  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f14  00000000  00000000  00037013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c88  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fb8  00000000  00000000  0005df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0353  00000000  00000000  00074f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f10  00000000  00000000  001452d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a398 	.word	0x0800a398

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a398 	.word	0x0800a398

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9aa 	b.w	8000f48 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff99 	bl	8000b4c <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fd0f 	bl	8000668 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc90 	bl	8000574 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fd06 	bl	8000668 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb48 	bl	80002f8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <UART_Init>:
#include "UART_communication.h"

UART_structure _dropper_UART;

void UART_Init(UART_HandleTypeDef *huart){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	clearRxBuffer();
 8000f54:	f000 f866 	bl	8001024 <clearRxBuffer>
	clearTxBuffer();
 8000f58:	f000 f88c 	bl	8001074 <clearTxBuffer>

	_dropper_UART.UART_Handler = huart;
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <UART_Init+0x30>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	HAL_UART_Receive_IT(_dropper_UART.UART_Handler, &(_dropper_UART.rxTmpChar), 1);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <UART_Init+0x30>)
 8000f66:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4904      	ldr	r1, [pc, #16]	; (8000f80 <UART_Init+0x34>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 faa8 	bl	80054c4 <HAL_UART_Receive_IT>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001fc 	.word	0x200001fc
 8000f80:	2000038c 	.word	0x2000038c

08000f84 <HAL_UART_RxCpltCallback>:

HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == _dropper_UART.UART_Handler->Instance){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000f92:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d138      	bne.n	800100e <HAL_UART_RxCpltCallback+0x8a>
		if(_dropper_UART.rxTmpChar == '\n' || _dropper_UART.rxTmpChar == '\r'){
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000f9e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	d004      	beq.n	8000fb0 <HAL_UART_RxCpltCallback+0x2c>
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fa8:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	d104      	bne.n	8000fba <HAL_UART_RxCpltCallback+0x36>
			_dropper_UART.msgReadyToRead = true;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
 8000fb8:	e021      	b.n	8000ffe <HAL_UART_RxCpltCallback+0x7a>
		}
		else{
			_dropper_UART.rxBuffer[_dropper_UART.rxBuffCursor] = _dropper_UART.rxTmpChar;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fbc:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fc4:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			_dropper_UART.rxBuffCursor = ((++_dropper_UART.rxBuffCursor)%RX_BUFFER_SIZE);
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fd2:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fdc:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fe2:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_UART_RxCpltCallback+0x98>)
 8000fe8:	fba2 1203 	umull	r1, r2, r2, r3
 8000fec:	0992      	lsrs	r2, r2, #6
 8000fee:	21c8      	movs	r1, #200	; 0xc8
 8000ff0:	fb01 f202 	mul.w	r2, r1, r2
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000ffa:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		}
		HAL_UART_Receive_IT(_dropper_UART.UART_Handler, &(_dropper_UART.rxTmpChar), 1);
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8001000:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001004:	2201      	movs	r2, #1
 8001006:	4906      	ldr	r1, [pc, #24]	; (8001020 <HAL_UART_RxCpltCallback+0x9c>)
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fa5b 	bl	80054c4 <HAL_UART_Receive_IT>
	}
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001fc 	.word	0x200001fc
 800101c:	51eb851f 	.word	0x51eb851f
 8001020:	2000038c 	.word	0x2000038c

08001024 <clearRxBuffer>:

void clearRxBuffer(){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
	_dropper_UART.rxTmpChar = 0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <clearRxBuffer+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	_dropper_UART.rxBuffCursor = 0;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <clearRxBuffer+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	_dropper_UART.msgReadyToRead = false;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <clearRxBuffer+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	for(uint8_t i = 0; i<RX_BUFFER_SIZE; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e008      	b.n	800105a <clearRxBuffer+0x36>
		_dropper_UART.rxBuffer[i] = 0;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <clearRxBuffer+0x4c>)
 800104c:	4413      	add	r3, r2
 800104e:	2200      	movs	r2, #0
 8001050:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<RX_BUFFER_SIZE; i++){
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	3301      	adds	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2bc7      	cmp	r3, #199	; 0xc7
 800105e:	d9f3      	bls.n	8001048 <clearRxBuffer+0x24>
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200001fc 	.word	0x200001fc

08001074 <clearTxBuffer>:

void clearTxBuffer(){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<TX_BUFFER_SIZE; i++){
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e006      	b.n	800108e <clearTxBuffer+0x1a>
		_dropper_UART.txBuffer[i] = 0;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <clearTxBuffer+0x30>)
 8001084:	2100      	movs	r1, #0
 8001086:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<TX_BUFFER_SIZE; i++){
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3301      	adds	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2bc7      	cmp	r3, #199	; 0xc7
 8001092:	d9f5      	bls.n	8001080 <clearTxBuffer+0xc>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200001fc 	.word	0x200001fc

080010a8 <decodeMsg>:

int8_t decodeMsg(command *cmd){
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08d      	sub	sp, #52	; 0x34
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	uint8_t *p = NULL, *p_prev = NULL, tmpBuff[20] = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
	int8_t paramIdx = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	for(uint8_t i = 0; i<CMD_NAME_LENGHT_T; i++)cmd->cmdName[i] = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80010d6:	e009      	b.n	80010ec <decodeMsg+0x44>
 80010d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	2100      	movs	r1, #0
 80010e0:	54d1      	strb	r1, [r2, r3]
 80010e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010e6:	3301      	adds	r3, #1
 80010e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80010ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d9f1      	bls.n	80010d8 <decodeMsg+0x30>
	for(uint8_t i = 0; i<CMD_PARAMS_NUMBER_T; i++)cmd->params[i] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80010fa:	e010      	b.n	800111e <decodeMsg+0x76>
 80010fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	18d1      	adds	r1, r2, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
 8001114:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001118:	3301      	adds	r3, #1
 800111a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800111e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001122:	2b04      	cmp	r3, #4
 8001124:	d9ea      	bls.n	80010fc <decodeMsg+0x54>

	p = strchr(_dropper_UART.rxBuffer, ' ');
 8001126:	2120      	movs	r1, #32
 8001128:	483d      	ldr	r0, [pc, #244]	; (8001220 <decodeMsg+0x178>)
 800112a:	f006 fa4f 	bl	80075cc <strchr>
 800112e:	62f8      	str	r0, [r7, #44]	; 0x2c
	strncpy(cmd->cmdName, _dropper_UART.rxBuffer, 3);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	493a      	ldr	r1, [pc, #232]	; (8001220 <decodeMsg+0x178>)
 8001136:	4618      	mov	r0, r3
 8001138:	f006 fa5d 	bl	80075f6 <strncpy>
	if(p == NULL) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <decodeMsg+0xa2>
		clearRxBuffer();
 8001142:	f7ff ff6f 	bl	8001024 <clearRxBuffer>
		return 0;//no arguments
 8001146:	2300      	movs	r3, #0
 8001148:	e065      	b.n	8001216 <decodeMsg+0x16e>
	}
	else if(p - _dropper_UART.rxBuffer != 3){
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	4a34      	ldr	r2, [pc, #208]	; (8001220 <decodeMsg+0x178>)
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	2b03      	cmp	r3, #3
 8001152:	d059      	beq.n	8001208 <decodeMsg+0x160>
		clearRxBuffer();
 8001154:	f7ff ff66 	bl	8001024 <clearRxBuffer>
		return -1; //cmd name is not valid, abort
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	e05b      	b.n	8001216 <decodeMsg+0x16e>
	}

	while(p != NULL){
		p_prev = p + 1;
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	3301      	adds	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
		p = strchr( p + 1, ' ' );
 8001164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001166:	3301      	adds	r3, #1
 8001168:	2120      	movs	r1, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f006 fa2e 	bl	80075cc <strchr>
 8001170:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(p == NULL){
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <decodeMsg+0xde>
			strcpy(tmpBuff, p_prev);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800117e:	4618      	mov	r0, r3
 8001180:	f006 fa31 	bl	80075e6 <strcpy>
 8001184:	e00c      	b.n	80011a0 <decodeMsg+0xf8>
		}
		else{
			int8_t len = p - p_prev;
 8001186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			strncpy(tmpBuff, p_prev, len);
 8001190:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fa2b 	bl	80075f6 <strncpy>
		}
		cmd->params[paramIdx++] = atof(tmpBuff);
 80011a0:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80011a4:	b2d3      	uxtb	r3, r2
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80011ae:	4614      	mov	r4, r2
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 f9d3 	bl	8007560 <atof>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	1c63      	adds	r3, r4, #1
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	ed83 7b00 	vstr	d7, [r3]

		if(paramIdx >= 5) {
 80011ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	dd04      	ble.n	80011e0 <decodeMsg+0x138>
			clearRxBuffer();
 80011d6:	f7ff ff25 	bl	8001024 <clearRxBuffer>
			return paramIdx;//too many arguments
 80011da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80011de:	e01a      	b.n	8001216 <decodeMsg+0x16e>
		}

		for(uint8_t i = 0; i<20; i++) tmpBuff[i] = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80011e6:	e00b      	b.n	8001200 <decodeMsg+0x158>
 80011e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011ec:	3330      	adds	r3, #48	; 0x30
 80011ee:	443b      	add	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	f803 2c24 	strb.w	r2, [r3, #-36]
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	3301      	adds	r3, #1
 80011fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001200:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001204:	2b13      	cmp	r3, #19
 8001206:	d9ef      	bls.n	80011e8 <decodeMsg+0x140>
	while(p != NULL){
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1a7      	bne.n	800115e <decodeMsg+0xb6>
	}

	clearRxBuffer();
 800120e:	f7ff ff09 	bl	8001024 <clearRxBuffer>
	return paramIdx;
 8001212:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8001216:	4618      	mov	r0, r3
 8001218:	3734      	adds	r7, #52	; 0x34
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	200002c4 	.word	0x200002c4

08001224 <UART_sendMsg>:

void UART_sendMsg(uint8_t * msg){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	clearTxBuffer();
 800122c:	f7ff ff22 	bl	8001074 <clearTxBuffer>
	uint16_t msgLen = strlen(msg);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ffff 	bl	8000234 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]
	//prevention from too large messages
	if(msgLen > TX_BUFFER_SIZE) msgLen = TX_BUFFER_SIZE;
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	2bc8      	cmp	r3, #200	; 0xc8
 800123e:	d901      	bls.n	8001244 <UART_sendMsg+0x20>
 8001240:	23c8      	movs	r3, #200	; 0xc8
 8001242:	81fb      	strh	r3, [r7, #14]
	strncpy(_dropper_UART.txBuffer, msg, msgLen);
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	461a      	mov	r2, r3
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <UART_sendMsg+0x44>)
 800124c:	f006 f9d3 	bl	80075f6 <strncpy>
	HAL_UART_Transmit(_dropper_UART.UART_Handler, _dropper_UART.txBuffer, msgLen, 100);
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <UART_sendMsg+0x44>)
 8001252:	f8d3 0194 	ldr.w	r0, [r3, #404]	; 0x194
 8001256:	89fa      	ldrh	r2, [r7, #14]
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	4903      	ldr	r1, [pc, #12]	; (8001268 <UART_sendMsg+0x44>)
 800125c:	f004 f8a4 	bl	80053a8 <HAL_UART_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200001fc 	.word	0x200001fc

0800126c <_dropper_StepIRQ>:
uint32_t stepCounter = 0;
bool isSeedSown = false;
_dropper dDropper;


void _dropper_StepIRQ(){
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	++stepCounter;
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <_dropper_StepIRQ+0x18>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <_dropper_StepIRQ+0x18>)
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	20000394 	.word	0x20000394

08001288 <_dropper_SeedSensorIRQ>:

void _dropper_SeedSensorIRQ(){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	isSeedSown = true;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <_dropper_SeedSensorIRQ+0x14>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000398 	.word	0x20000398

080012a0 <_dropper_HomingSensorIRQ>:

void _dropper_HomingSensorIRQ(){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	dDropper.state = HOME;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <_dropper_HomingSensorIRQ+0x14>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	701a      	strb	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	2000039c 	.word	0x2000039c

080012b8 <_dropper_Init>:

void _dropper_Init(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

	dDropper.channels[0].name = CHANNEL_1;
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <_dropper_Init+0x1e4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
	dDropper.channels[0].port = SEED_CHANNEL_1_PORT;
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <_dropper_Init+0x1e4>)
 80012c6:	4a76      	ldr	r2, [pc, #472]	; (80014a0 <_dropper_Init+0x1e8>)
 80012c8:	609a      	str	r2, [r3, #8]
	dDropper.channels[0].pin = SEED_CHANNEL_1_PIN;
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <_dropper_Init+0x1e4>)
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	819a      	strh	r2, [r3, #12]
	dDropper.channels[0].seedType = PELLETED;
 80012d2:	4b72      	ldr	r3, [pc, #456]	; (800149c <_dropper_Init+0x1e4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	715a      	strb	r2, [r3, #5]
	dDropper.channels[0].status = CHANNEL_CLOSED;
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <_dropper_Init+0x1e4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	719a      	strb	r2, [r3, #6]

	dDropper.channels[1].name = CHANNEL_2;
 80012de:	4b6f      	ldr	r3, [pc, #444]	; (800149c <_dropper_Init+0x1e4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	741a      	strb	r2, [r3, #16]
	dDropper.channels[1].port = SEED_CHANNEL_2_PORT;
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <_dropper_Init+0x1e4>)
 80012e6:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <_dropper_Init+0x1ec>)
 80012e8:	615a      	str	r2, [r3, #20]
	dDropper.channels[1].pin = SEED_CHANNEL_2_PIN;
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <_dropper_Init+0x1e4>)
 80012ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f0:	831a      	strh	r2, [r3, #24]
	dDropper.channels[1].seedType = PELLETED;
 80012f2:	4b6a      	ldr	r3, [pc, #424]	; (800149c <_dropper_Init+0x1e4>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	745a      	strb	r2, [r3, #17]
	dDropper.channels[1].status = CHANNEL_CLOSED;
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <_dropper_Init+0x1e4>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	749a      	strb	r2, [r3, #18]

	dDropper.channels[2].name = CHANNEL_3;
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <_dropper_Init+0x1e4>)
 8001300:	2202      	movs	r2, #2
 8001302:	771a      	strb	r2, [r3, #28]
	dDropper.channels[2].port = SEED_CHANNEL_3_PORT;
 8001304:	4b65      	ldr	r3, [pc, #404]	; (800149c <_dropper_Init+0x1e4>)
 8001306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800130a:	621a      	str	r2, [r3, #32]
	dDropper.channels[2].pin = SEED_CHANNEL_3_PIN;
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <_dropper_Init+0x1e4>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	849a      	strh	r2, [r3, #36]	; 0x24
	dDropper.channels[2].seedType = PELLETED;
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <_dropper_Init+0x1e4>)
 8001316:	2201      	movs	r2, #1
 8001318:	775a      	strb	r2, [r3, #29]
	dDropper.channels[2].status = CHANNEL_CLOSED;
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <_dropper_Init+0x1e4>)
 800131c:	2201      	movs	r2, #1
 800131e:	779a      	strb	r2, [r3, #30]

	dDropper.channels[3].name = CHANNEL_4;
 8001320:	4b5e      	ldr	r3, [pc, #376]	; (800149c <_dropper_Init+0x1e4>)
 8001322:	2203      	movs	r2, #3
 8001324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	dDropper.channels[3].port = SEED_CHANNEL_4_PORT;
 8001328:	4b5c      	ldr	r3, [pc, #368]	; (800149c <_dropper_Init+0x1e4>)
 800132a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
	dDropper.channels[3].pin = SEED_CHANNEL_4_PIN;
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <_dropper_Init+0x1e4>)
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	861a      	strh	r2, [r3, #48]	; 0x30
	dDropper.channels[3].seedType = CASUAL;
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <_dropper_Init+0x1e4>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	dDropper.channels[3].status = CHANNEL_CLOSED;
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <_dropper_Init+0x1e4>)
 8001342:	2201      	movs	r2, #1
 8001344:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	dDropper.channels[4].name = CHANNEL_5;
 8001348:	4b54      	ldr	r3, [pc, #336]	; (800149c <_dropper_Init+0x1e4>)
 800134a:	2204      	movs	r2, #4
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	dDropper.channels[4].port = SEED_CHANNEL_5_PORT;
 8001350:	4b52      	ldr	r3, [pc, #328]	; (800149c <_dropper_Init+0x1e4>)
 8001352:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <_dropper_Init+0x1ec>)
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
	dDropper.channels[4].pin = SEED_CHANNEL_5_PIN;
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <_dropper_Init+0x1e4>)
 8001358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135c:	879a      	strh	r2, [r3, #60]	; 0x3c
	dDropper.channels[4].seedType = CASUAL;
 800135e:	4b4f      	ldr	r3, [pc, #316]	; (800149c <_dropper_Init+0x1e4>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	dDropper.channels[4].status = CHANNEL_CLOSED;
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <_dropper_Init+0x1e4>)
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dDropper.channels[5].name = CHANNEL_6;
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <_dropper_Init+0x1e4>)
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dDropper.channels[5].port = SEED_CHANNEL_6_PORT;
 8001376:	4b49      	ldr	r3, [pc, #292]	; (800149c <_dropper_Init+0x1e4>)
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <_dropper_Init+0x1ec>)
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
	dDropper.channels[5].pin = SEED_CHANNEL_6_PIN;
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <_dropper_Init+0x1e4>)
 800137e:	2210      	movs	r2, #16
 8001380:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	dDropper.channels[5].seedType = CASUAL;
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <_dropper_Init+0x1e4>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	dDropper.channels[5].status = CHANNEL_CLOSED;
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <_dropper_Init+0x1e4>)
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42


	for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++){
 8001394:	2300      	movs	r3, #0
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	e018      	b.n	80013cc <_dropper_Init+0x114>
		HAL_GPIO_WritePin(dDropper.channels[i].port, dDropper.channels[i].pin, GPIO_PIN_SET);
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	493f      	ldr	r1, [pc, #252]	; (800149c <_dropper_Init+0x1e4>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3308      	adds	r3, #8
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	493b      	ldr	r1, [pc, #236]	; (800149c <_dropper_Init+0x1e4>)
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	330c      	adds	r3, #12
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	2201      	movs	r2, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	f001 fb5f 	bl	8002a84 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<NUMBER_OF_CHANNELS; i++){
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3301      	adds	r3, #1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d9e3      	bls.n	800139a <_dropper_Init+0xe2>
	}

	dDropper.vibrateMotor.port = VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT;
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <_dropper_Init+0x1e4>)
 80013d4:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <_dropper_Init+0x1ec>)
 80013d6:	64da      	str	r2, [r3, #76]	; 0x4c
	dDropper.vibrateMotor.pin = VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN;
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <_dropper_Init+0x1e4>)
 80013da:	2220      	movs	r2, #32
 80013dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	dDropper.vibrateMotor.status = MOTOR_OFF;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <_dropper_Init+0x1e4>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	HAL_GPIO_WritePin(VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PORT, VIBRATE_MOTOR_FOR_CASUAL_SEEDS_PIN, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2120      	movs	r1, #32
 80013ec:	482d      	ldr	r0, [pc, #180]	; (80014a4 <_dropper_Init+0x1ec>)
 80013ee:	f001 fb49 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_EN_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f001 fb43 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2102      	movs	r1, #2
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f001 fb3d 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DROPPER_STEPPER_EN_PORT, DROPPER_STEPPER_EN_PIN, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	4825      	ldr	r0, [pc, #148]	; (80014a4 <_dropper_Init+0x1ec>)
 8001410:	f001 fb38 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <_dropper_Init+0x1e8>)
 800141a:	f001 fb33 	bl	8002a84 <HAL_GPIO_WritePin>

	//turn off other relays
	HAL_GPIO_WritePin(RELAY_8_GPIO_Port, RELAY_8_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f001 fb2c 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_9_GPIO_Port, RELAY_9_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <_dropper_Init+0x1e8>)
 8001434:	f001 fb26 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_10_GPIO_Port, RELAY_10_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <_dropper_Init+0x1e8>)
 800143e:	f001 fb21 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_11_GPIO_Port, RELAY_11_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <_dropper_Init+0x1ec>)
 800144a:	f001 fb1b 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_12_GPIO_Port, RELAY_12_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2104      	movs	r1, #4
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <_dropper_Init+0x1ec>)
 8001454:	f001 fb16 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_13_GPIO_Port, RELAY_13_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <_dropper_Init+0x1ec>)
 800145e:	f001 fb11 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_14_GPIO_Port, RELAY_14_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	480e      	ldr	r0, [pc, #56]	; (80014a4 <_dropper_Init+0x1ec>)
 800146a:	f001 fb0b 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_15_GPIO_Port, RELAY_15_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <_dropper_Init+0x1ec>)
 8001476:	f001 fb05 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_16_GPIO_Port, RELAY_16_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001480:	4808      	ldr	r0, [pc, #32]	; (80014a4 <_dropper_Init+0x1ec>)
 8001482:	f001 faff 	bl	8002a84 <HAL_GPIO_WritePin>

	UART_Init(&huart1);
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <_dropper_Init+0x1f0>)
 8001488:	f7ff fd60 	bl	8000f4c <UART_Init>

	dDropper.state = INITIALIZED;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <_dropper_Init+0x1e4>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000039c 	.word	0x2000039c
 80014a0:	48000800 	.word	0x48000800
 80014a4:	48000400 	.word	0x48000400
 80014a8:	20000440 	.word	0x20000440

080014ac <_dropper_OpenChannel>:


void _dropper_OpenChannel(_dropperChannelName dC){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(dDropper.channels[dC].port, dDropper.channels[dC].pin, GPIO_PIN_RESET);
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	4911      	ldr	r1, [pc, #68]	; (8001500 <_dropper_OpenChannel+0x54>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3308      	adds	r3, #8
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <_dropper_OpenChannel+0x54>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	330c      	adds	r3, #12
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	f001 fad1 	bl	8002a84 <HAL_GPIO_WritePin>
	dDropper.channels[dC].status = CHANNEL_OPENED;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <_dropper_OpenChannel+0x54>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	3306      	adds	r3, #6
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000039c 	.word	0x2000039c

08001504 <_dropper_CloseChannel>:

void _dropper_CloseChannel(_dropperChannelName dC){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(dDropper.channels[dC].port, dDropper.channels[dC].pin, GPIO_PIN_SET);
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	4911      	ldr	r1, [pc, #68]	; (8001558 <_dropper_CloseChannel+0x54>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3308      	adds	r3, #8
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	79fa      	ldrb	r2, [r7, #7]
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <_dropper_CloseChannel+0x54>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	330c      	adds	r3, #12
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	f001 faa5 	bl	8002a84 <HAL_GPIO_WritePin>
	dDropper.channels[dC].status = CHANNEL_CLOSED;
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <_dropper_CloseChannel+0x54>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3306      	adds	r3, #6
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000039c 	.word	0x2000039c

0800155c <_dropper_StartVibrate>:

void _dropper_StartVibrate(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(dDropper.vibrateMotor.port, dDropper.vibrateMotor.pin, GPIO_PIN_RESET);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_dropper_StartVibrate+0x24>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <_dropper_StartVibrate+0x24>)
 8001566:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800156a:	2200      	movs	r2, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fa89 	bl	8002a84 <HAL_GPIO_WritePin>
	dDropper.vibrateMotor.status = MOTOR_ON;
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <_dropper_StartVibrate+0x24>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000039c 	.word	0x2000039c

08001584 <_dropper_StopVibrate>:
void _dropper_StopVibrate(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(dDropper.vibrateMotor.port, dDropper.vibrateMotor.pin, GPIO_PIN_SET);
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_dropper_StopVibrate+0x24>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <_dropper_StopVibrate+0x24>)
 800158e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001592:	2201      	movs	r2, #1
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fa75 	bl	8002a84 <HAL_GPIO_WritePin>
	dDropper.vibrateMotor.status = MOTOR_OFF;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_dropper_StopVibrate+0x24>)
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000039c 	.word	0x2000039c

080015ac <_dropper_DrumSetMoveDirection>:
		HAL_GPIO_WritePin(DROPPER_STEPPER_DIR_PORT, DROPPER_STEPPER_DIR_PIN, GPIO_PIN_SET);
		break;
	}
}

void _dropper_DrumSetMoveDirection(_stepperMoveDirection md){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	switch(md){
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <_dropper_DrumSetMoveDirection+0x16>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d007      	beq.n	80015d0 <_dropper_DrumSetMoveDirection+0x24>
		break;
	case BACKWARD:
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_SET);
		break;
	}
}
 80015c0:	e00d      	b.n	80015de <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f001 fa5b 	bl	8002a84 <HAL_GPIO_WritePin>
		break;
 80015ce:	e006      	b.n	80015de <_dropper_DrumSetMoveDirection+0x32>
		HAL_GPIO_WritePin(PELLETED_SEEDS_STEPPER_DIR_PORT, PELLETED_SEEDS_STEPPER_EN_PIN, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2101      	movs	r1, #1
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f001 fa54 	bl	8002a84 <HAL_GPIO_WritePin>
		break;
 80015dc:	bf00      	nop
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <_dropper_RotateDrum_deg>:

_seedSowingStatus _dropper_RotateDrum_deg(float angle_deg){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]

	if(angle_deg < 0){
 80015f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	d509      	bpl.n	8001614 <_dropper_RotateDrum_deg+0x2c>
		_dropper_DrumSetMoveDirection(BACKWARD);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff ffd3 	bl	80015ac <_dropper_DrumSetMoveDirection>
		angle_deg = -angle_deg;
 8001606:	edd7 7a01 	vldr	s15, [r7, #4]
 800160a:	eef1 7a67 	vneg.f32	s15, s15
 800160e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001612:	e002      	b.n	800161a <_dropper_RotateDrum_deg+0x32>
	}
	else{
		_dropper_DrumSetMoveDirection(FORWARD);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ffc9 	bl	80015ac <_dropper_DrumSetMoveDirection>
	}

	uint32_t stepsToDo = (uint32_t)((angle_deg * (float)DRUM_STEPPER_MICROSTEPPING)/DEFAULT_ANGLE_PER_STEP);
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80016b0 <_dropper_RotateDrum_deg+0xc8>
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	ee17 0a90 	vmov	r0, s15
 800162a:	f7fe ffc5 	bl	80005b8 <__aeabi_f2d>
 800162e:	a31e      	add	r3, pc, #120	; (adr r3, 80016a8 <_dropper_RotateDrum_deg+0xc0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f942 	bl	80008bc <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff faac 	bl	8000b9c <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 800164c:	f002 fb20 	bl	8003c90 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 49);
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2231      	movs	r2, #49	; 0x31
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
	stepCounter = 0;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <_dropper_RotateDrum_deg+0xd0>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
	isSeedSown = false;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <_dropper_RotateDrum_deg+0xd4>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

	while(stepCounter < stepsToDo){
 8001664:	e00d      	b.n	8001682 <_dropper_RotateDrum_deg+0x9a>
		if(isSeedSown){
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_dropper_RotateDrum_deg+0xd4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <_dropper_RotateDrum_deg+0x9a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001676:	2100      	movs	r1, #0
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 800167a:	f002 fc61 	bl	8003f40 <HAL_TIM_PWM_Stop_IT>
			return SEED_SOWN;
 800167e:	2300      	movs	r3, #0
 8001680:	e00d      	b.n	800169e <_dropper_RotateDrum_deg+0xb6>
	while(stepCounter < stepsToDo){
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <_dropper_RotateDrum_deg+0xd0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8ec      	bhi.n	8001666 <_dropper_RotateDrum_deg+0x7e>
		}
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <_dropper_RotateDrum_deg+0xcc>)
 8001698:	f002 fc52 	bl	8003f40 <HAL_TIM_PWM_Stop_IT>
	return SEED_ERR;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	cccccccd 	.word	0xcccccccd
 80016ac:	3ffccccc 	.word	0x3ffccccc
 80016b0:	42000000 	.word	0x42000000
 80016b4:	200003f4 	.word	0x200003f4
 80016b8:	20000394 	.word	0x20000394
 80016bc:	20000398 	.word	0x20000398

080016c0 <_dropper_SowSeeds>:
	while(stepCounter < stepsToDo);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
}

bool _dropper_SowSeeds(_dropperChannelName channel ){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]

	//pelleted seeds
	if(channel == CHANNEL_1 || channel == CHANNEL_2 || channel == CHANNEL_3){
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <_dropper_SowSeeds+0x1c>
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d002      	beq.n	80016dc <_dropper_SowSeeds+0x1c>
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d13a      	bne.n	8001752 <_dropper_SowSeeds+0x92>

		_seedSowingStatus isSown = SEED_ERR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
		_stepperMoveDirection nextDirection = FORWARD;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73bb      	strb	r3, [r7, #14]

		_dropper_OpenChannel(channel);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fee0 	bl	80014ac <_dropper_OpenChannel>

		uint8_t moves = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	737b      	strb	r3, [r7, #13]

		while(moves < 12 && isSown == SEED_ERR){
 80016f0:	e016      	b.n	8001720 <_dropper_SowSeeds+0x60>
			if(nextDirection == FORWARD){
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <_dropper_SowSeeds+0x50>
				isSown = _dropper_RotateDrum_deg(30);
 80016f8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80016fc:	f7ff ff74 	bl	80015e8 <_dropper_RotateDrum_deg>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
				nextDirection = BACKWARD;
 8001704:	2301      	movs	r3, #1
 8001706:	73bb      	strb	r3, [r7, #14]
				++moves;
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	3301      	adds	r3, #1
 800170c:	737b      	strb	r3, [r7, #13]
 800170e:	e007      	b.n	8001720 <_dropper_SowSeeds+0x60>
			}
			else{
				isSown = _dropper_RotateDrum_deg(-15);
 8001710:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8001714:	f7ff ff68 	bl	80015e8 <_dropper_RotateDrum_deg>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
				nextDirection = FORWARD;
 800171c:	2300      	movs	r3, #0
 800171e:	73bb      	strb	r3, [r7, #14]
		while(moves < 12 && isSown == SEED_ERR){
 8001720:	7b7b      	ldrb	r3, [r7, #13]
 8001722:	2b0b      	cmp	r3, #11
 8001724:	d802      	bhi.n	800172c <_dropper_SowSeeds+0x6c>
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d0e2      	beq.n	80016f2 <_dropper_SowSeeds+0x32>
			}
		}

		_dropper_StartVibrate();
 800172c:	f7ff ff16 	bl	800155c <_dropper_StartVibrate>
		HAL_Delay(400);
 8001730:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001734:	f000 fe32 	bl	800239c <HAL_Delay>
		_dropper_StopVibrate();
 8001738:	f7ff ff24 	bl	8001584 <_dropper_StopVibrate>

		_dropper_CloseChannel(channel);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fee0 	bl	8001504 <_dropper_CloseChannel>

		return isSown;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	e01f      	b.n	8001792 <_dropper_SowSeeds+0xd2>
	}

	//casual seeds
	else if(channel == CHANNEL_4 || channel == CHANNEL_5 || channel == CHANNEL_6){
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d005      	beq.n	8001764 <_dropper_SowSeeds+0xa4>
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d002      	beq.n	8001764 <_dropper_SowSeeds+0xa4>
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d116      	bne.n	8001792 <_dropper_SowSeeds+0xd2>
		_dropper_OpenChannel(channel);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fea0 	bl	80014ac <_dropper_OpenChannel>
		HAL_Delay(100); //wait until the channel is open
 800176c:	2064      	movs	r0, #100	; 0x64
 800176e:	f000 fe15 	bl	800239c <HAL_Delay>
		_dropper_StartVibrate(CASUAL);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fef2 	bl	800155c <_dropper_StartVibrate>
		HAL_Delay(SOWING_TIME_FOR_CASUAL_SEEDS_MS);
 8001778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177c:	f000 fe0e 	bl	800239c <HAL_Delay>
		_dropper_StopVibrate(CASUAL);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff feff 	bl	8001584 <_dropper_StopVibrate>
		_dropper_CloseChannel(channel);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff febb 	bl	8001504 <_dropper_CloseChannel>

		return SEED_SOWN;
 800178e:	2300      	movs	r3, #0
 8001790:	e7ff      	b.n	8001792 <_dropper_SowSeeds+0xd2>
	}
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <_dropper_execCmd>:

}

///////////////////////////////////////////////////////////////////////////////////////////

void _dropper_execCmd(){
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b08f      	sub	sp, #60	; 0x3c
 80017a0:	af00      	add	r7, sp, #0
	command cmd;
	int8_t paramsNo = decodeMsg(&cmd);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc7f 	bl	80010a8 <decodeMsg>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(paramsNo == -1){
 80017b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d103      	bne.n	80017c2 <_dropper_execCmd+0x26>
		UART_sendMsg(REJECTION_MSG);
 80017ba:	4835      	ldr	r0, [pc, #212]	; (8001890 <_dropper_execCmd+0xf4>)
 80017bc:	f7ff fd32 	bl	8001224 <UART_sendMsg>
 80017c0:	e062      	b.n	8001888 <_dropper_execCmd+0xec>
		return; //invalid command
	}

	if(strcmp(cmd.cmdName, CMD_HOME) == 0){
 80017c2:	463b      	mov	r3, r7
 80017c4:	4933      	ldr	r1, [pc, #204]	; (8001894 <_dropper_execCmd+0xf8>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fd2a 	bl	8000220 <strcmp>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <_dropper_execCmd+0x42>
		UART_sendMsg(CONFIRMATION_MSG);
 80017d2:	4831      	ldr	r0, [pc, #196]	; (8001898 <_dropper_execCmd+0xfc>)
 80017d4:	f7ff fd26 	bl	8001224 <UART_sendMsg>
		_dropper_execCmd_HomeDropper();
 80017d8:	f000 f8ba 	bl	8001950 <_dropper_execCmd_HomeDropper>
 80017dc:	e054      	b.n	8001888 <_dropper_execCmd+0xec>
	}
	else if(strcmp(cmd.cmdName, CMD_HELP) == 0){
 80017de:	463b      	mov	r3, r7
 80017e0:	492e      	ldr	r1, [pc, #184]	; (800189c <_dropper_execCmd+0x100>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fd1c 	bl	8000220 <strcmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <_dropper_execCmd+0x5e>
		UART_sendMsg(CONFIRMATION_MSG);
 80017ee:	482a      	ldr	r0, [pc, #168]	; (8001898 <_dropper_execCmd+0xfc>)
 80017f0:	f7ff fd18 	bl	8001224 <UART_sendMsg>
		_dropper_execCmd_Help();
 80017f4:	f000 f85c 	bl	80018b0 <_dropper_execCmd_Help>
 80017f8:	e046      	b.n	8001888 <_dropper_execCmd+0xec>
	}
	else if(strcmp(cmd.cmdName, CMD_SEND_STATUS) == 0){
 80017fa:	463b      	mov	r3, r7
 80017fc:	4928      	ldr	r1, [pc, #160]	; (80018a0 <_dropper_execCmd+0x104>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fd0e 	bl	8000220 <strcmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <_dropper_execCmd+0x7a>
		UART_sendMsg(CONFIRMATION_MSG);
 800180a:	4823      	ldr	r0, [pc, #140]	; (8001898 <_dropper_execCmd+0xfc>)
 800180c:	f7ff fd0a 	bl	8001224 <UART_sendMsg>
		_dropper_execCmd_GetStatus();
 8001810:	f000 f858 	bl	80018c4 <_dropper_execCmd_GetStatus>
 8001814:	e038      	b.n	8001888 <_dropper_execCmd+0xec>
	}
	else if(strcmp(cmd.cmdName, CMD_SELFTEST) == 0){
 8001816:	463b      	mov	r3, r7
 8001818:	4922      	ldr	r1, [pc, #136]	; (80018a4 <_dropper_execCmd+0x108>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd00 	bl	8000220 <strcmp>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <_dropper_execCmd+0x96>
			UART_sendMsg(CONFIRMATION_MSG);
 8001826:	481c      	ldr	r0, [pc, #112]	; (8001898 <_dropper_execCmd+0xfc>)
 8001828:	f7ff fcfc 	bl	8001224 <UART_sendMsg>
			_dropper_execCmd_Selftest();
 800182c:	f000 f897 	bl	800195e <_dropper_execCmd_Selftest>
 8001830:	e02a      	b.n	8001888 <_dropper_execCmd+0xec>
		}
	else if(strcmp(cmd.cmdName, CMD_SOW) == 0){
 8001832:	463b      	mov	r3, r7
 8001834:	491c      	ldr	r1, [pc, #112]	; (80018a8 <_dropper_execCmd+0x10c>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fcf2 	bl	8000220 <strcmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d11f      	bne.n	8001882 <_dropper_execCmd+0xe6>
		if(paramsNo != 2){
 8001842:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <_dropper_execCmd+0xb6>
			UART_sendMsg(INVALID_ARGUMET_MSG);
 800184a:	4818      	ldr	r0, [pc, #96]	; (80018ac <_dropper_execCmd+0x110>)
 800184c:	f7ff fcea 	bl	8001224 <UART_sendMsg>
 8001850:	e01a      	b.n	8001888 <_dropper_execCmd+0xec>
		}
		else{
			UART_sendMsg(CONFIRMATION_MSG);
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <_dropper_execCmd+0xfc>)
 8001854:	f7ff fce6 	bl	8001224 <UART_sendMsg>
			_dropper_execCmd_Sow((uint8_t)cmd.params[0], (uint8_t)cmd.params[1]);
 8001858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f99c 	bl	8000b9c <__aeabi_d2uiz>
 8001864:	4603      	mov	r3, r0
 8001866:	b2dc      	uxtb	r4, r3
 8001868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f994 	bl	8000b9c <__aeabi_d2uiz>
 8001874:	4603      	mov	r3, r0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4619      	mov	r1, r3
 800187a:	4620      	mov	r0, r4
 800187c:	f000 f82a 	bl	80018d4 <_dropper_execCmd_Sow>
 8001880:	e002      	b.n	8001888 <_dropper_execCmd+0xec>
		}
	}
	else{
		UART_sendMsg(REJECTION_MSG);
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <_dropper_execCmd+0xf4>)
 8001884:	f7ff fcce 	bl	8001224 <UART_sendMsg>
	}
}
 8001888:	373c      	adds	r7, #60	; 0x3c
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	0800a3b0 	.word	0x0800a3b0
 8001894:	0800a3b8 	.word	0x0800a3b8
 8001898:	0800a3bc 	.word	0x0800a3bc
 800189c:	0800a3c4 	.word	0x0800a3c4
 80018a0:	0800a3c8 	.word	0x0800a3c8
 80018a4:	0800a3cc 	.word	0x0800a3cc
 80018a8:	0800a3d0 	.word	0x0800a3d0
 80018ac:	0800a3d4 	.word	0x0800a3d4

080018b0 <_dropper_execCmd_Help>:

void _dropper_execCmd_Help(){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	UART_sendMsg(HELP_TEXT);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <_dropper_execCmd_Help+0x10>)
 80018b6:	f7ff fcb5 	bl	8001224 <UART_sendMsg>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	0800a3e8 	.word	0x0800a3e8

080018c4 <_dropper_execCmd_GetStatus>:

void _dropper_execCmd_GetStatus(){
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_dropper_execCmd_Sow>:

void _dropper_execCmd_Sow(uint8_t channelNo, uint8_t noOfSeeds){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	if(channelNo > NUMBER_OF_CHANNELS || channelNo < 1){
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d802      	bhi.n	80018f0 <_dropper_execCmd_Sow+0x1c>
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <_dropper_execCmd_Sow+0x24>
		UART_sendMsg(INVALID_ARGUMET_MSG);
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <_dropper_execCmd_Sow+0x70>)
 80018f2:	f7ff fc97 	bl	8001224 <UART_sendMsg>
		return;
 80018f6:	e021      	b.n	800193c <_dropper_execCmd_Sow+0x68>
	}

	if(noOfSeeds > MAX_SOWS_AT_ONCE) noOfSeeds = MAX_SOWS_AT_ONCE;
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d901      	bls.n	8001902 <_dropper_execCmd_Sow+0x2e>
 80018fe:	230a      	movs	r3, #10
 8001900:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i = 0; i<noOfSeeds; i++){
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e015      	b.n	8001934 <_dropper_execCmd_Sow+0x60>
		if(_dropper_SowSeeds((_dropperChannelName)channelNo - 1) == SEED_SOWN){
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	3b01      	subs	r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fed6 	bl	80016c0 <_dropper_SowSeeds>
 8001914:	4603      	mov	r3, r0
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <_dropper_execCmd_Sow+0x54>
			UART_sendMsg(CMD_EXEC_SUCCESFULLY_MSG);
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <_dropper_execCmd_Sow+0x74>)
 8001922:	f7ff fc7f 	bl	8001224 <UART_sendMsg>
 8001926:	e002      	b.n	800192e <_dropper_execCmd_Sow+0x5a>
		}
		else{
			UART_sendMsg(CMD_EXEC_FAILED_MSG);
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <_dropper_execCmd_Sow+0x78>)
 800192a:	f7ff fc7b 	bl	8001224 <UART_sendMsg>
	for(uint8_t i = 0; i<noOfSeeds; i++){
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	3301      	adds	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	429a      	cmp	r2, r3
 800193a:	d3e5      	bcc.n	8001908 <_dropper_execCmd_Sow+0x34>
		}
	}

}
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	0800a3d4 	.word	0x0800a3d4
 8001948:	0800a530 	.word	0x0800a530
 800194c:	0800a544 	.word	0x0800a544

08001950 <_dropper_execCmd_HomeDropper>:

void _dropper_execCmd_SowExt(uint8_t channelNo, uint8_t noOfSeeds, uint8_t potNo){

}

void _dropper_execCmd_HomeDropper(){
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_dropper_execCmd_Selftest>:

void _dropper_execCmd_MoveDropper(uint32_t distance_mm){

}

void _dropper_execCmd_Selftest(){
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a78      	ldr	r2, [pc, #480]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b70      	ldr	r3, [pc, #448]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a6c      	ldr	r2, [pc, #432]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e2:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a60      	ldr	r2, [pc, #384]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <MX_GPIO_Init+0x1fc>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 80019fa:	2200      	movs	r2, #0
 80019fc:	f240 7123 	movw	r1, #1827	; 0x723
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f001 f83e 	bl	8002a84 <HAL_GPIO_WritePin>
                          |RELAY_3_Pin|RELAY_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f64e 6176 	movw	r1, #61046	; 0xee76
 8001a0e:	4857      	ldr	r0, [pc, #348]	; (8001b6c <MX_GPIO_Init+0x200>)
 8001a10:	f001 f838 	bl	8002a84 <HAL_GPIO_WritePin>
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001a1a:	4855      	ldr	r0, [pc, #340]	; (8001b70 <MX_GPIO_Init+0x204>)
 8001a1c:	f001 f832 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SENSOR_9_Pin|SENSOR_10_Pin;
 8001a20:	f242 030c 	movw	r3, #8204	; 0x200c
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	484e      	ldr	r0, [pc, #312]	; (8001b70 <MX_GPIO_Init+0x204>)
 8001a36:	f000 fea3 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER1_EN_Pin|STEPPER1_DIR_Pin|LD2_Pin|RELAY_4_Pin
 8001a3a:	f240 7323 	movw	r3, #1827	; 0x723
 8001a3e:	617b      	str	r3, [r7, #20]
                          |RELAY_3_Pin|RELAY_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f000 fe93 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f000 fe82 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_12_Pin|SENSOR_6_Pin;
 8001a7c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a94:	f000 fe74 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_11_Pin|SENSOR_7_Pin|SENSOR_8_Pin;
 8001a98:	f241 0381 	movw	r3, #4225	; 0x1081
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482f      	ldr	r0, [pc, #188]	; (8001b6c <MX_GPIO_Init+0x200>)
 8001aae:	f000 fe67 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_13_Pin|RELAY_12_Pin|RELAY_5_Pin|RELAY_11_Pin
 8001ab2:	f64e 6376 	movw	r3, #61046	; 0xee76
 8001ab6:	617b      	str	r3, [r7, #20]
                          |RELAY_16_Pin|RELAY_15_Pin|RELAY_14_Pin|RELAY_6_Pin
                          |RELAY_7_Pin|STEPPER2_EN_Pin|RELAY_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4828      	ldr	r0, [pc, #160]	; (8001b6c <MX_GPIO_Init+0x200>)
 8001acc:	f000 fe58 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY_10_Pin|STEPPER2_DIR_Pin|RELAY_9_Pin|RELAY_1_Pin;
 8001ad0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4821      	ldr	r0, [pc, #132]	; (8001b70 <MX_GPIO_Init+0x204>)
 8001aea:	f000 fe49 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_5_Pin;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_5_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f000 fe3b 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENSOR_3_Pin|SENSOR_1_Pin|SENSOR_2_Pin;
 8001b0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_GPIO_Init+0x204>)
 8001b22:	f000 fe2d 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_4_Pin;
 8001b26:	2304      	movs	r3, #4
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_4_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <MX_GPIO_Init+0x208>)
 8001b3c:	f000 fe20 	bl	8002780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2008      	movs	r0, #8
 8001b46:	f000 fd26 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b4a:	2008      	movs	r0, #8
 8001b4c:	f000 fd3d 	bl	80025ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2028      	movs	r0, #40	; 0x28
 8001b56:	f000 fd1e 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b5a:	2028      	movs	r0, #40	; 0x28
 8001b5c:	f000 fd35 	bl	80025ca <HAL_NVIC_EnableIRQ>

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	48000c00 	.word	0x48000c00

08001b78 <HAL_TIM_PWM_PulseFinishedCallback>:
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		_dropper_StepIRQ();
 8001b8a:	f7ff fb6f 	bl	800126c <_dropper_StepIRQ>
	}
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40000400 	.word	0x40000400

08001b9c <HAL_GPIO_EXTI_Callback>:

uint8_t channelNo[4] = {0};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == SEED_SENSOR_CHANNEL_1_PIN	 ||
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_EXTI_Callback+0x22>
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_EXTI_Callback+0x22>
			GPIO_Pin == SEED_SENSOR_CHANNEL_2_PIN ||
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d102      	bne.n	8001bc4 <HAL_GPIO_EXTI_Callback+0x28>
			GPIO_Pin == SEED_SENSOR_CHANNEL_3_PIN){
		_dropper_SeedSensorIRQ();
 8001bbe:	f7ff fb63 	bl	8001288 <_dropper_SeedSensorIRQ>
	}
	else if(GPIO_Pin == DROPPER_HOMING_SENSOR_PIN){
		_dropper_HomingSensorIRQ();
	}
}
 8001bc2:	e004      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_Pin == DROPPER_HOMING_SENSOR_PIN){
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_EXTI_Callback+0x32>
		_dropper_HomingSensorIRQ();
 8001bca:	f7ff fb69 	bl	80012a0 <_dropper_HomingSensorIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bdc:	f000 fb6d 	bl	80022ba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001be0:	f000 f816 	bl	8001c10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001be4:	f7ff fec2 	bl	800196c <MX_GPIO_Init>
	MX_TIM3_Init();
 8001be8:	f000 f9b4 	bl	8001f54 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001bec:	f000 fa90 	bl	8002110 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	_dropper_Init();
 8001bf0:	f7ff fb62 	bl	80012b8 <_dropper_Init>
	HAL_Delay(2000);
 8001bf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bf8:	f000 fbd0 	bl	800239c <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(_dropper_UART.msgReadyToRead) _dropper_execCmd();
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <main+0x34>)
 8001bfe:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0fa      	beq.n	8001bfc <main+0x24>
 8001c06:	f7ff fdc9 	bl	800179c <_dropper_execCmd>
 8001c0a:	e7f7      	b.n	8001bfc <main+0x24>
 8001c0c:	200001fc 	.word	0x200001fc

08001c10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b094      	sub	sp, #80	; 0x50
 8001c14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	2238      	movs	r2, #56	; 0x38
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fccc 	bl	80075bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 ff56 	bl	8002ae4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c46:	2302      	movs	r3, #2
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001c52:	2355      	movs	r3, #85	; 0x55
 8001c54:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fff0 	bl	8002c4c <HAL_RCC_OscConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001c72:	f000 f818 	bl	8001ca6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c76:	230f      	movs	r3, #15
 8001c78:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 faee 	bl	8003270 <HAL_RCC_ClockConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001c9a:	f000 f804 	bl	8001ca6 <Error_Handler>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	3750      	adds	r7, #80	; 0x50
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001caa:	b672      	cpsid	i
}
 8001cac:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cae:	e7fe      	b.n	8001cae <Error_Handler+0x8>

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ce6:	f000 ffa1 	bl	8002c2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <NMI_Handler+0x4>

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f000 fb0c 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_4_Pin);
 8001d50:	2004      	movs	r0, #4
 8001d52:	f000 feaf 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM3_IRQHandler+0x10>)
 8001d62:	f002 f9d7 	bl	8004114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200003f4 	.word	0x200003f4

08001d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <USART1_IRQHandler+0x10>)
 8001d76:	f003 fbf1 	bl	800555c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000440 	.word	0x20000440

08001d84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_3_Pin);
 8001d88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d8c:	f000 fe92 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_1_Pin);
 8001d90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d94:	f000 fe8e 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_2_Pin);
 8001d98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d9c:	f000 fe8a 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return 1;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_kill>:

int _kill(int pid, int sig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dbe:	f005 fbd3 	bl	8007568 <__errno>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2216      	movs	r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_exit>:

void _exit (int status)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffe7 	bl	8001db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de6:	e7fe      	b.n	8001de6 <_exit+0x12>

08001de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfa:	f3af 8000 	nop.w
 8001dfe:	4601      	mov	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
  }

  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf1      	blt.n	8001e34 <_write+0x12>
  }
  return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_close>:

int _close(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e82:	605a      	str	r2, [r3, #4]
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f005 fb38 	bl	8007568 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2001c000 	.word	0x2001c000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200003f0 	.word	0x200003f0
 8001f2c:	200004e8 	.word	0x200004e8

08001f30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	; 0x38
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f74:	463b      	mov	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001f88:	4a32      	ldr	r2, [pc, #200]	; (8002054 <MX_TIM3_Init+0x100>)
 8001f8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001f8e:	22a9      	movs	r2, #169	; 0xa9
 8001f90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001f9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fac:	4828      	ldr	r0, [pc, #160]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001fae:	f001 fdb7 	bl	8003b20 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001fb8:	f7ff fe75 	bl	8001ca6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4821      	ldr	r0, [pc, #132]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001fca:	f002 fb07 	bl	80045dc <HAL_TIM_ConfigClockSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fd4:	f7ff fe67 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fd8:	481d      	ldr	r0, [pc, #116]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001fda:	f001 fdf8 	bl	8003bce <HAL_TIM_PWM_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fe4:	f7ff fe5f 	bl	8001ca6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4816      	ldr	r0, [pc, #88]	; (8002050 <MX_TIM3_Init+0xfc>)
 8001ff8:	f003 f8b2 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002002:	f7ff fe50 	bl	8001ca6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002006:	2360      	movs	r3, #96	; 0x60
 8002008:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM3_Init+0xfc>)
 800201e:	f002 f9c9 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002028:	f7ff fe3d 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	2204      	movs	r2, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_TIM3_Init+0xfc>)
 8002034:	f002 f9be 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800203e:	f7ff fe32 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <MX_TIM3_Init+0xfc>)
 8002044:	f000 f82e 	bl	80020a4 <HAL_TIM_MspPostInit>

}
 8002048:	bf00      	nop
 800204a:	3738      	adds	r7, #56	; 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200003f4 	.word	0x200003f4
 8002054:	40000400 	.word	0x40000400

08002058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_TIM_Base_MspInit+0x44>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d113      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_TIM_Base_MspInit+0x48>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_TIM_Base_MspInit+0x48>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_TIM_Base_MspInit+0x48>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	201d      	movs	r0, #29
 8002088:	f000 fa85 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800208c:	201d      	movs	r0, #29
 800208e:	f000 fa9c 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40000400 	.word	0x40000400
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_TIM_MspPostInit+0x64>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d11c      	bne.n	8002100 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_TIM_MspPostInit+0x68>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_TIM_MspPostInit+0x68>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_TIM_MspPostInit+0x68>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fc:	f000 fb40 	bl	8002780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40000400 	.word	0x40000400
 800210c:	40021000 	.word	0x40021000

08002110 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002116:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <MX_USART1_UART_Init+0x94>)
 8002118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002158:	4811      	ldr	r0, [pc, #68]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800215a:	f003 f8d5 	bl	8005308 <HAL_UART_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002164:	f7ff fd9f 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002168:	2100      	movs	r1, #0
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800216c:	f005 f92d 	bl	80073ca <HAL_UARTEx_SetTxFifoThreshold>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002176:	f7ff fd96 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217a:	2100      	movs	r1, #0
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800217e:	f005 f962 	bl	8007446 <HAL_UARTEx_SetRxFifoThreshold>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002188:	f7ff fd8d 	bl	8001ca6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <MX_USART1_UART_Init+0x90>)
 800218e:	f005 f8e3 	bl	8007358 <HAL_UARTEx_DisableFifoMode>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002198:	f7ff fd85 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000440 	.word	0x20000440
 80021a4:	40013800 	.word	0x40013800

080021a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b09e      	sub	sp, #120	; 0x78
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2250      	movs	r2, #80	; 0x50
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f005 f9f7 	bl	80075bc <memset>
  if(uartHandle->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_UART_MspInit+0xb4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d13d      	bne.n	8002254 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d8:	2301      	movs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fa5f 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f0:	f7ff fd59 	bl	8001ca6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_UART_MspInit+0xb8>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_UART_MspInit+0xb8>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_UART_MspInit+0xb8>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_UART_MspInit+0xb8>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_UART_MspInit+0xb8>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_UART_MspInit+0xb8>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002224:	2330      	movs	r3, #48	; 0x30
 8002226:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002234:	2307      	movs	r3, #7
 8002236:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800223c:	4619      	mov	r1, r3
 800223e:	4809      	ldr	r0, [pc, #36]	; (8002264 <HAL_UART_MspInit+0xbc>)
 8002240:	f000 fa9e 	bl	8002780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2025      	movs	r0, #37	; 0x25
 800224a:	f000 f9a4 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800224e:	2025      	movs	r0, #37	; 0x25
 8002250:	f000 f9bb 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002254:	bf00      	nop
 8002256:	3778      	adds	r7, #120	; 0x78
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40013800 	.word	0x40013800
 8002260:	40021000 	.word	0x40021000
 8002264:	48000800 	.word	0x48000800

08002268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800226a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800226c:	f7ff fe60 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	; (80022a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <LoopForever+0xe>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	; (80022b4 <LoopForever+0x16>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002296:	f005 f96d 	bl	8007574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229a:	f7ff fc9d 	bl	8001bd8 <main>

0800229e <LoopForever>:

LoopForever:
    b LoopForever
 800229e:	e7fe      	b.n	800229e <LoopForever>
  ldr   r0, =_estack
 80022a0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80022ac:	0800a9d4 	.word	0x0800a9d4
  ldr r2, =_sbss
 80022b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80022b4:	200004e8 	.word	0x200004e8

080022b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_2_IRQHandler>

080022ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 f95b 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f80e 	bl	80022ec <HAL_InitTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	e001      	b.n	80022e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022dc:	f7ff fce8 	bl	8001cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e0:	79fb      	ldrb	r3, [r7, #7]

}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_InitTick+0x68>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d022      	beq.n	8002346 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_InitTick+0x6c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_InitTick+0x68>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800230c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f966 	bl	80025e6 <HAL_SYSTICK_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10f      	bne.n	8002340 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	d809      	bhi.n	800233a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002326:	2200      	movs	r2, #0
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	f04f 30ff 	mov.w	r0, #4294967295
 800232e:	f000 f932 	bl	8002596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_InitTick+0x70>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e007      	b.n	800234a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e004      	b.n	800234a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e001      	b.n	800234a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000008 	.word	0x20000008
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_IncTick+0x1c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_IncTick+0x20>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4413      	add	r3, r2
 800236e:	4a03      	ldr	r2, [pc, #12]	; (800237c <HAL_IncTick+0x1c>)
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	200004d4 	.word	0x200004d4
 8002380:	20000008 	.word	0x20000008

08002384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_GetTick+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	200004d4 	.word	0x200004d4

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff ffee 	bl	8002384 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d004      	beq.n	80023c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_Delay+0x40>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c0:	bf00      	nop
 80023c2:	f7ff ffdf 	bl	8002384 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d8f7      	bhi.n	80023c2 <HAL_Delay+0x26>
  {
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000008 	.word	0x20000008

080023e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
         );
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff29 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff40 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff90 	bl	80024d4 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5f 	bl	8002480 <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff33 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa4 	bl	800253c <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d005      	beq.n	8002622 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2204      	movs	r2, #4
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	e037      	b.n	8002692 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020e 	bic.w	r2, r2, #14
 8002630:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002640:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f003 021f 	and.w	r2, r3, #31
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800266e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002686:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002690:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d00d      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e047      	b.n	8002774 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 020e 	bic.w	r2, r2, #14
 80026f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002730:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002748:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002752:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
    }
  }
  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800278e:	e15a      	b.n	8002a46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 814c 	beq.w	8002a40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d005      	beq.n	80027c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d130      	bne.n	8002822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027f6:	2201      	movs	r2, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0201 	and.w	r2, r3, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b03      	cmp	r3, #3
 800282c:	d017      	beq.n	800285e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d123      	bne.n	80028b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80a6 	beq.w	8002a40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f4:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 80028f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f8:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002900:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290c:	4a56      	ldr	r2, [pc, #344]	; (8002a68 <HAL_GPIO_Init+0x2e8>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002936:	d01f      	beq.n	8002978 <HAL_GPIO_Init+0x1f8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_GPIO_Init+0x2ec>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d019      	beq.n	8002974 <HAL_GPIO_Init+0x1f4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x2f0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x1f0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x2f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1ec>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_GPIO_Init+0x2f8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1e8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_GPIO_Init+0x2fc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1e4>
 8002960:	2305      	movs	r3, #5
 8002962:	e00a      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002964:	2306      	movs	r3, #6
 8002966:	e008      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002968:	2304      	movs	r3, #4
 800296a:	e006      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 800296c:	2303      	movs	r3, #3
 800296e:	e004      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002970:	2302      	movs	r3, #2
 8002972:	e002      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002978:	2300      	movs	r3, #0
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	f002 0203 	and.w	r2, r2, #3
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4093      	lsls	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_GPIO_Init+0x2e8>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_GPIO_Init+0x300>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029bc:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e6:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a10:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <HAL_GPIO_Init+0x300>)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_GPIO_Init+0x300>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a3a:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_GPIO_Init+0x300>)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f ae9d 	bne.w	8002790 <HAL_GPIO_Init+0x10>
  }
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	48000400 	.word	0x48000400
 8002a70:	48000800 	.word	0x48000800
 8002a74:	48000c00 	.word	0x48000c00
 8002a78:	48001000 	.word	0x48001000
 8002a7c:	48001400 	.word	0x48001400
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aca:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f862 	bl	8001b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d141      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002af2:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afe:	d131      	bne.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b00:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b06:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b10:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b18:	4a41      	ldr	r2, [pc, #260]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2232      	movs	r2, #50	; 0x32
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	4a3f      	ldr	r2, [pc, #252]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0c9b      	lsrs	r3, r3, #18
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b36:	e002      	b.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4a:	d102      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f2      	bne.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5e:	d158      	bne.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e057      	b.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b64:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6a:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b74:	e04d      	b.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d141      	bne.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d131      	bne.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b92:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba4:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002baa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2232      	movs	r2, #50	; 0x32
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9b      	lsrs	r3, r3, #18
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc2:	e002      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d102      	bne.n	8002bde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f2      	bne.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	d112      	bne.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e011      	b.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c00:	e007      	b.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40007000 	.word	0x40007000
 8002c24:	20000000 	.word	0x20000000
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3a:	6093      	str	r3, [r2, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40007000 	.word	0x40007000

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e2fe      	b.n	800325c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d075      	beq.n	8002d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b97      	ldr	r3, [pc, #604]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b94      	ldr	r3, [pc, #592]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3e>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d002      	beq.n	8002c90 <HAL_RCC_OscConfig+0x44>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	4b8d      	ldr	r3, [pc, #564]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x108>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d157      	bne.n	8002d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e2d9      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x74>
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a84      	ldr	r2, [pc, #528]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01d      	b.n	8002cfc <HAL_RCC_OscConfig+0xb0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x98>
 8002cca:	4b7f      	ldr	r3, [pc, #508]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7e      	ldr	r2, [pc, #504]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7b      	ldr	r2, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0xb0>
 8002ce4:	4b78      	ldr	r3, [pc, #480]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a77      	ldr	r2, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b75      	ldr	r3, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a74      	ldr	r2, [pc, #464]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7ff fb3e 	bl	8002384 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff fb3a 	bl	8002384 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e29e      	b.n	800325c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xc0>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7ff fb2a 	bl	8002384 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7ff fb26 	bl	8002384 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e28a      	b.n	800325c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d46:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0xe8>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d075      	beq.n	8002e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d62:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d6c:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d102      	bne.n	8002d82 <HAL_RCC_OscConfig+0x136>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d002      	beq.n	8002d88 <HAL_RCC_OscConfig+0x13c>
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11f      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_OscConfig+0x154>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e25d      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	4946      	ldr	r1, [pc, #280]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002db4:	4b45      	ldr	r3, [pc, #276]	; (8002ecc <HAL_RCC_OscConfig+0x280>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa97 	bl	80022ec <HAL_InitTick>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d043      	beq.n	8002e4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e249      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d023      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a3c      	ldr	r2, [pc, #240]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fad2 	bl	8002384 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7ff face 	bl	8002384 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e232      	b.n	800325c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
 8002e16:	e01a      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e18:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7ff faae 	bl	8002384 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7ff faaa 	bl	8002384 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e20e      	b.n	800325c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1e0>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d041      	beq.n	8002ede <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e68:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7ff fa87 	bl	8002384 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7ff fa83 	bl	8002384 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1e7      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ef      	beq.n	8002e7a <HAL_RCC_OscConfig+0x22e>
 8002e9a:	e020      	b.n	8002ede <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7ff fa6a 	bl	8002384 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb2:	e00d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7ff fa66 	bl	8002384 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d906      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1ca      	b.n	800325c <HAL_RCC_OscConfig+0x610>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed0:	4b8c      	ldr	r3, [pc, #560]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ea      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a6 	beq.w	8003038 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ef0:	4b84      	ldr	r3, [pc, #528]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_OscConfig+0x2b4>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x2b6>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4b7f      	ldr	r3, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	4a7e      	ldr	r2, [pc, #504]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6593      	str	r3, [r2, #88]	; 0x58
 8002f12:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f22:	4b79      	ldr	r3, [pc, #484]	; (8003108 <HAL_RCC_OscConfig+0x4bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2e:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x4bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x4bc>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7ff fa23 	bl	8002384 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7ff fa1f 	bl	8002384 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e183      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f54:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x4bc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d108      	bne.n	8002f7a <HAL_RCC_OscConfig+0x32e>
 8002f68:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f78:	e024      	b.n	8002fc4 <HAL_RCC_OscConfig+0x378>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d110      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x358>
 8002f82:	4b60      	ldr	r3, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	4a5e      	ldr	r2, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f92:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	4a5a      	ldr	r2, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa2:	e00f      	b.n	8002fc4 <HAL_RCC_OscConfig+0x378>
 8002fa4:	4b57      	ldr	r3, [pc, #348]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	4a56      	ldr	r2, [pc, #344]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d016      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff f9da 	bl	8002384 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f9d6 	bl	8002384 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e138      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fea:	4b46      	ldr	r3, [pc, #280]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ed      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x388>
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f9c3 	bl	8002384 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7ff f9bf 	bl	8002384 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e121      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003018:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ed      	bne.n	8003002 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03c      	beq.n	80030be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7ff f992 	bl	8002384 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003064:	f7ff f98e 	bl	8002384 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0f2      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ef      	beq.n	8003064 <HAL_RCC_OscConfig+0x418>
 8003084:	e01b      	b.n	80030be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7ff f975 	bl	8002384 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800309e:	f7ff f971 	bl	8002384 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0d5      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 80030b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ef      	bne.n	800309e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80c9 	beq.w	800325a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	f000 8083 	beq.w	80031dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d15e      	bne.n	800319c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_RCC_OscConfig+0x4b8>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7ff f94b 	bl	8002384 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	e00c      	b.n	800310c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7ff f947 	bl	8002384 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d905      	bls.n	800310c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0ab      	b.n	800325c <HAL_RCC_OscConfig+0x610>
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310c:	4b55      	ldr	r3, [pc, #340]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ec      	bne.n	80030f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	4b52      	ldr	r3, [pc, #328]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	4b52      	ldr	r3, [pc, #328]	; (8003268 <HAL_RCC_OscConfig+0x61c>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6a11      	ldr	r1, [r2, #32]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003128:	3a01      	subs	r2, #1
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003132:	0212      	lsls	r2, r2, #8
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800313a:	0852      	lsrs	r2, r2, #1
 800313c:	3a01      	subs	r2, #1
 800313e:	0552      	lsls	r2, r2, #21
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003146:	0852      	lsrs	r2, r2, #1
 8003148:	3a01      	subs	r2, #1
 800314a:	0652      	lsls	r2, r2, #25
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003152:	06d2      	lsls	r2, r2, #27
 8003154:	430a      	orrs	r2, r1
 8003156:	4943      	ldr	r1, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 8003158:	4313      	orrs	r3, r2
 800315a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a40      	ldr	r2, [pc, #256]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003168:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a3d      	ldr	r2, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 800316e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003172:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7ff f906 	bl	8002384 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7ff f902 	bl	8002384 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e066      	b.n	800325c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318e:	4b35      	ldr	r3, [pc, #212]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x530>
 800319a:	e05e      	b.n	800325a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff f8ec 	bl	8002384 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7ff f8e8 	bl	8002384 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04c      	b.n	800325c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c2:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031ce:	4b25      	ldr	r3, [pc, #148]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4924      	ldr	r1, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_OscConfig+0x620>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	60cb      	str	r3, [r1, #12]
 80031da:	e03e      	b.n	800325a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e039      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_RCC_OscConfig+0x618>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d12c      	bne.n	8003256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	3b01      	subs	r3, #1
 8003208:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d123      	bne.n	8003256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11b      	bne.n	8003256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d113      	bne.n	8003256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d109      	bne.n	8003256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	019f800c 	.word	0x019f800c
 800326c:	feeefffc 	.word	0xfeeefffc

08003270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e11e      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d910      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b8e      	ldr	r3, [pc, #568]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 020f 	bic.w	r2, r3, #15
 800329e:	498c      	ldr	r1, [pc, #560]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e106      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d073      	beq.n	80033ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d129      	bne.n	8003320 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032cc:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0f4      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032dc:	f000 f99e 	bl	800361c <RCC_GetSysClockFreqFromPLLSource>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4a7c      	ldr	r2, [pc, #496]	; (80034d8 <HAL_RCC_ClockConfig+0x268>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d93f      	bls.n	800336a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ea:	4b7a      	ldr	r3, [pc, #488]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d033      	beq.n	800336a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003306:	2b00      	cmp	r3, #0
 8003308:	d12f      	bne.n	800336a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330a:	4b72      	ldr	r3, [pc, #456]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003312:	4a70      	ldr	r2, [pc, #448]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e024      	b.n	800336a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d107      	bne.n	8003338 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003328:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0c6      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0be      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003348:	f000 f8ce 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 800334c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4a61      	ldr	r2, [pc, #388]	; (80034d8 <HAL_RCC_ClockConfig+0x268>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d909      	bls.n	800336a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	4a5d      	ldr	r2, [pc, #372]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003364:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4957      	ldr	r1, [pc, #348]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337c:	f7ff f802 	bl	8002384 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fe fffe 	bl	8002384 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e095      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033dc:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033e4:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4936      	ldr	r1, [pc, #216]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
 80033fe:	e008      	b.n	8003412 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d105      	bne.n	8003412 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800340c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003410:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d21d      	bcs.n	800345c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 020f 	bic.w	r2, r3, #15
 8003428:	4929      	ldr	r1, [pc, #164]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003430:	f7fe ffa8 	bl	8002384 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe ffa4 	bl	8002384 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e03b      	b.n	80034c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_ClockConfig+0x260>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d1ed      	bne.n	8003438 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4917      	ldr	r1, [pc, #92]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490f      	ldr	r1, [pc, #60]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349a:	f000 f825 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_RCC_ClockConfig+0x264>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490c      	ldr	r1, [pc, #48]	; (80034dc <HAL_RCC_ClockConfig+0x26c>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x270>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe ff14 	bl	80022ec <HAL_InitTick>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	04c4b400 	.word	0x04c4b400
 80034dc:	0800a558 	.word	0x0800a558
 80034e0:	20000000 	.word	0x20000000
 80034e4:	20000004 	.word	0x20000004

080034e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034ee:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d102      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	e047      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003500:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b08      	cmp	r3, #8
 800350a:	d102      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800350c:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e03e      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003512:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d136      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3301      	adds	r3, #1
 8003534:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d10c      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003546:	68d2      	ldr	r2, [r2, #12]
 8003548:	0a12      	lsrs	r2, r2, #8
 800354a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	617b      	str	r3, [r7, #20]
      break;
 8003554:	e00c      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	0a12      	lsrs	r2, r2, #8
 8003564:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
      break;
 800356e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0e5b      	lsrs	r3, r3, #25
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e001      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003590:	693b      	ldr	r3, [r7, #16]
}
 8003592:	4618      	mov	r0, r3
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	016e3600 	.word	0x016e3600

080035ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	0800a568 	.word	0x0800a568

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035f4:	f7ff ffda 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0adb      	lsrs	r3, r3, #11
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	0800a568 	.word	0x0800a568

0800361c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d10c      	bne.n	800365a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003640:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800364a:	68d2      	ldr	r2, [r2, #12]
 800364c:	0a12      	lsrs	r2, r2, #8
 800364e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
    break;
 8003658:	e00c      	b.n	8003674 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	0a12      	lsrs	r2, r2, #8
 8003668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
    break;
 8003672:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	0e5b      	lsrs	r3, r3, #25
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	3301      	adds	r3, #1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800368e:	687b      	ldr	r3, [r7, #4]
}
 8003690:	4618      	mov	r0, r3
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000
 80036a0:	016e3600 	.word	0x016e3600
 80036a4:	00f42400 	.word	0x00f42400

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b0:	2300      	movs	r3, #0
 80036b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b4:	2300      	movs	r3, #0
 80036b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8098 	beq.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	4a3f      	ldr	r2, [pc, #252]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6593      	str	r3, [r2, #88]	; 0x58
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	2301      	movs	r3, #1
 80036f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f2:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a39      	ldr	r2, [pc, #228]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036fe:	f7fe fe41 	bl	8002384 <HAL_GetTick>
 8003702:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003704:	e009      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fe fe3d 	bl	8002384 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d902      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	74fb      	strb	r3, [r7, #19]
        break;
 8003718:	e005      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ef      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d159      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01e      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	d019      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fe fdfd 	bl	8002384 <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378c:	e00b      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe fdf9 	bl	8002384 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d902      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	74fb      	strb	r3, [r7, #19]
            break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ec      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037d0:	e008      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	74bb      	strb	r3, [r7, #18]
 80037d6:	e005      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e4:	7c7b      	ldrb	r3, [r7, #17]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ea:	4ba7      	ldr	r3, [pc, #668]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	4aa6      	ldr	r2, [pc, #664]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003802:	4ba1      	ldr	r3, [pc, #644]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0203 	bic.w	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	499d      	ldr	r1, [pc, #628]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003824:	4b98      	ldr	r3, [pc, #608]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 020c 	bic.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4995      	ldr	r1, [pc, #596]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003846:	4b90      	ldr	r3, [pc, #576]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	498c      	ldr	r1, [pc, #560]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003868:	4b87      	ldr	r3, [pc, #540]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	4984      	ldr	r1, [pc, #528]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800388a:	4b7f      	ldr	r3, [pc, #508]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	497b      	ldr	r1, [pc, #492]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ac:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	4973      	ldr	r1, [pc, #460]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ce:	4b6e      	ldr	r3, [pc, #440]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	496a      	ldr	r1, [pc, #424]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4962      	ldr	r1, [pc, #392]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	4959      	ldr	r1, [pc, #356]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003934:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	4951      	ldr	r1, [pc, #324]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4948      	ldr	r1, [pc, #288]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003974:	d105      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003980:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398a:	2b00      	cmp	r3, #0
 800398c:	d015      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800398e:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	493a      	ldr	r1, [pc, #232]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ac:	d105      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4a35      	ldr	r2, [pc, #212]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d015      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039c6:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	492c      	ldr	r1, [pc, #176]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d105      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d015      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	491e      	ldr	r1, [pc, #120]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a28:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d015      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a36:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	4910      	ldr	r1, [pc, #64]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a54:	d105      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4902      	ldr	r1, [pc, #8]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	4918      	ldr	r1, [pc, #96]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e049      	b.n	8003bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fe fa86 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 fe68 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e049      	b.n	8003c74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f841 	bl	8003c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 fe11 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start_IT+0x28>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e03c      	b.n	8003d32 <HAL_TIM_PWM_Start_IT+0xa2>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d109      	bne.n	8003cd2 <HAL_TIM_PWM_Start_IT+0x42>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e02f      	b.n	8003d32 <HAL_TIM_PWM_Start_IT+0xa2>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d109      	bne.n	8003cec <HAL_TIM_PWM_Start_IT+0x5c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e022      	b.n	8003d32 <HAL_TIM_PWM_Start_IT+0xa2>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d109      	bne.n	8003d06 <HAL_TIM_PWM_Start_IT+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e015      	b.n	8003d32 <HAL_TIM_PWM_Start_IT+0xa2>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d109      	bne.n	8003d20 <HAL_TIM_PWM_Start_IT+0x90>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e008      	b.n	8003d32 <HAL_TIM_PWM_Start_IT+0xa2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0ec      	b.n	8003f14 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start_IT+0xba>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	e023      	b.n	8003d92 <HAL_TIM_PWM_Start_IT+0x102>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_PWM_Start_IT+0xca>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	e01b      	b.n	8003d92 <HAL_TIM_PWM_Start_IT+0x102>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_PWM_Start_IT+0xda>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	e013      	b.n	8003d92 <HAL_TIM_PWM_Start_IT+0x102>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_PWM_Start_IT+0xea>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_PWM_Start_IT+0x102>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_PWM_Start_IT+0xfa>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_PWM_Start_IT+0x102>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	d841      	bhi.n	8003e1c <HAL_TIM_PWM_Start_IT+0x18c>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <HAL_TIM_PWM_Start_IT+0x110>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003e1d 	.word	0x08003e1d
 8003da8:	08003e1d 	.word	0x08003e1d
 8003dac:	08003e1d 	.word	0x08003e1d
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003e1d 	.word	0x08003e1d
 8003db8:	08003e1d 	.word	0x08003e1d
 8003dbc:	08003e1d 	.word	0x08003e1d
 8003dc0:	08003df9 	.word	0x08003df9
 8003dc4:	08003e1d 	.word	0x08003e1d
 8003dc8:	08003e1d 	.word	0x08003e1d
 8003dcc:	08003e1d 	.word	0x08003e1d
 8003dd0:	08003e0b 	.word	0x08003e0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0202 	orr.w	r2, r2, #2
 8003de2:	60da      	str	r2, [r3, #12]
      break;
 8003de4:	e01d      	b.n	8003e22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0204 	orr.w	r2, r2, #4
 8003df4:	60da      	str	r2, [r3, #12]
      break;
 8003df6:	e014      	b.n	8003e22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0208 	orr.w	r2, r2, #8
 8003e06:	60da      	str	r2, [r3, #12]
      break;
 8003e08:	e00b      	b.n	8003e22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0210 	orr.w	r2, r2, #16
 8003e18:	60da      	str	r2, [r3, #12]
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d174      	bne.n	8003f12 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	6839      	ldr	r1, [r7, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f96f 	bl	8005114 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a38      	ldr	r2, [pc, #224]	; (8003f1c <HAL_TIM_PWM_Start_IT+0x28c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a36      	ldr	r2, [pc, #216]	; (8003f20 <HAL_TIM_PWM_Start_IT+0x290>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a35      	ldr	r2, [pc, #212]	; (8003f24 <HAL_TIM_PWM_Start_IT+0x294>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a33      	ldr	r2, [pc, #204]	; (8003f28 <HAL_TIM_PWM_Start_IT+0x298>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <HAL_TIM_PWM_Start_IT+0x29c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIM_PWM_Start_IT+0x1e2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_PWM_Start_IT+0x1e6>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_PWM_Start_IT+0x1e8>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_TIM_PWM_Start_IT+0x28c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_TIM_PWM_Start_IT+0x242>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d018      	beq.n	8003ed2 <HAL_TIM_PWM_Start_IT+0x242>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_TIM_PWM_Start_IT+0x242>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_TIM_PWM_Start_IT+0x242>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_TIM_PWM_Start_IT+0x290>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_TIM_PWM_Start_IT+0x242>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIM_PWM_Start_IT+0x294>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIM_PWM_Start_IT+0x242>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d115      	bne.n	8003efe <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <HAL_TIM_PWM_Start_IT+0x2ac>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d015      	beq.n	8003f10 <HAL_TIM_PWM_Start_IT+0x280>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d011      	beq.n	8003f10 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	e008      	b.n	8003f10 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e000      	b.n	8003f12 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40013400 	.word	0x40013400
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800
 8003f30:	40015000 	.word	0x40015000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d841      	bhi.n	8003fd8 <HAL_TIM_PWM_Stop_IT+0x98>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08003fd9 	.word	0x08003fd9
 8003f64:	08003fd9 	.word	0x08003fd9
 8003f68:	08003fd9 	.word	0x08003fd9
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003fd9 	.word	0x08003fd9
 8003f78:	08003fd9 	.word	0x08003fd9
 8003f7c:	08003fb5 	.word	0x08003fb5
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003fd9 	.word	0x08003fd9
 8003f8c:	08003fc7 	.word	0x08003fc7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0202 	bic.w	r2, r2, #2
 8003f9e:	60da      	str	r2, [r3, #12]
      break;
 8003fa0:	e01d      	b.n	8003fde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0204 	bic.w	r2, r2, #4
 8003fb0:	60da      	str	r2, [r3, #12]
      break;
 8003fb2:	e014      	b.n	8003fde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0208 	bic.w	r2, r2, #8
 8003fc2:	60da      	str	r2, [r3, #12]
      break;
 8003fc4:	e00b      	b.n	8003fde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0210 	bic.w	r2, r2, #16
 8003fd4:	60da      	str	r2, [r3, #12]
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8086 	bne.w	80040f2 <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f890 	bl	8005114 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a40      	ldr	r2, [pc, #256]	; (80040fc <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_TIM_PWM_Stop_IT+0xf0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIM_PWM_Stop_IT+0xf0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3a      	ldr	r2, [pc, #232]	; (800410c <HAL_TIM_PWM_Stop_IT+0x1cc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a39      	ldr	r2, [pc, #228]	; (8004110 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_TIM_PWM_Stop_IT+0xf4>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_TIM_PWM_Stop_IT+0xf6>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d017      	beq.n	800406a <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	f241 1311 	movw	r3, #4369	; 0x1111
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_TIM_PWM_Stop_IT+0x12a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	f244 4344 	movw	r3, #17476	; 0x4444
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_TIM_PWM_Stop_IT+0x12a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	f241 1311 	movw	r3, #4369	; 0x1111
 8004074:	4013      	ands	r3, r2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <HAL_TIM_PWM_Stop_IT+0x15a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	f244 4344 	movw	r3, #17476	; 0x4444
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_TIM_PWM_Stop_IT+0x15a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Stop_IT+0x16a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	e023      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Stop_IT+0x17a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b8:	e01b      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d104      	bne.n	80040ca <HAL_TIM_PWM_Stop_IT+0x18a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c8:	e013      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	d104      	bne.n	80040da <HAL_TIM_PWM_Stop_IT+0x19a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d8:	e00b      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d104      	bne.n	80040ea <HAL_TIM_PWM_Stop_IT+0x1aa>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	e003      	b.n	80040f2 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800
 8004110:	40015000 	.word	0x40015000

08004114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d020      	beq.n	8004178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01b      	beq.n	8004178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0202 	mvn.w	r2, #2
 8004148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fb54 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fb46 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fd fd03 	bl	8001b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0204 	mvn.w	r2, #4
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fb2e 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fb20 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fd fcdd 	bl	8001b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d020      	beq.n	8004210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0208 	mvn.w	r2, #8
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fb08 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fafa 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fd fcb7 	bl	8001b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d020      	beq.n	800425c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01b      	beq.n	800425c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0210 	mvn.w	r2, #16
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2208      	movs	r2, #8
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fae2 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fad4 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fd fc91 	bl	8001b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0201 	mvn.w	r2, #1
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fab2 	bl	80047e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00c      	beq.n	80042ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fff1 	bl	8005290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 ffe9 	bl	80052a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fa95 	bl	8004820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0220 	mvn.w	r2, #32
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 ffb1 	bl	800527c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 ffbd 	bl	80052b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 ffb5 	bl	80052cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00c      	beq.n	8004386 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 ffad 	bl	80052e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80043a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 ffa5 	bl	80052f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0ff      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b14      	cmp	r3, #20
 80043de:	f200 80f0 	bhi.w	80045c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080045c3 	.word	0x080045c3
 80043f0:	080045c3 	.word	0x080045c3
 80043f4:	080045c3 	.word	0x080045c3
 80043f8:	0800447d 	.word	0x0800447d
 80043fc:	080045c3 	.word	0x080045c3
 8004400:	080045c3 	.word	0x080045c3
 8004404:	080045c3 	.word	0x080045c3
 8004408:	080044bf 	.word	0x080044bf
 800440c:	080045c3 	.word	0x080045c3
 8004410:	080045c3 	.word	0x080045c3
 8004414:	080045c3 	.word	0x080045c3
 8004418:	080044ff 	.word	0x080044ff
 800441c:	080045c3 	.word	0x080045c3
 8004420:	080045c3 	.word	0x080045c3
 8004424:	080045c3 	.word	0x080045c3
 8004428:	08004541 	.word	0x08004541
 800442c:	080045c3 	.word	0x080045c3
 8004430:	080045c3 	.word	0x080045c3
 8004434:	080045c3 	.word	0x080045c3
 8004438:	08004581 	.word	0x08004581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 faa0 	bl	8004988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0204 	bic.w	r2, r2, #4
 8004466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6999      	ldr	r1, [r3, #24]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	619a      	str	r2, [r3, #24]
      break;
 800447a:	e0a5      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fb1a 	bl	8004abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6999      	ldr	r1, [r3, #24]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	619a      	str	r2, [r3, #24]
      break;
 80044bc:	e084      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fb8d 	bl	8004be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0204 	bic.w	r2, r2, #4
 80044e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	61da      	str	r2, [r3, #28]
      break;
 80044fc:	e064      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fbff 	bl	8004d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	021a      	lsls	r2, r3, #8
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	61da      	str	r2, [r3, #28]
      break;
 800453e:	e043      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fc72 	bl	8004e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0208 	orr.w	r2, r2, #8
 800455a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800457e:	e023      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fcbc 	bl	8004f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045c0:	e002      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
      break;
 80045c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_ConfigClockSource+0x1c>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0e6      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x1ea>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800461a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a67      	ldr	r2, [pc, #412]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	f000 80b1 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1be>
 8004638:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f200 80b6 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 8004640:	4a64      	ldr	r2, [pc, #400]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f000 80a9 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1be>
 8004648:	4a62      	ldr	r2, [pc, #392]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	f200 80ae 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 8004650:	4a61      	ldr	r2, [pc, #388]	; (80047d8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f000 80a1 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1be>
 8004658:	4a5f      	ldr	r2, [pc, #380]	; (80047d8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f200 80a6 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 8004660:	4a5e      	ldr	r2, [pc, #376]	; (80047dc <HAL_TIM_ConfigClockSource+0x200>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f000 8099 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1be>
 8004668:	4a5c      	ldr	r2, [pc, #368]	; (80047dc <HAL_TIM_ConfigClockSource+0x200>)
 800466a:	4293      	cmp	r3, r2
 800466c:	f200 809e 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 8004670:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_TIM_ConfigClockSource+0x204>)
 8004672:	4293      	cmp	r3, r2
 8004674:	f000 8091 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1be>
 8004678:	4a59      	ldr	r2, [pc, #356]	; (80047e0 <HAL_TIM_ConfigClockSource+0x204>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f200 8096 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 8004680:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004684:	f000 8089 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1be>
 8004688:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800468c:	f200 808e 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d03e      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x138>
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	f200 8087 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046aa:	d87f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d01a      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x10a>
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d87b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d050      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x17e>
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d877      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d03c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x15e>
 80046c0:	2b50      	cmp	r3, #80	; 0x50
 80046c2:	d873      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d058      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x19e>
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d86f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d064      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1be>
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d86b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d060      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1be>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d867      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1be>
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d05a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1be>
 80046e4:	e062      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f000 fced 	bl	80050d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	609a      	str	r2, [r3, #8]
      break;
 8004712:	e04f      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f000 fcd6 	bl	80050d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004736:	609a      	str	r2, [r3, #8]
      break;
 8004738:	e03c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 fc48 	bl	8004fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2150      	movs	r1, #80	; 0x50
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fca1 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004758:	e02c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 fc67 	bl	800503a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2160      	movs	r1, #96	; 0x60
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fc91 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004778:	e01c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	f000 fc28 	bl	8004fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fc81 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004798:	e00c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f000 fc78 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 80047aa:	e003      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
      break;
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80047b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	00100070 	.word	0x00100070
 80047d4:	00100050 	.word	0x00100050
 80047d8:	00100040 	.word	0x00100040
 80047dc:	00100030 	.word	0x00100030
 80047e0:	00100020 	.word	0x00100020

080047e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a48      	ldr	r2, [pc, #288]	; (8004968 <TIM_Base_SetConfig+0x134>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004852:	d00f      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a45      	ldr	r2, [pc, #276]	; (800496c <TIM_Base_SetConfig+0x138>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a44      	ldr	r2, [pc, #272]	; (8004970 <TIM_Base_SetConfig+0x13c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a43      	ldr	r2, [pc, #268]	; (8004974 <TIM_Base_SetConfig+0x140>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a42      	ldr	r2, [pc, #264]	; (8004978 <TIM_Base_SetConfig+0x144>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a37      	ldr	r2, [pc, #220]	; (8004968 <TIM_Base_SetConfig+0x134>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01f      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a34      	ldr	r2, [pc, #208]	; (800496c <TIM_Base_SetConfig+0x138>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <TIM_Base_SetConfig+0x13c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a32      	ldr	r2, [pc, #200]	; (8004974 <TIM_Base_SetConfig+0x140>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a32      	ldr	r2, [pc, #200]	; (800497c <TIM_Base_SetConfig+0x148>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a31      	ldr	r2, [pc, #196]	; (8004980 <TIM_Base_SetConfig+0x14c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <TIM_Base_SetConfig+0x150>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2b      	ldr	r2, [pc, #172]	; (8004978 <TIM_Base_SetConfig+0x144>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <TIM_Base_SetConfig+0x134>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <TIM_Base_SetConfig+0x100>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a19      	ldr	r2, [pc, #100]	; (8004974 <TIM_Base_SetConfig+0x140>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0x100>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a19      	ldr	r2, [pc, #100]	; (800497c <TIM_Base_SetConfig+0x148>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0x100>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a18      	ldr	r2, [pc, #96]	; (8004980 <TIM_Base_SetConfig+0x14c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0x100>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <TIM_Base_SetConfig+0x150>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0x100>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <TIM_Base_SetConfig+0x144>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d103      	bne.n	800493c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f023 0201 	bic.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	611a      	str	r2, [r3, #16]
  }
}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40013400 	.word	0x40013400
 8004978:	40015000 	.word	0x40015000
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f023 0201 	bic.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <TIM_OC1_SetConfig+0x11c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <TIM_OC1_SetConfig+0x88>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <TIM_OC1_SetConfig+0x120>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_OC1_SetConfig+0x88>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2e      	ldr	r2, [pc, #184]	; (8004aac <TIM_OC1_SetConfig+0x124>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_OC1_SetConfig+0x88>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a2d      	ldr	r2, [pc, #180]	; (8004ab0 <TIM_OC1_SetConfig+0x128>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_OC1_SetConfig+0x88>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <TIM_OC1_SetConfig+0x12c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC1_SetConfig+0x88>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <TIM_OC1_SetConfig+0x130>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10c      	bne.n	8004a2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0308 	bic.w	r3, r3, #8
 8004a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f023 0304 	bic.w	r3, r3, #4
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <TIM_OC1_SetConfig+0x11c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_OC1_SetConfig+0xd2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <TIM_OC1_SetConfig+0x120>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_OC1_SetConfig+0xd2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <TIM_OC1_SetConfig+0x124>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_OC1_SetConfig+0xd2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <TIM_OC1_SetConfig+0x128>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_OC1_SetConfig+0xd2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <TIM_OC1_SetConfig+0x12c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC1_SetConfig+0xd2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <TIM_OC1_SetConfig+0x130>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d111      	bne.n	8004a7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800
 8004ab8:	40015000 	.word	0x40015000

08004abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0210 	bic.w	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0320 	bic.w	r3, r3, #32
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <TIM_OC2_SetConfig+0x110>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_OC2_SetConfig+0x74>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2b      	ldr	r2, [pc, #172]	; (8004bd0 <TIM_OC2_SetConfig+0x114>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC2_SetConfig+0x74>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <TIM_OC2_SetConfig+0x118>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10d      	bne.n	8004b4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <TIM_OC2_SetConfig+0x110>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <TIM_OC2_SetConfig+0xc0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <TIM_OC2_SetConfig+0x114>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_OC2_SetConfig+0xc0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <TIM_OC2_SetConfig+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_OC2_SetConfig+0xc0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <TIM_OC2_SetConfig+0x120>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_OC2_SetConfig+0xc0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <TIM_OC2_SetConfig+0x124>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_OC2_SetConfig+0xc0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <TIM_OC2_SetConfig+0x118>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d113      	bne.n	8004ba4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40015000 	.word	0x40015000
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <TIM_OC3_SetConfig+0x10c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_OC3_SetConfig+0x72>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <TIM_OC3_SetConfig+0x110>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC3_SetConfig+0x72>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <TIM_OC3_SetConfig+0x114>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10d      	bne.n	8004c72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <TIM_OC3_SetConfig+0x10c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_OC3_SetConfig+0xbe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <TIM_OC3_SetConfig+0x110>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_OC3_SetConfig+0xbe>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <TIM_OC3_SetConfig+0x118>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_OC3_SetConfig+0xbe>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <TIM_OC3_SetConfig+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_OC3_SetConfig+0xbe>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <TIM_OC3_SetConfig+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_OC3_SetConfig+0xbe>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a16      	ldr	r2, [pc, #88]	; (8004cf8 <TIM_OC3_SetConfig+0x114>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d113      	bne.n	8004cca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	621a      	str	r2, [r3, #32]
}
 8004ce4:	bf00      	nop
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40013400 	.word	0x40013400
 8004cf8:	40015000 	.word	0x40015000
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800

08004d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	031b      	lsls	r3, r3, #12
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <TIM_OC4_SetConfig+0x110>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_OC4_SetConfig+0x74>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <TIM_OC4_SetConfig+0x114>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_OC4_SetConfig+0x74>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <TIM_OC4_SetConfig+0x118>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d10d      	bne.n	8004d98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <TIM_OC4_SetConfig+0x110>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <TIM_OC4_SetConfig+0xc0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <TIM_OC4_SetConfig+0x114>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00f      	beq.n	8004dc8 <TIM_OC4_SetConfig+0xc0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <TIM_OC4_SetConfig+0x11c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <TIM_OC4_SetConfig+0xc0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_OC4_SetConfig+0x120>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_OC4_SetConfig+0xc0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_OC4_SetConfig+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC4_SetConfig+0xc0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <TIM_OC4_SetConfig+0x118>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d113      	bne.n	8004df0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dd6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	019b      	lsls	r3, r3, #6
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40015000 	.word	0x40015000
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800

08004e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a19      	ldr	r2, [pc, #100]	; (8004eec <TIM_OC5_SetConfig+0xbc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_OC5_SetConfig+0x82>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a18      	ldr	r2, [pc, #96]	; (8004ef0 <TIM_OC5_SetConfig+0xc0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_OC5_SetConfig+0x82>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <TIM_OC5_SetConfig+0xc4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_OC5_SetConfig+0x82>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <TIM_OC5_SetConfig+0xc8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_OC5_SetConfig+0x82>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <TIM_OC5_SetConfig+0xcc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC5_SetConfig+0x82>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <TIM_OC5_SetConfig+0xd0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d109      	bne.n	8004ec6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800
 8004f00:	40015000 	.word	0x40015000

08004f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	051b      	lsls	r3, r3, #20
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <TIM_OC6_SetConfig+0xc0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <TIM_OC6_SetConfig+0x84>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <TIM_OC6_SetConfig+0xc4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_OC6_SetConfig+0x84>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <TIM_OC6_SetConfig+0xc8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_OC6_SetConfig+0x84>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <TIM_OC6_SetConfig+0xcc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_OC6_SetConfig+0x84>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <TIM_OC6_SetConfig+0xd0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC6_SetConfig+0x84>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <TIM_OC6_SetConfig+0xd4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d109      	bne.n	8004f9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	029b      	lsls	r3, r3, #10
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800
 8004fd8:	40015000 	.word	0x40015000

08004fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 030a 	bic.w	r3, r3, #10
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f023 0210 	bic.w	r2, r3, #16
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005076:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f043 0307 	orr.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2201      	movs	r2, #1
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	43db      	mvns	r3, r3
 8005136:	401a      	ands	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1a      	ldr	r2, [r3, #32]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	fa01 f303 	lsl.w	r3, r1, r3
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e06f      	b.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a31      	ldr	r2, [pc, #196]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a30      	ldr	r2, [pc, #192]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2e      	ldr	r2, [pc, #184]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d01d      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f8:	d018      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a16      	ldr	r2, [pc, #88]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a11      	ldr	r2, [pc, #68]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	4313      	orrs	r3, r2
 800523c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400
 800526c:	40015000 	.word	0x40015000
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40014000 	.word	0x40014000

0800527c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e042      	b.n	80053a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fc ff3b 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2224      	movs	r2, #36	; 0x24
 8005336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 ff42 	bl	80061dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fc43 	bl	8005be4 <UART_SetConfig>
 800535e:	4603      	mov	r3, r0
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e01b      	b.n	80053a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 ffc1 	bl	8006320 <UART_CheckIdleState>
 800539e:	4603      	mov	r3, r0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d17b      	bne.n	80054ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_UART_Transmit+0x26>
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e074      	b.n	80054bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2221      	movs	r2, #33	; 0x21
 80053de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e2:	f7fc ffcf 	bl	8002384 <HAL_GetTick>
 80053e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005400:	d108      	bne.n	8005414 <HAL_UART_Transmit+0x6c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e003      	b.n	800541c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800541c:	e030      	b.n	8005480 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	; 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f001 f823 	bl	8006474 <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e03d      	b.n	80054bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	3302      	adds	r3, #2
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e007      	b.n	800546e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1c8      	bne.n	800541e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2200      	movs	r2, #0
 8005494:	2140      	movs	r1, #64	; 0x40
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 ffec 	bl	8006474 <UART_WaitOnFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e006      	b.n	80054bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e000      	b.n	80054bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
  }
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d137      	bne.n	800554c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_UART_Receive_IT+0x24>
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e030      	b.n	800554e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <HAL_UART_Receive_IT+0x94>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d01f      	beq.n	800553c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	613b      	str	r3, [r7, #16]
   return(result);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	61bb      	str	r3, [r7, #24]
   return(result);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	461a      	mov	r2, r3
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f001 f804 	bl	8006550 <UART_Start_Receive_IT>
 8005548:	4603      	mov	r3, r0
 800554a:	e000      	b.n	800554e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40008000 	.word	0x40008000

0800555c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b0ba      	sub	sp, #232	; 0xe8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005586:	f640 030f 	movw	r3, #2063	; 0x80f
 800558a:	4013      	ands	r3, r2
 800558c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11b      	bne.n	80055d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d015      	beq.n	80055d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d009      	beq.n	80055d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 82e3 	beq.w	8005b8c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
      }
      return;
 80055ce:	e2dd      	b.n	8005b8c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8123 	beq.w	8005820 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80055de:	4b8d      	ldr	r3, [pc, #564]	; (8005814 <HAL_UART_IRQHandler+0x2b8>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055ea:	4b8b      	ldr	r3, [pc, #556]	; (8005818 <HAL_UART_IRQHandler+0x2bc>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8116 	beq.w	8005820 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d011      	beq.n	8005624 <HAL_UART_IRQHandler+0xc8>
 8005600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2201      	movs	r2, #1
 8005612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d011      	beq.n	8005654 <HAL_UART_IRQHandler+0xf8>
 8005630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2202      	movs	r2, #2
 8005642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f043 0204 	orr.w	r2, r3, #4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <HAL_UART_IRQHandler+0x128>
 8005660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2204      	movs	r2, #4
 8005672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f043 0202 	orr.w	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d017      	beq.n	80056c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800569c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056a0:	4b5c      	ldr	r3, [pc, #368]	; (8005814 <HAL_UART_IRQHandler+0x2b8>)
 80056a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2208      	movs	r2, #8
 80056ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f043 0208 	orr.w	r2, r3, #8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_UART_IRQHandler+0x196>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8249 	beq.w	8005b90 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d013      	beq.n	8005732 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800570a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d105      	bne.n	8005722 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800574a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d054      	beq.n	8005800 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 f81c 	bl	8006794 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d146      	bne.n	80057f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005796:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800579a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1d9      	bne.n	800576a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d017      	beq.n	80057f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <HAL_UART_IRQHandler+0x2c0>)
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fc ff6d 	bl	80026b0 <HAL_DMA_Abort_IT>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80057ea:	4610      	mov	r0, r2
 80057ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ee:	e00f      	b.n	8005810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f9e1 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f6:	e00b      	b.n	8005810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f9dd 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fe:	e007      	b.n	8005810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f9d9 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800580e:	e1bf      	b.n	8005b90 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	bf00      	nop
    return;
 8005812:	e1bd      	b.n	8005b90 <HAL_UART_IRQHandler+0x634>
 8005814:	10000001 	.word	0x10000001
 8005818:	04000120 	.word	0x04000120
 800581c:	08006861 	.word	0x08006861

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005824:	2b01      	cmp	r3, #1
 8005826:	f040 8153 	bne.w	8005ad0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 814c 	beq.w	8005ad0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8145 	beq.w	8005ad0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2210      	movs	r2, #16
 800584c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	f040 80bb 	bne.w	80059d4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800586c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 818f 	beq.w	8005b94 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800587c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005880:	429a      	cmp	r2, r3
 8005882:	f080 8187 	bcs.w	8005b94 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800588c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 8087 	bne.w	80059b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1da      	bne.n	80058a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005912:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005916:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800591a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e1      	bne.n	80058ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800593a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800594e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005954:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800595c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800597e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005980:	f023 0310 	bic.w	r3, r3, #16
 8005984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	65bb      	str	r3, [r7, #88]	; 0x58
 8005994:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e4      	bne.n	8005970 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fc fe26 	bl	80025fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8fd 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059d2:	e0df      	b.n	8005b94 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80d1 	beq.w	8005b98 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80059f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80cc 	beq.w	8005b98 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a22:	647b      	str	r3, [r7, #68]	; 0x44
 8005a24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e4      	bne.n	8005a00 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	623b      	str	r3, [r7, #32]
   return(result);
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e1      	bne.n	8005a36 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0310 	bic.w	r3, r3, #16
 8005a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	69b9      	ldr	r1, [r7, #24]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e4      	bne.n	8005a86 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f87f 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ace:	e063      	b.n	8005b98 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00e      	beq.n	8005afa <HAL_UART_IRQHandler+0x59e>
 8005adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fc12 	bl	800731c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005af8:	e051      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d014      	beq.n	8005b30 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d03a      	beq.n	8005b9c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
    }
    return;
 8005b2e:	e035      	b.n	8005b9c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d009      	beq.n	8005b50 <HAL_UART_IRQHandler+0x5f4>
 8005b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fe9f 	bl	800688c <UART_EndTransmit_IT>
    return;
 8005b4e:	e026      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_UART_IRQHandler+0x614>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fbeb 	bl	8007344 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b6e:	e016      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_UART_IRQHandler+0x642>
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da0c      	bge.n	8005b9e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fbd3 	bl	8007330 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b8a:	e008      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
      return;
 8005b8c:	bf00      	nop
 8005b8e:	e006      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
    return;
 8005b90:	bf00      	nop
 8005b92:	e004      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
      return;
 8005b94:	bf00      	nop
 8005b96:	e002      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
      return;
 8005b98:	bf00      	nop
 8005b9a:	e000      	b.n	8005b9e <HAL_UART_IRQHandler+0x642>
    return;
 8005b9c:	bf00      	nop
  }
}
 8005b9e:	37e8      	adds	r7, #232	; 0xe8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b08c      	sub	sp, #48	; 0x30
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4baa      	ldr	r3, [pc, #680]	; (8005ebc <UART_SetConfig+0x2d8>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a9f      	ldr	r2, [pc, #636]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f023 010f 	bic.w	r1, r3, #15
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a90      	ldr	r2, [pc, #576]	; (8005ec4 <UART_SetConfig+0x2e0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d125      	bne.n	8005cd4 <UART_SetConfig+0xf0>
 8005c88:	4b8f      	ldr	r3, [pc, #572]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d81a      	bhi.n	8005ccc <UART_SetConfig+0xe8>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0xb8>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e116      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e112      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc2:	e10e      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cca:	e10a      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd2:	e106      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a7c      	ldr	r2, [pc, #496]	; (8005ecc <UART_SetConfig+0x2e8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d138      	bne.n	8005d50 <UART_SetConfig+0x16c>
 8005cde:	4b7a      	ldr	r3, [pc, #488]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	d82d      	bhi.n	8005d48 <UART_SetConfig+0x164>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0x110>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d49 	.word	0x08005d49
 8005cfc:	08005d49 	.word	0x08005d49
 8005d00:	08005d49 	.word	0x08005d49
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d49 	.word	0x08005d49
 8005d0c:	08005d49 	.word	0x08005d49
 8005d10:	08005d49 	.word	0x08005d49
 8005d14:	08005d31 	.word	0x08005d31
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2e:	e0d8      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d30:	2302      	movs	r3, #2
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d36:	e0d4      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3e:	e0d0      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d46:	e0cc      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e0c8      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5e      	ldr	r2, [pc, #376]	; (8005ed0 <UART_SetConfig+0x2ec>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d125      	bne.n	8005da6 <UART_SetConfig+0x1c2>
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d64:	2b30      	cmp	r3, #48	; 0x30
 8005d66:	d016      	beq.n	8005d96 <UART_SetConfig+0x1b2>
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	d818      	bhi.n	8005d9e <UART_SetConfig+0x1ba>
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d00a      	beq.n	8005d86 <UART_SetConfig+0x1a2>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d814      	bhi.n	8005d9e <UART_SetConfig+0x1ba>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <UART_SetConfig+0x19a>
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d008      	beq.n	8005d8e <UART_SetConfig+0x1aa>
 8005d7c:	e00f      	b.n	8005d9e <UART_SetConfig+0x1ba>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d84:	e0ad      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d86:	2302      	movs	r3, #2
 8005d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8c:	e0a9      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d8e:	2304      	movs	r3, #4
 8005d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d94:	e0a5      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d96:	2308      	movs	r3, #8
 8005d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9c:	e0a1      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005d9e:	2310      	movs	r3, #16
 8005da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da4:	e09d      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4a      	ldr	r2, [pc, #296]	; (8005ed4 <UART_SetConfig+0x2f0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d125      	bne.n	8005dfc <UART_SetConfig+0x218>
 8005db0:	4b45      	ldr	r3, [pc, #276]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dba:	2bc0      	cmp	r3, #192	; 0xc0
 8005dbc:	d016      	beq.n	8005dec <UART_SetConfig+0x208>
 8005dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8005dc0:	d818      	bhi.n	8005df4 <UART_SetConfig+0x210>
 8005dc2:	2b80      	cmp	r3, #128	; 0x80
 8005dc4:	d00a      	beq.n	8005ddc <UART_SetConfig+0x1f8>
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d814      	bhi.n	8005df4 <UART_SetConfig+0x210>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <UART_SetConfig+0x1f0>
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d008      	beq.n	8005de4 <UART_SetConfig+0x200>
 8005dd2:	e00f      	b.n	8005df4 <UART_SetConfig+0x210>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dda:	e082      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de2:	e07e      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dea:	e07a      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df2:	e076      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfa:	e072      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a35      	ldr	r2, [pc, #212]	; (8005ed8 <UART_SetConfig+0x2f4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d12a      	bne.n	8005e5c <UART_SetConfig+0x278>
 8005e06:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e14:	d01a      	beq.n	8005e4c <UART_SetConfig+0x268>
 8005e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1a:	d81b      	bhi.n	8005e54 <UART_SetConfig+0x270>
 8005e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e20:	d00c      	beq.n	8005e3c <UART_SetConfig+0x258>
 8005e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e26:	d815      	bhi.n	8005e54 <UART_SetConfig+0x270>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <UART_SetConfig+0x250>
 8005e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e30:	d008      	beq.n	8005e44 <UART_SetConfig+0x260>
 8005e32:	e00f      	b.n	8005e54 <UART_SetConfig+0x270>
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3a:	e052      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e42:	e04e      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4a:	e04a      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e52:	e046      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5a:	e042      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d13a      	bne.n	8005edc <UART_SetConfig+0x2f8>
 8005e66:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e74:	d01a      	beq.n	8005eac <UART_SetConfig+0x2c8>
 8005e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7a:	d81b      	bhi.n	8005eb4 <UART_SetConfig+0x2d0>
 8005e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e80:	d00c      	beq.n	8005e9c <UART_SetConfig+0x2b8>
 8005e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e86:	d815      	bhi.n	8005eb4 <UART_SetConfig+0x2d0>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <UART_SetConfig+0x2b0>
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d008      	beq.n	8005ea4 <UART_SetConfig+0x2c0>
 8005e92:	e00f      	b.n	8005eb4 <UART_SetConfig+0x2d0>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9a:	e022      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea2:	e01e      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eaa:	e01a      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb2:	e016      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eba:	e012      	b.n	8005ee2 <UART_SetConfig+0x2fe>
 8005ebc:	cfff69f3 	.word	0xcfff69f3
 8005ec0:	40008000 	.word	0x40008000
 8005ec4:	40013800 	.word	0x40013800
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40004400 	.word	0x40004400
 8005ed0:	40004800 	.word	0x40004800
 8005ed4:	40004c00 	.word	0x40004c00
 8005ed8:	40005000 	.word	0x40005000
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4aae      	ldr	r2, [pc, #696]	; (80061a0 <UART_SetConfig+0x5bc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	f040 8097 	bne.w	800601c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d823      	bhi.n	8005f3e <UART_SetConfig+0x35a>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x318>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f2f 	.word	0x08005f2f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f3f 	.word	0x08005f3f
 8005f18:	08005f3f 	.word	0x08005f3f
 8005f1c:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f20:	f7fd fb50 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8005f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f26:	e010      	b.n	8005f4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b9e      	ldr	r3, [pc, #632]	; (80061a4 <UART_SetConfig+0x5c0>)
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f2c:	e00d      	b.n	8005f4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fd fadb 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8005f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f3c:	e005      	b.n	8005f4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8130 	beq.w	80061b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	4a94      	ldr	r2, [pc, #592]	; (80061a8 <UART_SetConfig+0x5c4>)
 8005f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4413      	add	r3, r2
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d305      	bcc.n	8005f82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d903      	bls.n	8005f8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f88:	e113      	b.n	80061b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	60fa      	str	r2, [r7, #12]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	4a84      	ldr	r2, [pc, #528]	; (80061a8 <UART_SetConfig+0x5c4>)
 8005f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fac:	f7fa fe16 	bl	8000bdc <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	020b      	lsls	r3, r1, #8
 8005fc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fc6:	0202      	lsls	r2, r0, #8
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	6849      	ldr	r1, [r1, #4]
 8005fcc:	0849      	lsrs	r1, r1, #1
 8005fce:	2000      	movs	r0, #0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	eb12 0804 	adds.w	r8, r2, r4
 8005fd8:	eb43 0905 	adc.w	r9, r3, r5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	469a      	mov	sl, r3
 8005fe4:	4693      	mov	fp, r2
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	465b      	mov	r3, fp
 8005fea:	4640      	mov	r0, r8
 8005fec:	4649      	mov	r1, r9
 8005fee:	f7fa fdf5 	bl	8000bdc <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006000:	d308      	bcc.n	8006014 <UART_SetConfig+0x430>
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006008:	d204      	bcs.n	8006014 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	e0ce      	b.n	80061b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800601a:	e0ca      	b.n	80061b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006024:	d166      	bne.n	80060f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800602a:	2b08      	cmp	r3, #8
 800602c:	d827      	bhi.n	800607e <UART_SetConfig+0x49a>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <UART_SetConfig+0x450>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006059 	.word	0x08006059
 8006038:	08006061 	.word	0x08006061
 800603c:	08006069 	.word	0x08006069
 8006040:	0800607f 	.word	0x0800607f
 8006044:	0800606f 	.word	0x0800606f
 8006048:	0800607f 	.word	0x0800607f
 800604c:	0800607f 	.word	0x0800607f
 8006050:	0800607f 	.word	0x0800607f
 8006054:	08006077 	.word	0x08006077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006058:	f7fd fab4 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 800605c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800605e:	e014      	b.n	800608a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006060:	f7fd fac6 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8006064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006066:	e010      	b.n	800608a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006068:	4b4e      	ldr	r3, [pc, #312]	; (80061a4 <UART_SetConfig+0x5c0>)
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800606c:	e00d      	b.n	800608a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800606e:	f7fd fa3b 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006074:	e009      	b.n	800608a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800607c:	e005      	b.n	800608a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8090 	beq.w	80061b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	4a44      	ldr	r2, [pc, #272]	; (80061a8 <UART_SetConfig+0x5c4>)
 8006098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800609c:	461a      	mov	r2, r3
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a4:	005a      	lsls	r2, r3, #1
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	441a      	add	r2, r3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	2b0f      	cmp	r3, #15
 80060bc:	d916      	bls.n	80060ec <UART_SetConfig+0x508>
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c4:	d212      	bcs.n	80060ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f023 030f 	bic.w	r3, r3, #15
 80060ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	b29a      	uxth	r2, r3
 80060dc:	8bfb      	ldrh	r3, [r7, #30]
 80060de:	4313      	orrs	r3, r2
 80060e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	8bfa      	ldrh	r2, [r7, #30]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	e062      	b.n	80061b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060f2:	e05e      	b.n	80061b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d828      	bhi.n	800614e <UART_SetConfig+0x56a>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x520>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	0800614f 	.word	0x0800614f
 8006114:	0800613f 	.word	0x0800613f
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fd fa4c 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 800612c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800612e:	e014      	b.n	800615a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fd fa5e 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006136:	e010      	b.n	800615a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <UART_SetConfig+0x5c0>)
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800613c:	e00d      	b.n	800615a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fd f9d3 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006158:	bf00      	nop
    }

    if (pclk != 0U)
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d028      	beq.n	80061b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <UART_SetConfig+0x5c4>)
 8006166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616a:	461a      	mov	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	441a      	add	r2, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d910      	bls.n	80061ac <UART_SetConfig+0x5c8>
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d20c      	bcs.n	80061ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	b29a      	uxth	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e009      	b.n	80061b2 <UART_SetConfig+0x5ce>
 800619e:	bf00      	nop
 80061a0:	40008000 	.word	0x40008000
 80061a4:	00f42400 	.word	0x00f42400
 80061a8:	0800a570 	.word	0x0800a570
      }
      else
      {
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2201      	movs	r2, #1
 80061be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2200      	movs	r2, #0
 80061c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80061ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3730      	adds	r7, #48	; 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01a      	beq.n	80062f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062da:	d10a      	bne.n	80062f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  }
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b098      	sub	sp, #96	; 0x60
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006330:	f7fc f828 	bl	8002384 <HAL_GetTick>
 8006334:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d12f      	bne.n	80063a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634c:	2200      	movs	r2, #0
 800634e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f88e 	bl	8006474 <UART_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d022      	beq.n	80063a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006372:	653b      	str	r3, [r7, #80]	; 0x50
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
 800637e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e063      	b.n	800646c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d149      	bne.n	8006446 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ba:	2200      	movs	r2, #0
 80063bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f857 	bl	8006474 <UART_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d03c      	beq.n	8006446 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	623b      	str	r3, [r7, #32]
   return(result);
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ea:	633b      	str	r3, [r7, #48]	; 0x30
 80063ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e6      	bne.n	80063cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	60fb      	str	r3, [r7, #12]
   return(result);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	64bb      	str	r3, [r7, #72]	; 0x48
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3308      	adds	r3, #8
 800641c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800641e:	61fa      	str	r2, [r7, #28]
 8006420:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	69b9      	ldr	r1, [r7, #24]
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	617b      	str	r3, [r7, #20]
   return(result);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e012      	b.n	800646c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3758      	adds	r7, #88	; 0x58
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006484:	e04f      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d04b      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648e:	f7fb ff79 	bl	8002384 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e04e      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d037      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d034      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d031      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d110      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2208      	movs	r2, #8
 80064d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f95b 	bl	8006794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2208      	movs	r2, #8
 80064e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e029      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d111      	bne.n	8006526 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f941 	bl	8006794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e00f      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	429a      	cmp	r2, r3
 8006542:	d0a0      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006550:	b480      	push	{r7}
 8006552:	b0a3      	sub	sp, #140	; 0x8c
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d10e      	bne.n	80065a2 <UART_Start_Receive_IT+0x52>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <UART_Start_Receive_IT+0x48>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006596:	e02d      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22ff      	movs	r2, #255	; 0xff
 800659c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065a0:	e028      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10d      	bne.n	80065c6 <UART_Start_Receive_IT+0x76>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <UART_Start_Receive_IT+0x6c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065ba:	e01b      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	227f      	movs	r2, #127	; 0x7f
 80065c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065c4:	e016      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ce:	d10d      	bne.n	80065ec <UART_Start_Receive_IT+0x9c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <UART_Start_Receive_IT+0x92>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	227f      	movs	r2, #127	; 0x7f
 80065dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065e0:	e008      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065ea:	e003      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2222      	movs	r2, #34	; 0x22
 8006600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006628:	673a      	str	r2, [r7, #112]	; 0x70
 800662a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800662e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e3      	bne.n	8006604 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006644:	d14f      	bne.n	80066e6 <UART_Start_Receive_IT+0x196>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	429a      	cmp	r2, r3
 8006650:	d349      	bcc.n	80066e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d107      	bne.n	800666c <UART_Start_Receive_IT+0x11c>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a47      	ldr	r2, [pc, #284]	; (8006784 <UART_Start_Receive_IT+0x234>)
 8006668:	675a      	str	r2, [r3, #116]	; 0x74
 800666a:	e002      	b.n	8006672 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a46      	ldr	r2, [pc, #280]	; (8006788 <UART_Start_Receive_IT+0x238>)
 8006670:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01a      	beq.n	80066b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800669c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800669e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e4      	bne.n	800667a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80066d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_Start_Receive_IT+0x160>
 80066e4:	e046      	b.n	8006774 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	d107      	bne.n	8006700 <UART_Start_Receive_IT+0x1b0>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a24      	ldr	r2, [pc, #144]	; (800678c <UART_Start_Receive_IT+0x23c>)
 80066fc:	675a      	str	r2, [r3, #116]	; 0x74
 80066fe:	e002      	b.n	8006706 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a23      	ldr	r2, [pc, #140]	; (8006790 <UART_Start_Receive_IT+0x240>)
 8006704:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d019      	beq.n	8006742 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006722:	677b      	str	r3, [r7, #116]	; 0x74
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
 800672e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e6      	bne.n	800670e <UART_Start_Receive_IT+0x1be>
 8006740:	e018      	b.n	8006774 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	613b      	str	r3, [r7, #16]
   return(result);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f043 0320 	orr.w	r3, r3, #32
 8006756:	67bb      	str	r3, [r7, #120]	; 0x78
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	69f9      	ldr	r1, [r7, #28]
 8006766:	6a3a      	ldr	r2, [r7, #32]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	61bb      	str	r3, [r7, #24]
   return(result);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	378c      	adds	r7, #140	; 0x8c
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	08006fb5 	.word	0x08006fb5
 8006788:	08006c55 	.word	0x08006c55
 800678c:	08006a9d 	.word	0x08006a9d
 8006790:	080068e5 	.word	0x080068e5

08006794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b095      	sub	sp, #84	; 0x54
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ba:	643b      	str	r3, [r7, #64]	; 0x40
 80067bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e6      	bne.n	800679c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e3      	bne.n	80067ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d118      	bne.n	8006840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	60bb      	str	r3, [r7, #8]
   return(result);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f023 0310 	bic.w	r3, r3, #16
 8006822:	647b      	str	r3, [r7, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	613b      	str	r3, [r7, #16]
   return(result);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006854:	bf00      	nop
 8006856:	3754      	adds	r7, #84	; 0x54
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff f99a 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	613b      	str	r3, [r7, #16]
   return(result);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e6      	bne.n	8006894 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff f965 	bl	8005ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068da:	bf00      	nop
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b09c      	sub	sp, #112	; 0x70
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fc:	2b22      	cmp	r3, #34	; 0x22
 80068fe:	f040 80be 	bne.w	8006a7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800690c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006910:	b2d9      	uxtb	r1, r3
 8006912:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006916:	b2da      	uxtb	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	400a      	ands	r2, r1
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 80a1 	bne.w	8006a8e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800695a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006960:	66bb      	str	r3, [r7, #104]	; 0x68
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800696a:	65bb      	str	r3, [r7, #88]	; 0x58
 800696c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e6      	bne.n	800694c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	667b      	str	r3, [r7, #100]	; 0x64
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800699e:	647a      	str	r2, [r7, #68]	; 0x44
 80069a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a33      	ldr	r2, [pc, #204]	; (8006a98 <UART_RxISR_8BIT+0x1b4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d01f      	beq.n	8006a10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d018      	beq.n	8006a10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	623b      	str	r3, [r7, #32]
   return(result);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069f2:	663b      	str	r3, [r7, #96]	; 0x60
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d12e      	bne.n	8006a76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0310 	bic.w	r3, r3, #16
 8006a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e6      	bne.n	8006a1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d103      	bne.n	8006a66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2210      	movs	r2, #16
 8006a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff f8ac 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a74:	e00b      	b.n	8006a8e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fa fa84 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8006a7c:	e007      	b.n	8006a8e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0208 	orr.w	r2, r2, #8
 8006a8c:	619a      	str	r2, [r3, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	3770      	adds	r7, #112	; 0x70
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40008000 	.word	0x40008000

08006a9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b09c      	sub	sp, #112	; 0x70
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006aaa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab4:	2b22      	cmp	r3, #34	; 0x22
 8006ab6:	f040 80be 	bne.w	8006c36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006aca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006ace:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ad8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 80a1 	bne.w	8006c46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b18:	667b      	str	r3, [r7, #100]	; 0x64
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b22:	657b      	str	r3, [r7, #84]	; 0x54
 8006b24:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e6      	bne.n	8006b04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b56:	643a      	str	r2, [r7, #64]	; 0x40
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a33      	ldr	r2, [pc, #204]	; (8006c50 <UART_RxISR_16BIT+0x1b4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d01f      	beq.n	8006bc8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e6      	bne.n	8006b96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d12e      	bne.n	8006c2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 0310 	bic.w	r3, r3, #16
 8006bea:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6979      	ldr	r1, [r7, #20]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	613b      	str	r3, [r7, #16]
   return(result);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e6      	bne.n	8006bd6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d103      	bne.n	8006c1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fe ffd0 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c2c:	e00b      	b.n	8006c46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fa f9a8 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8006c34:	e007      	b.n	8006c46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0208 	orr.w	r2, r2, #8
 8006c44:	619a      	str	r2, [r3, #24]
}
 8006c46:	bf00      	nop
 8006c48:	3770      	adds	r7, #112	; 0x70
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40008000 	.word	0x40008000

08006c54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b0ac      	sub	sp, #176	; 0xb0
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c8a:	2b22      	cmp	r3, #34	; 0x22
 8006c8c:	f040 8182 	bne.w	8006f94 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c96:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c9a:	e125      	b.n	8006ee8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ca6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006caa:	b2d9      	uxtb	r1, r3
 8006cac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb6:	400a      	ands	r2, r1
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d053      	beq.n	8006d96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d011      	beq.n	8006d1e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f043 0201 	orr.w	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	f043 0204 	orr.w	r2, r3, #4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d011      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d74:	f043 0202 	orr.w	r2, r3, #2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fe ff15 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f040 80a2 	bne.w	8006ee8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dc8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006dcc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e4      	bne.n	8006da4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e02:	66ba      	str	r2, [r7, #104]	; 0x68
 8006e04:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006e08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e1      	bne.n	8006dda <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a5f      	ldr	r2, [pc, #380]	; (8006fac <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d021      	beq.n	8006e78 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01a      	beq.n	8006e78 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e64:	657b      	str	r3, [r7, #84]	; 0x54
 8006e66:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e4      	bne.n	8006e42 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d130      	bne.n	8006ee2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e4      	bne.n	8006e86 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	2b10      	cmp	r3, #16
 8006ec8:	d103      	bne.n	8006ed2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2210      	movs	r2, #16
 8006ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fe fe76 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 8006ee0:	e002      	b.n	8006ee8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fa f84e 	bl	8000f84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ee8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f47f aecf 	bne.w	8006c9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d049      	beq.n	8006fa4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f16:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d242      	bcs.n	8006fa4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e3      	bne.n	8006f1e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a15      	ldr	r2, [pc, #84]	; (8006fb0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006f5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f043 0320 	orr.w	r3, r3, #32
 8006f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6979      	ldr	r1, [r7, #20]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e4      	bne.n	8006f5c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f92:	e007      	b.n	8006fa4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	619a      	str	r2, [r3, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	37b0      	adds	r7, #176	; 0xb0
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40008000 	.word	0x40008000
 8006fb0:	080068e5 	.word	0x080068e5

08006fb4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b0ae      	sub	sp, #184	; 0xb8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fc2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fea:	2b22      	cmp	r3, #34	; 0x22
 8006fec:	f040 8186 	bne.w	80072fc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ff6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ffa:	e129      	b.n	8007250 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800700e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007012:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007016:	4013      	ands	r3, r2
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800701e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b00      	cmp	r3, #0
 8007050:	d053      	beq.n	80070fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d011      	beq.n	8007082 <UART_RxISR_16BIT_FIFOEN+0xce>
 800705e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2201      	movs	r2, #1
 8007070:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d011      	beq.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800708e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2202      	movs	r2, #2
 80070a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a8:	f043 0204 	orr.w	r2, r3, #4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80070be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2204      	movs	r2, #4
 80070d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f043 0202 	orr.w	r2, r3, #2
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d006      	beq.n	80070fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fe fd63 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 80a4 	bne.w	8007250 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800711c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800712a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800712e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800713c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e2      	bne.n	8007108 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007158:	f023 0301 	bic.w	r3, r3, #1
 800715c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800716a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800716c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e1      	bne.n	8007142 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a5f      	ldr	r2, [pc, #380]	; (8007314 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d021      	beq.n	80071e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01a      	beq.n	80071e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e4      	bne.n	80071aa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d130      	bne.n	800724a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007210:	647b      	str	r3, [r7, #68]	; 0x44
 8007212:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e4      	bne.n	80071ee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b10      	cmp	r3, #16
 8007230:	d103      	bne.n	800723a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe fcc2 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 8007248:	e002      	b.n	8007250 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7f9 fe9a 	bl	8000f84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007250:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	f47f aecb 	bne.w	8006ffc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800726c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007270:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007274:	2b00      	cmp	r3, #0
 8007276:	d049      	beq.n	800730c <UART_RxISR_16BIT_FIFOEN+0x358>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800727e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007282:	429a      	cmp	r2, r3
 8007284:	d242      	bcs.n	800730c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	623b      	str	r3, [r7, #32]
   return(result);
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800729c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80072aa:	633a      	str	r2, [r7, #48]	; 0x30
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e3      	bne.n	8007286 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80072c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072e6:	61fb      	str	r3, [r7, #28]
 80072e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	69b9      	ldr	r1, [r7, #24]
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	617b      	str	r3, [r7, #20]
   return(result);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e4      	bne.n	80072c4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072fa:	e007      	b.n	800730c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0208 	orr.w	r2, r2, #8
 800730a:	619a      	str	r2, [r3, #24]
}
 800730c:	bf00      	nop
 800730e:	37b8      	adds	r7, #184	; 0xb8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40008000 	.word	0x40008000
 8007318:	08006a9d 	.word	0x08006a9d

0800731c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_UARTEx_DisableFifoMode+0x16>
 800736a:	2302      	movs	r3, #2
 800736c:	e027      	b.n	80073be <HAL_UARTEx_DisableFifoMode+0x66>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2224      	movs	r2, #36	; 0x24
 800737a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800739c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073de:	2302      	movs	r3, #2
 80073e0:	e02d      	b.n	800743e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2224      	movs	r2, #36	; 0x24
 80073ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f850 	bl	80074c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800745a:	2302      	movs	r3, #2
 800745c:	e02d      	b.n	80074ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2224      	movs	r2, #36	; 0x24
 800746a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f812 	bl	80074c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d108      	bne.n	80074e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074e4:	e031      	b.n	800754a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074e6:	2308      	movs	r3, #8
 80074e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074ea:	2308      	movs	r3, #8
 80074ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	0e5b      	lsrs	r3, r3, #25
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	0f5b      	lsrs	r3, r3, #29
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	7b3a      	ldrb	r2, [r7, #12]
 8007512:	4911      	ldr	r1, [pc, #68]	; (8007558 <UARTEx_SetNbDataToProcess+0x94>)
 8007514:	5c8a      	ldrb	r2, [r1, r2]
 8007516:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800751a:	7b3a      	ldrb	r2, [r7, #12]
 800751c:	490f      	ldr	r1, [pc, #60]	; (800755c <UARTEx_SetNbDataToProcess+0x98>)
 800751e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007520:	fb93 f3f2 	sdiv	r3, r3, r2
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	7b7a      	ldrb	r2, [r7, #13]
 8007530:	4909      	ldr	r1, [pc, #36]	; (8007558 <UARTEx_SetNbDataToProcess+0x94>)
 8007532:	5c8a      	ldrb	r2, [r1, r2]
 8007534:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007538:	7b7a      	ldrb	r2, [r7, #13]
 800753a:	4908      	ldr	r1, [pc, #32]	; (800755c <UARTEx_SetNbDataToProcess+0x98>)
 800753c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800753e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	0800a588 	.word	0x0800a588
 800755c:	0800a590 	.word	0x0800a590

08007560 <atof>:
 8007560:	2100      	movs	r1, #0
 8007562:	f000 be7f 	b.w	8008264 <strtod>
	...

08007568 <__errno>:
 8007568:	4b01      	ldr	r3, [pc, #4]	; (8007570 <__errno+0x8>)
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	2000000c 	.word	0x2000000c

08007574 <__libc_init_array>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4d0d      	ldr	r5, [pc, #52]	; (80075ac <__libc_init_array+0x38>)
 8007578:	4c0d      	ldr	r4, [pc, #52]	; (80075b0 <__libc_init_array+0x3c>)
 800757a:	1b64      	subs	r4, r4, r5
 800757c:	10a4      	asrs	r4, r4, #2
 800757e:	2600      	movs	r6, #0
 8007580:	42a6      	cmp	r6, r4
 8007582:	d109      	bne.n	8007598 <__libc_init_array+0x24>
 8007584:	4d0b      	ldr	r5, [pc, #44]	; (80075b4 <__libc_init_array+0x40>)
 8007586:	4c0c      	ldr	r4, [pc, #48]	; (80075b8 <__libc_init_array+0x44>)
 8007588:	f002 ff06 	bl	800a398 <_init>
 800758c:	1b64      	subs	r4, r4, r5
 800758e:	10a4      	asrs	r4, r4, #2
 8007590:	2600      	movs	r6, #0
 8007592:	42a6      	cmp	r6, r4
 8007594:	d105      	bne.n	80075a2 <__libc_init_array+0x2e>
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	f855 3b04 	ldr.w	r3, [r5], #4
 800759c:	4798      	blx	r3
 800759e:	3601      	adds	r6, #1
 80075a0:	e7ee      	b.n	8007580 <__libc_init_array+0xc>
 80075a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a6:	4798      	blx	r3
 80075a8:	3601      	adds	r6, #1
 80075aa:	e7f2      	b.n	8007592 <__libc_init_array+0x1e>
 80075ac:	0800a9cc 	.word	0x0800a9cc
 80075b0:	0800a9cc 	.word	0x0800a9cc
 80075b4:	0800a9cc 	.word	0x0800a9cc
 80075b8:	0800a9d0 	.word	0x0800a9d0

080075bc <memset>:
 80075bc:	4402      	add	r2, r0
 80075be:	4603      	mov	r3, r0
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d100      	bne.n	80075c6 <memset+0xa>
 80075c4:	4770      	bx	lr
 80075c6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ca:	e7f9      	b.n	80075c0 <memset+0x4>

080075cc <strchr>:
 80075cc:	b2c9      	uxtb	r1, r1
 80075ce:	4603      	mov	r3, r0
 80075d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d4:	b11a      	cbz	r2, 80075de <strchr+0x12>
 80075d6:	428a      	cmp	r2, r1
 80075d8:	d1f9      	bne.n	80075ce <strchr+0x2>
 80075da:	4618      	mov	r0, r3
 80075dc:	4770      	bx	lr
 80075de:	2900      	cmp	r1, #0
 80075e0:	bf18      	it	ne
 80075e2:	2300      	movne	r3, #0
 80075e4:	e7f9      	b.n	80075da <strchr+0xe>

080075e6 <strcpy>:
 80075e6:	4603      	mov	r3, r0
 80075e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075ec:	f803 2b01 	strb.w	r2, [r3], #1
 80075f0:	2a00      	cmp	r2, #0
 80075f2:	d1f9      	bne.n	80075e8 <strcpy+0x2>
 80075f4:	4770      	bx	lr

080075f6 <strncpy>:
 80075f6:	b510      	push	{r4, lr}
 80075f8:	3901      	subs	r1, #1
 80075fa:	4603      	mov	r3, r0
 80075fc:	b132      	cbz	r2, 800760c <strncpy+0x16>
 80075fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007602:	f803 4b01 	strb.w	r4, [r3], #1
 8007606:	3a01      	subs	r2, #1
 8007608:	2c00      	cmp	r4, #0
 800760a:	d1f7      	bne.n	80075fc <strncpy+0x6>
 800760c:	441a      	add	r2, r3
 800760e:	2100      	movs	r1, #0
 8007610:	4293      	cmp	r3, r2
 8007612:	d100      	bne.n	8007616 <strncpy+0x20>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	f803 1b01 	strb.w	r1, [r3], #1
 800761a:	e7f9      	b.n	8007610 <strncpy+0x1a>

0800761c <sulp>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4604      	mov	r4, r0
 8007620:	460d      	mov	r5, r1
 8007622:	ec45 4b10 	vmov	d0, r4, r5
 8007626:	4616      	mov	r6, r2
 8007628:	f001 fd2a 	bl	8009080 <__ulp>
 800762c:	ec51 0b10 	vmov	r0, r1, d0
 8007630:	b17e      	cbz	r6, 8007652 <sulp+0x36>
 8007632:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007636:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd09      	ble.n	8007652 <sulp+0x36>
 800763e:	051b      	lsls	r3, r3, #20
 8007640:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007644:	2400      	movs	r4, #0
 8007646:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	f7f9 f80b 	bl	8000668 <__aeabi_dmul>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	0000      	movs	r0, r0
	...

08007658 <_strtod_l>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	ed2d 8b02 	vpush	{d8}
 8007660:	b09d      	sub	sp, #116	; 0x74
 8007662:	461f      	mov	r7, r3
 8007664:	2300      	movs	r3, #0
 8007666:	9318      	str	r3, [sp, #96]	; 0x60
 8007668:	4ba2      	ldr	r3, [pc, #648]	; (80078f4 <_strtod_l+0x29c>)
 800766a:	9213      	str	r2, [sp, #76]	; 0x4c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	9305      	str	r3, [sp, #20]
 8007670:	4604      	mov	r4, r0
 8007672:	4618      	mov	r0, r3
 8007674:	4688      	mov	r8, r1
 8007676:	f7f8 fddd 	bl	8000234 <strlen>
 800767a:	f04f 0a00 	mov.w	sl, #0
 800767e:	4605      	mov	r5, r0
 8007680:	f04f 0b00 	mov.w	fp, #0
 8007684:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800768a:	781a      	ldrb	r2, [r3, #0]
 800768c:	2a2b      	cmp	r2, #43	; 0x2b
 800768e:	d04e      	beq.n	800772e <_strtod_l+0xd6>
 8007690:	d83b      	bhi.n	800770a <_strtod_l+0xb2>
 8007692:	2a0d      	cmp	r2, #13
 8007694:	d834      	bhi.n	8007700 <_strtod_l+0xa8>
 8007696:	2a08      	cmp	r2, #8
 8007698:	d834      	bhi.n	8007704 <_strtod_l+0xac>
 800769a:	2a00      	cmp	r2, #0
 800769c:	d03e      	beq.n	800771c <_strtod_l+0xc4>
 800769e:	2300      	movs	r3, #0
 80076a0:	930a      	str	r3, [sp, #40]	; 0x28
 80076a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80076a4:	7833      	ldrb	r3, [r6, #0]
 80076a6:	2b30      	cmp	r3, #48	; 0x30
 80076a8:	f040 80b0 	bne.w	800780c <_strtod_l+0x1b4>
 80076ac:	7873      	ldrb	r3, [r6, #1]
 80076ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076b2:	2b58      	cmp	r3, #88	; 0x58
 80076b4:	d168      	bne.n	8007788 <_strtod_l+0x130>
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	ab18      	add	r3, sp, #96	; 0x60
 80076bc:	9702      	str	r7, [sp, #8]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	4a8d      	ldr	r2, [pc, #564]	; (80078f8 <_strtod_l+0x2a0>)
 80076c2:	ab19      	add	r3, sp, #100	; 0x64
 80076c4:	a917      	add	r1, sp, #92	; 0x5c
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fe40 	bl	800834c <__gethex>
 80076cc:	f010 0707 	ands.w	r7, r0, #7
 80076d0:	4605      	mov	r5, r0
 80076d2:	d005      	beq.n	80076e0 <_strtod_l+0x88>
 80076d4:	2f06      	cmp	r7, #6
 80076d6:	d12c      	bne.n	8007732 <_strtod_l+0xda>
 80076d8:	3601      	adds	r6, #1
 80076da:	2300      	movs	r3, #0
 80076dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80076de:	930a      	str	r3, [sp, #40]	; 0x28
 80076e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 8590 	bne.w	8008208 <_strtod_l+0xbb0>
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	b1eb      	cbz	r3, 8007728 <_strtod_l+0xd0>
 80076ec:	4652      	mov	r2, sl
 80076ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076f2:	ec43 2b10 	vmov	d0, r2, r3
 80076f6:	b01d      	add	sp, #116	; 0x74
 80076f8:	ecbd 8b02 	vpop	{d8}
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	2a20      	cmp	r2, #32
 8007702:	d1cc      	bne.n	800769e <_strtod_l+0x46>
 8007704:	3301      	adds	r3, #1
 8007706:	9317      	str	r3, [sp, #92]	; 0x5c
 8007708:	e7be      	b.n	8007688 <_strtod_l+0x30>
 800770a:	2a2d      	cmp	r2, #45	; 0x2d
 800770c:	d1c7      	bne.n	800769e <_strtod_l+0x46>
 800770e:	2201      	movs	r2, #1
 8007710:	920a      	str	r2, [sp, #40]	; 0x28
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	9217      	str	r2, [sp, #92]	; 0x5c
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1c2      	bne.n	80076a2 <_strtod_l+0x4a>
 800771c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800771e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007722:	2b00      	cmp	r3, #0
 8007724:	f040 856e 	bne.w	8008204 <_strtod_l+0xbac>
 8007728:	4652      	mov	r2, sl
 800772a:	465b      	mov	r3, fp
 800772c:	e7e1      	b.n	80076f2 <_strtod_l+0x9a>
 800772e:	2200      	movs	r2, #0
 8007730:	e7ee      	b.n	8007710 <_strtod_l+0xb8>
 8007732:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007734:	b13a      	cbz	r2, 8007746 <_strtod_l+0xee>
 8007736:	2135      	movs	r1, #53	; 0x35
 8007738:	a81a      	add	r0, sp, #104	; 0x68
 800773a:	f001 fdac 	bl	8009296 <__copybits>
 800773e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007740:	4620      	mov	r0, r4
 8007742:	f001 f96b 	bl	8008a1c <_Bfree>
 8007746:	3f01      	subs	r7, #1
 8007748:	2f04      	cmp	r7, #4
 800774a:	d806      	bhi.n	800775a <_strtod_l+0x102>
 800774c:	e8df f007 	tbb	[pc, r7]
 8007750:	1714030a 	.word	0x1714030a
 8007754:	0a          	.byte	0x0a
 8007755:	00          	.byte	0x00
 8007756:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800775a:	0728      	lsls	r0, r5, #28
 800775c:	d5c0      	bpl.n	80076e0 <_strtod_l+0x88>
 800775e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007762:	e7bd      	b.n	80076e0 <_strtod_l+0x88>
 8007764:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800776a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800776e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007772:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007776:	e7f0      	b.n	800775a <_strtod_l+0x102>
 8007778:	f8df b180 	ldr.w	fp, [pc, #384]	; 80078fc <_strtod_l+0x2a4>
 800777c:	e7ed      	b.n	800775a <_strtod_l+0x102>
 800777e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007782:	f04f 3aff 	mov.w	sl, #4294967295
 8007786:	e7e8      	b.n	800775a <_strtod_l+0x102>
 8007788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	9217      	str	r2, [sp, #92]	; 0x5c
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b30      	cmp	r3, #48	; 0x30
 8007792:	d0f9      	beq.n	8007788 <_strtod_l+0x130>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0a3      	beq.n	80076e0 <_strtod_l+0x88>
 8007798:	2301      	movs	r3, #1
 800779a:	f04f 0900 	mov.w	r9, #0
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a2:	9308      	str	r3, [sp, #32]
 80077a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80077a8:	464f      	mov	r7, r9
 80077aa:	220a      	movs	r2, #10
 80077ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80077ae:	7806      	ldrb	r6, [r0, #0]
 80077b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80077b4:	b2d9      	uxtb	r1, r3
 80077b6:	2909      	cmp	r1, #9
 80077b8:	d92a      	bls.n	8007810 <_strtod_l+0x1b8>
 80077ba:	9905      	ldr	r1, [sp, #20]
 80077bc:	462a      	mov	r2, r5
 80077be:	f001 fe73 	bl	80094a8 <strncmp>
 80077c2:	b398      	cbz	r0, 800782c <_strtod_l+0x1d4>
 80077c4:	2000      	movs	r0, #0
 80077c6:	4632      	mov	r2, r6
 80077c8:	463d      	mov	r5, r7
 80077ca:	9005      	str	r0, [sp, #20]
 80077cc:	4603      	mov	r3, r0
 80077ce:	2a65      	cmp	r2, #101	; 0x65
 80077d0:	d001      	beq.n	80077d6 <_strtod_l+0x17e>
 80077d2:	2a45      	cmp	r2, #69	; 0x45
 80077d4:	d118      	bne.n	8007808 <_strtod_l+0x1b0>
 80077d6:	b91d      	cbnz	r5, 80077e0 <_strtod_l+0x188>
 80077d8:	9a04      	ldr	r2, [sp, #16]
 80077da:	4302      	orrs	r2, r0
 80077dc:	d09e      	beq.n	800771c <_strtod_l+0xc4>
 80077de:	2500      	movs	r5, #0
 80077e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80077e4:	f108 0201 	add.w	r2, r8, #1
 80077e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80077ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80077ee:	2a2b      	cmp	r2, #43	; 0x2b
 80077f0:	d075      	beq.n	80078de <_strtod_l+0x286>
 80077f2:	2a2d      	cmp	r2, #45	; 0x2d
 80077f4:	d07b      	beq.n	80078ee <_strtod_l+0x296>
 80077f6:	f04f 0c00 	mov.w	ip, #0
 80077fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077fe:	2909      	cmp	r1, #9
 8007800:	f240 8082 	bls.w	8007908 <_strtod_l+0x2b0>
 8007804:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007808:	2600      	movs	r6, #0
 800780a:	e09d      	b.n	8007948 <_strtod_l+0x2f0>
 800780c:	2300      	movs	r3, #0
 800780e:	e7c4      	b.n	800779a <_strtod_l+0x142>
 8007810:	2f08      	cmp	r7, #8
 8007812:	bfd8      	it	le
 8007814:	9907      	ldrle	r1, [sp, #28]
 8007816:	f100 0001 	add.w	r0, r0, #1
 800781a:	bfda      	itte	le
 800781c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007820:	9307      	strle	r3, [sp, #28]
 8007822:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007826:	3701      	adds	r7, #1
 8007828:	9017      	str	r0, [sp, #92]	; 0x5c
 800782a:	e7bf      	b.n	80077ac <_strtod_l+0x154>
 800782c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800782e:	195a      	adds	r2, r3, r5
 8007830:	9217      	str	r2, [sp, #92]	; 0x5c
 8007832:	5d5a      	ldrb	r2, [r3, r5]
 8007834:	2f00      	cmp	r7, #0
 8007836:	d037      	beq.n	80078a8 <_strtod_l+0x250>
 8007838:	9005      	str	r0, [sp, #20]
 800783a:	463d      	mov	r5, r7
 800783c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007840:	2b09      	cmp	r3, #9
 8007842:	d912      	bls.n	800786a <_strtod_l+0x212>
 8007844:	2301      	movs	r3, #1
 8007846:	e7c2      	b.n	80077ce <_strtod_l+0x176>
 8007848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	9217      	str	r2, [sp, #92]	; 0x5c
 800784e:	785a      	ldrb	r2, [r3, #1]
 8007850:	3001      	adds	r0, #1
 8007852:	2a30      	cmp	r2, #48	; 0x30
 8007854:	d0f8      	beq.n	8007848 <_strtod_l+0x1f0>
 8007856:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800785a:	2b08      	cmp	r3, #8
 800785c:	f200 84d9 	bhi.w	8008212 <_strtod_l+0xbba>
 8007860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007862:	9005      	str	r0, [sp, #20]
 8007864:	2000      	movs	r0, #0
 8007866:	9308      	str	r3, [sp, #32]
 8007868:	4605      	mov	r5, r0
 800786a:	3a30      	subs	r2, #48	; 0x30
 800786c:	f100 0301 	add.w	r3, r0, #1
 8007870:	d014      	beq.n	800789c <_strtod_l+0x244>
 8007872:	9905      	ldr	r1, [sp, #20]
 8007874:	4419      	add	r1, r3
 8007876:	9105      	str	r1, [sp, #20]
 8007878:	462b      	mov	r3, r5
 800787a:	eb00 0e05 	add.w	lr, r0, r5
 800787e:	210a      	movs	r1, #10
 8007880:	4573      	cmp	r3, lr
 8007882:	d113      	bne.n	80078ac <_strtod_l+0x254>
 8007884:	182b      	adds	r3, r5, r0
 8007886:	2b08      	cmp	r3, #8
 8007888:	f105 0501 	add.w	r5, r5, #1
 800788c:	4405      	add	r5, r0
 800788e:	dc1c      	bgt.n	80078ca <_strtod_l+0x272>
 8007890:	9907      	ldr	r1, [sp, #28]
 8007892:	230a      	movs	r3, #10
 8007894:	fb03 2301 	mla	r3, r3, r1, r2
 8007898:	9307      	str	r3, [sp, #28]
 800789a:	2300      	movs	r3, #0
 800789c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800789e:	1c51      	adds	r1, r2, #1
 80078a0:	9117      	str	r1, [sp, #92]	; 0x5c
 80078a2:	7852      	ldrb	r2, [r2, #1]
 80078a4:	4618      	mov	r0, r3
 80078a6:	e7c9      	b.n	800783c <_strtod_l+0x1e4>
 80078a8:	4638      	mov	r0, r7
 80078aa:	e7d2      	b.n	8007852 <_strtod_l+0x1fa>
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	dc04      	bgt.n	80078ba <_strtod_l+0x262>
 80078b0:	9e07      	ldr	r6, [sp, #28]
 80078b2:	434e      	muls	r6, r1
 80078b4:	9607      	str	r6, [sp, #28]
 80078b6:	3301      	adds	r3, #1
 80078b8:	e7e2      	b.n	8007880 <_strtod_l+0x228>
 80078ba:	f103 0c01 	add.w	ip, r3, #1
 80078be:	f1bc 0f10 	cmp.w	ip, #16
 80078c2:	bfd8      	it	le
 80078c4:	fb01 f909 	mulle.w	r9, r1, r9
 80078c8:	e7f5      	b.n	80078b6 <_strtod_l+0x25e>
 80078ca:	2d10      	cmp	r5, #16
 80078cc:	bfdc      	itt	le
 80078ce:	230a      	movle	r3, #10
 80078d0:	fb03 2909 	mlale	r9, r3, r9, r2
 80078d4:	e7e1      	b.n	800789a <_strtod_l+0x242>
 80078d6:	2300      	movs	r3, #0
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	2301      	movs	r3, #1
 80078dc:	e77c      	b.n	80077d8 <_strtod_l+0x180>
 80078de:	f04f 0c00 	mov.w	ip, #0
 80078e2:	f108 0202 	add.w	r2, r8, #2
 80078e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80078e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80078ec:	e785      	b.n	80077fa <_strtod_l+0x1a2>
 80078ee:	f04f 0c01 	mov.w	ip, #1
 80078f2:	e7f6      	b.n	80078e2 <_strtod_l+0x28a>
 80078f4:	0800a670 	.word	0x0800a670
 80078f8:	0800a5a8 	.word	0x0800a5a8
 80078fc:	7ff00000 	.word	0x7ff00000
 8007900:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007902:	1c51      	adds	r1, r2, #1
 8007904:	9117      	str	r1, [sp, #92]	; 0x5c
 8007906:	7852      	ldrb	r2, [r2, #1]
 8007908:	2a30      	cmp	r2, #48	; 0x30
 800790a:	d0f9      	beq.n	8007900 <_strtod_l+0x2a8>
 800790c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007910:	2908      	cmp	r1, #8
 8007912:	f63f af79 	bhi.w	8007808 <_strtod_l+0x1b0>
 8007916:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800791a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800791c:	9206      	str	r2, [sp, #24]
 800791e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007920:	1c51      	adds	r1, r2, #1
 8007922:	9117      	str	r1, [sp, #92]	; 0x5c
 8007924:	7852      	ldrb	r2, [r2, #1]
 8007926:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800792a:	2e09      	cmp	r6, #9
 800792c:	d937      	bls.n	800799e <_strtod_l+0x346>
 800792e:	9e06      	ldr	r6, [sp, #24]
 8007930:	1b89      	subs	r1, r1, r6
 8007932:	2908      	cmp	r1, #8
 8007934:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007938:	dc02      	bgt.n	8007940 <_strtod_l+0x2e8>
 800793a:	4576      	cmp	r6, lr
 800793c:	bfa8      	it	ge
 800793e:	4676      	movge	r6, lr
 8007940:	f1bc 0f00 	cmp.w	ip, #0
 8007944:	d000      	beq.n	8007948 <_strtod_l+0x2f0>
 8007946:	4276      	negs	r6, r6
 8007948:	2d00      	cmp	r5, #0
 800794a:	d14d      	bne.n	80079e8 <_strtod_l+0x390>
 800794c:	9904      	ldr	r1, [sp, #16]
 800794e:	4301      	orrs	r1, r0
 8007950:	f47f aec6 	bne.w	80076e0 <_strtod_l+0x88>
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f aee1 	bne.w	800771c <_strtod_l+0xc4>
 800795a:	2a69      	cmp	r2, #105	; 0x69
 800795c:	d027      	beq.n	80079ae <_strtod_l+0x356>
 800795e:	dc24      	bgt.n	80079aa <_strtod_l+0x352>
 8007960:	2a49      	cmp	r2, #73	; 0x49
 8007962:	d024      	beq.n	80079ae <_strtod_l+0x356>
 8007964:	2a4e      	cmp	r2, #78	; 0x4e
 8007966:	f47f aed9 	bne.w	800771c <_strtod_l+0xc4>
 800796a:	499f      	ldr	r1, [pc, #636]	; (8007be8 <_strtod_l+0x590>)
 800796c:	a817      	add	r0, sp, #92	; 0x5c
 800796e:	f000 ff45 	bl	80087fc <__match>
 8007972:	2800      	cmp	r0, #0
 8007974:	f43f aed2 	beq.w	800771c <_strtod_l+0xc4>
 8007978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b28      	cmp	r3, #40	; 0x28
 800797e:	d12d      	bne.n	80079dc <_strtod_l+0x384>
 8007980:	499a      	ldr	r1, [pc, #616]	; (8007bec <_strtod_l+0x594>)
 8007982:	aa1a      	add	r2, sp, #104	; 0x68
 8007984:	a817      	add	r0, sp, #92	; 0x5c
 8007986:	f000 ff4d 	bl	8008824 <__hexnan>
 800798a:	2805      	cmp	r0, #5
 800798c:	d126      	bne.n	80079dc <_strtod_l+0x384>
 800798e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007990:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007994:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007998:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800799c:	e6a0      	b.n	80076e0 <_strtod_l+0x88>
 800799e:	210a      	movs	r1, #10
 80079a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80079a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80079a8:	e7b9      	b.n	800791e <_strtod_l+0x2c6>
 80079aa:	2a6e      	cmp	r2, #110	; 0x6e
 80079ac:	e7db      	b.n	8007966 <_strtod_l+0x30e>
 80079ae:	4990      	ldr	r1, [pc, #576]	; (8007bf0 <_strtod_l+0x598>)
 80079b0:	a817      	add	r0, sp, #92	; 0x5c
 80079b2:	f000 ff23 	bl	80087fc <__match>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f aeb0 	beq.w	800771c <_strtod_l+0xc4>
 80079bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079be:	498d      	ldr	r1, [pc, #564]	; (8007bf4 <_strtod_l+0x59c>)
 80079c0:	3b01      	subs	r3, #1
 80079c2:	a817      	add	r0, sp, #92	; 0x5c
 80079c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80079c6:	f000 ff19 	bl	80087fc <__match>
 80079ca:	b910      	cbnz	r0, 80079d2 <_strtod_l+0x37a>
 80079cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079ce:	3301      	adds	r3, #1
 80079d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80079d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007c04 <_strtod_l+0x5ac>
 80079d6:	f04f 0a00 	mov.w	sl, #0
 80079da:	e681      	b.n	80076e0 <_strtod_l+0x88>
 80079dc:	4886      	ldr	r0, [pc, #536]	; (8007bf8 <_strtod_l+0x5a0>)
 80079de:	f001 fd4b 	bl	8009478 <nan>
 80079e2:	ec5b ab10 	vmov	sl, fp, d0
 80079e6:	e67b      	b.n	80076e0 <_strtod_l+0x88>
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	9807      	ldr	r0, [sp, #28]
 80079ec:	1af3      	subs	r3, r6, r3
 80079ee:	2f00      	cmp	r7, #0
 80079f0:	bf08      	it	eq
 80079f2:	462f      	moveq	r7, r5
 80079f4:	2d10      	cmp	r5, #16
 80079f6:	9306      	str	r3, [sp, #24]
 80079f8:	46a8      	mov	r8, r5
 80079fa:	bfa8      	it	ge
 80079fc:	f04f 0810 	movge.w	r8, #16
 8007a00:	f7f8 fdb8 	bl	8000574 <__aeabi_ui2d>
 8007a04:	2d09      	cmp	r5, #9
 8007a06:	4682      	mov	sl, r0
 8007a08:	468b      	mov	fp, r1
 8007a0a:	dd13      	ble.n	8007a34 <_strtod_l+0x3dc>
 8007a0c:	4b7b      	ldr	r3, [pc, #492]	; (8007bfc <_strtod_l+0x5a4>)
 8007a0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a16:	f7f8 fe27 	bl	8000668 <__aeabi_dmul>
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	4648      	mov	r0, r9
 8007a1e:	468b      	mov	fp, r1
 8007a20:	f7f8 fda8 	bl	8000574 <__aeabi_ui2d>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4650      	mov	r0, sl
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	f7f8 fc66 	bl	80002fc <__adddf3>
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	2d0f      	cmp	r5, #15
 8007a36:	dc38      	bgt.n	8007aaa <_strtod_l+0x452>
 8007a38:	9b06      	ldr	r3, [sp, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f43f ae50 	beq.w	80076e0 <_strtod_l+0x88>
 8007a40:	dd24      	ble.n	8007a8c <_strtod_l+0x434>
 8007a42:	2b16      	cmp	r3, #22
 8007a44:	dc0b      	bgt.n	8007a5e <_strtod_l+0x406>
 8007a46:	496d      	ldr	r1, [pc, #436]	; (8007bfc <_strtod_l+0x5a4>)
 8007a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a50:	4652      	mov	r2, sl
 8007a52:	465b      	mov	r3, fp
 8007a54:	f7f8 fe08 	bl	8000668 <__aeabi_dmul>
 8007a58:	4682      	mov	sl, r0
 8007a5a:	468b      	mov	fp, r1
 8007a5c:	e640      	b.n	80076e0 <_strtod_l+0x88>
 8007a5e:	9a06      	ldr	r2, [sp, #24]
 8007a60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007a64:	4293      	cmp	r3, r2
 8007a66:	db20      	blt.n	8007aaa <_strtod_l+0x452>
 8007a68:	4c64      	ldr	r4, [pc, #400]	; (8007bfc <_strtod_l+0x5a4>)
 8007a6a:	f1c5 050f 	rsb	r5, r5, #15
 8007a6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a7a:	f7f8 fdf5 	bl	8000668 <__aeabi_dmul>
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	1b5d      	subs	r5, r3, r5
 8007a82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a8a:	e7e3      	b.n	8007a54 <_strtod_l+0x3fc>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	3316      	adds	r3, #22
 8007a90:	db0b      	blt.n	8007aaa <_strtod_l+0x452>
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	1b9e      	subs	r6, r3, r6
 8007a96:	4b59      	ldr	r3, [pc, #356]	; (8007bfc <_strtod_l+0x5a4>)
 8007a98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007a9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	f7f8 ff0a 	bl	80008bc <__aeabi_ddiv>
 8007aa8:	e7d6      	b.n	8007a58 <_strtod_l+0x400>
 8007aaa:	9b06      	ldr	r3, [sp, #24]
 8007aac:	eba5 0808 	sub.w	r8, r5, r8
 8007ab0:	4498      	add	r8, r3
 8007ab2:	f1b8 0f00 	cmp.w	r8, #0
 8007ab6:	dd74      	ble.n	8007ba2 <_strtod_l+0x54a>
 8007ab8:	f018 030f 	ands.w	r3, r8, #15
 8007abc:	d00a      	beq.n	8007ad4 <_strtod_l+0x47c>
 8007abe:	494f      	ldr	r1, [pc, #316]	; (8007bfc <_strtod_l+0x5a4>)
 8007ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	465b      	mov	r3, fp
 8007ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007acc:	f7f8 fdcc 	bl	8000668 <__aeabi_dmul>
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	f038 080f 	bics.w	r8, r8, #15
 8007ad8:	d04f      	beq.n	8007b7a <_strtod_l+0x522>
 8007ada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007ade:	dd22      	ble.n	8007b26 <_strtod_l+0x4ce>
 8007ae0:	2500      	movs	r5, #0
 8007ae2:	462e      	mov	r6, r5
 8007ae4:	9507      	str	r5, [sp, #28]
 8007ae6:	9505      	str	r5, [sp, #20]
 8007ae8:	2322      	movs	r3, #34	; 0x22
 8007aea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007c04 <_strtod_l+0x5ac>
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	f04f 0a00 	mov.w	sl, #0
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f43f adf2 	beq.w	80076e0 <_strtod_l+0x88>
 8007afc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 ff8c 	bl	8008a1c <_Bfree>
 8007b04:	9905      	ldr	r1, [sp, #20]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 ff88 	bl	8008a1c <_Bfree>
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 ff84 	bl	8008a1c <_Bfree>
 8007b14:	9907      	ldr	r1, [sp, #28]
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 ff80 	bl	8008a1c <_Bfree>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 ff7c 	bl	8008a1c <_Bfree>
 8007b24:	e5dc      	b.n	80076e0 <_strtod_l+0x88>
 8007b26:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <_strtod_l+0x5a8>)
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007b30:	4650      	mov	r0, sl
 8007b32:	4659      	mov	r1, fp
 8007b34:	4699      	mov	r9, r3
 8007b36:	f1b8 0f01 	cmp.w	r8, #1
 8007b3a:	dc21      	bgt.n	8007b80 <_strtod_l+0x528>
 8007b3c:	b10b      	cbz	r3, 8007b42 <_strtod_l+0x4ea>
 8007b3e:	4682      	mov	sl, r0
 8007b40:	468b      	mov	fp, r1
 8007b42:	4b2f      	ldr	r3, [pc, #188]	; (8007c00 <_strtod_l+0x5a8>)
 8007b44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007b48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	465b      	mov	r3, fp
 8007b50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007b54:	f7f8 fd88 	bl	8000668 <__aeabi_dmul>
 8007b58:	4b2a      	ldr	r3, [pc, #168]	; (8007c04 <_strtod_l+0x5ac>)
 8007b5a:	460a      	mov	r2, r1
 8007b5c:	400b      	ands	r3, r1
 8007b5e:	492a      	ldr	r1, [pc, #168]	; (8007c08 <_strtod_l+0x5b0>)
 8007b60:	428b      	cmp	r3, r1
 8007b62:	4682      	mov	sl, r0
 8007b64:	d8bc      	bhi.n	8007ae0 <_strtod_l+0x488>
 8007b66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b6a:	428b      	cmp	r3, r1
 8007b6c:	bf86      	itte	hi
 8007b6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007c0c <_strtod_l+0x5b4>
 8007b72:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	e084      	b.n	8007c8a <_strtod_l+0x632>
 8007b80:	f018 0f01 	tst.w	r8, #1
 8007b84:	d005      	beq.n	8007b92 <_strtod_l+0x53a>
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 fd6c 	bl	8000668 <__aeabi_dmul>
 8007b90:	2301      	movs	r3, #1
 8007b92:	9a04      	ldr	r2, [sp, #16]
 8007b94:	3208      	adds	r2, #8
 8007b96:	f109 0901 	add.w	r9, r9, #1
 8007b9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b9e:	9204      	str	r2, [sp, #16]
 8007ba0:	e7c9      	b.n	8007b36 <_strtod_l+0x4de>
 8007ba2:	d0ea      	beq.n	8007b7a <_strtod_l+0x522>
 8007ba4:	f1c8 0800 	rsb	r8, r8, #0
 8007ba8:	f018 020f 	ands.w	r2, r8, #15
 8007bac:	d00a      	beq.n	8007bc4 <_strtod_l+0x56c>
 8007bae:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <_strtod_l+0x5a4>)
 8007bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	4659      	mov	r1, fp
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f7f8 fe7e 	bl	80008bc <__aeabi_ddiv>
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	468b      	mov	fp, r1
 8007bc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007bc8:	d0d7      	beq.n	8007b7a <_strtod_l+0x522>
 8007bca:	f1b8 0f1f 	cmp.w	r8, #31
 8007bce:	dd1f      	ble.n	8007c10 <_strtod_l+0x5b8>
 8007bd0:	2500      	movs	r5, #0
 8007bd2:	462e      	mov	r6, r5
 8007bd4:	9507      	str	r5, [sp, #28]
 8007bd6:	9505      	str	r5, [sp, #20]
 8007bd8:	2322      	movs	r3, #34	; 0x22
 8007bda:	f04f 0a00 	mov.w	sl, #0
 8007bde:	f04f 0b00 	mov.w	fp, #0
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	e786      	b.n	8007af4 <_strtod_l+0x49c>
 8007be6:	bf00      	nop
 8007be8:	0800a5a5 	.word	0x0800a5a5
 8007bec:	0800a5bc 	.word	0x0800a5bc
 8007bf0:	0800a59c 	.word	0x0800a59c
 8007bf4:	0800a59f 	.word	0x0800a59f
 8007bf8:	0800a82f 	.word	0x0800a82f
 8007bfc:	0800a720 	.word	0x0800a720
 8007c00:	0800a6f8 	.word	0x0800a6f8
 8007c04:	7ff00000 	.word	0x7ff00000
 8007c08:	7ca00000 	.word	0x7ca00000
 8007c0c:	7fefffff 	.word	0x7fefffff
 8007c10:	f018 0310 	ands.w	r3, r8, #16
 8007c14:	bf18      	it	ne
 8007c16:	236a      	movne	r3, #106	; 0x6a
 8007c18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007fc8 <_strtod_l+0x970>
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	4650      	mov	r0, sl
 8007c20:	4659      	mov	r1, fp
 8007c22:	2300      	movs	r3, #0
 8007c24:	f018 0f01 	tst.w	r8, #1
 8007c28:	d004      	beq.n	8007c34 <_strtod_l+0x5dc>
 8007c2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007c2e:	f7f8 fd1b 	bl	8000668 <__aeabi_dmul>
 8007c32:	2301      	movs	r3, #1
 8007c34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007c38:	f109 0908 	add.w	r9, r9, #8
 8007c3c:	d1f2      	bne.n	8007c24 <_strtod_l+0x5cc>
 8007c3e:	b10b      	cbz	r3, 8007c44 <_strtod_l+0x5ec>
 8007c40:	4682      	mov	sl, r0
 8007c42:	468b      	mov	fp, r1
 8007c44:	9b04      	ldr	r3, [sp, #16]
 8007c46:	b1c3      	cbz	r3, 8007c7a <_strtod_l+0x622>
 8007c48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	4659      	mov	r1, fp
 8007c54:	dd11      	ble.n	8007c7a <_strtod_l+0x622>
 8007c56:	2b1f      	cmp	r3, #31
 8007c58:	f340 8124 	ble.w	8007ea4 <_strtod_l+0x84c>
 8007c5c:	2b34      	cmp	r3, #52	; 0x34
 8007c5e:	bfde      	ittt	le
 8007c60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c64:	f04f 33ff 	movle.w	r3, #4294967295
 8007c68:	fa03 f202 	lslle.w	r2, r3, r2
 8007c6c:	f04f 0a00 	mov.w	sl, #0
 8007c70:	bfcc      	ite	gt
 8007c72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c76:	ea02 0b01 	andle.w	fp, r2, r1
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4650      	mov	r0, sl
 8007c80:	4659      	mov	r1, fp
 8007c82:	f7f8 ff59 	bl	8000b38 <__aeabi_dcmpeq>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d1a2      	bne.n	8007bd0 <_strtod_l+0x578>
 8007c8a:	9b07      	ldr	r3, [sp, #28]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	9908      	ldr	r1, [sp, #32]
 8007c90:	462b      	mov	r3, r5
 8007c92:	463a      	mov	r2, r7
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 ff29 	bl	8008aec <__s2b>
 8007c9a:	9007      	str	r0, [sp, #28]
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f43f af1f 	beq.w	8007ae0 <_strtod_l+0x488>
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	1b9e      	subs	r6, r3, r6
 8007ca6:	9b06      	ldr	r3, [sp, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	bfb4      	ite	lt
 8007cac:	4633      	movlt	r3, r6
 8007cae:	2300      	movge	r3, #0
 8007cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007cba:	9312      	str	r3, [sp, #72]	; 0x48
 8007cbc:	462e      	mov	r6, r5
 8007cbe:	9b07      	ldr	r3, [sp, #28]
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	6859      	ldr	r1, [r3, #4]
 8007cc4:	f000 fe6a 	bl	800899c <_Balloc>
 8007cc8:	9005      	str	r0, [sp, #20]
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f43f af0c 	beq.w	8007ae8 <_strtod_l+0x490>
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	3202      	adds	r2, #2
 8007cd6:	f103 010c 	add.w	r1, r3, #12
 8007cda:	0092      	lsls	r2, r2, #2
 8007cdc:	300c      	adds	r0, #12
 8007cde:	f000 fe4f 	bl	8008980 <memcpy>
 8007ce2:	ec4b ab10 	vmov	d0, sl, fp
 8007ce6:	aa1a      	add	r2, sp, #104	; 0x68
 8007ce8:	a919      	add	r1, sp, #100	; 0x64
 8007cea:	4620      	mov	r0, r4
 8007cec:	f001 fa44 	bl	8009178 <__d2b>
 8007cf0:	ec4b ab18 	vmov	d8, sl, fp
 8007cf4:	9018      	str	r0, [sp, #96]	; 0x60
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	f43f aef6 	beq.w	8007ae8 <_strtod_l+0x490>
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f000 ff8e 	bl	8008c20 <__i2b>
 8007d04:	4606      	mov	r6, r0
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f43f aeee 	beq.w	8007ae8 <_strtod_l+0x490>
 8007d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d0e:	9904      	ldr	r1, [sp, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfab      	itete	ge
 8007d14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007d16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007d18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007d1e:	bfac      	ite	ge
 8007d20:	eb03 0902 	addge.w	r9, r3, r2
 8007d24:	1ad7      	sublt	r7, r2, r3
 8007d26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d28:	eba3 0801 	sub.w	r8, r3, r1
 8007d2c:	4490      	add	r8, r2
 8007d2e:	4ba1      	ldr	r3, [pc, #644]	; (8007fb4 <_strtod_l+0x95c>)
 8007d30:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d34:	4598      	cmp	r8, r3
 8007d36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d3a:	f280 80c7 	bge.w	8007ecc <_strtod_l+0x874>
 8007d3e:	eba3 0308 	sub.w	r3, r3, r8
 8007d42:	2b1f      	cmp	r3, #31
 8007d44:	eba2 0203 	sub.w	r2, r2, r3
 8007d48:	f04f 0101 	mov.w	r1, #1
 8007d4c:	f300 80b1 	bgt.w	8007eb2 <_strtod_l+0x85a>
 8007d50:	fa01 f303 	lsl.w	r3, r1, r3
 8007d54:	930d      	str	r3, [sp, #52]	; 0x34
 8007d56:	2300      	movs	r3, #0
 8007d58:	9308      	str	r3, [sp, #32]
 8007d5a:	eb09 0802 	add.w	r8, r9, r2
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	45c1      	cmp	r9, r8
 8007d62:	4417      	add	r7, r2
 8007d64:	441f      	add	r7, r3
 8007d66:	464b      	mov	r3, r9
 8007d68:	bfa8      	it	ge
 8007d6a:	4643      	movge	r3, r8
 8007d6c:	42bb      	cmp	r3, r7
 8007d6e:	bfa8      	it	ge
 8007d70:	463b      	movge	r3, r7
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bfc2      	ittt	gt
 8007d76:	eba8 0803 	subgt.w	r8, r8, r3
 8007d7a:	1aff      	subgt	r7, r7, r3
 8007d7c:	eba9 0903 	subgt.w	r9, r9, r3
 8007d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dd17      	ble.n	8007db6 <_strtod_l+0x75e>
 8007d86:	4631      	mov	r1, r6
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f001 f808 	bl	8008da0 <__pow5mult>
 8007d90:	4606      	mov	r6, r0
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aea8 	beq.w	8007ae8 <_strtod_l+0x490>
 8007d98:	4601      	mov	r1, r0
 8007d9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 ff55 	bl	8008c4c <__multiply>
 8007da2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f43f ae9f 	beq.w	8007ae8 <_strtod_l+0x490>
 8007daa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fe35 	bl	8008a1c <_Bfree>
 8007db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db4:	9318      	str	r3, [sp, #96]	; 0x60
 8007db6:	f1b8 0f00 	cmp.w	r8, #0
 8007dba:	f300 808c 	bgt.w	8007ed6 <_strtod_l+0x87e>
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dd08      	ble.n	8007dd6 <_strtod_l+0x77e>
 8007dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dc6:	9905      	ldr	r1, [sp, #20]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 ffe9 	bl	8008da0 <__pow5mult>
 8007dce:	9005      	str	r0, [sp, #20]
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	f43f ae89 	beq.w	8007ae8 <_strtod_l+0x490>
 8007dd6:	2f00      	cmp	r7, #0
 8007dd8:	dd08      	ble.n	8007dec <_strtod_l+0x794>
 8007dda:	9905      	ldr	r1, [sp, #20]
 8007ddc:	463a      	mov	r2, r7
 8007dde:	4620      	mov	r0, r4
 8007de0:	f001 f838 	bl	8008e54 <__lshift>
 8007de4:	9005      	str	r0, [sp, #20]
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f ae7e 	beq.w	8007ae8 <_strtod_l+0x490>
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	dd08      	ble.n	8007e04 <_strtod_l+0x7ac>
 8007df2:	4631      	mov	r1, r6
 8007df4:	464a      	mov	r2, r9
 8007df6:	4620      	mov	r0, r4
 8007df8:	f001 f82c 	bl	8008e54 <__lshift>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f ae72 	beq.w	8007ae8 <_strtod_l+0x490>
 8007e04:	9a05      	ldr	r2, [sp, #20]
 8007e06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 f8af 	bl	8008f6c <__mdiff>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f43f ae69 	beq.w	8007ae8 <_strtod_l+0x490>
 8007e16:	68c3      	ldr	r3, [r0, #12]
 8007e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60c3      	str	r3, [r0, #12]
 8007e1e:	4631      	mov	r1, r6
 8007e20:	f001 f888 	bl	8008f34 <__mcmp>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	da60      	bge.n	8007eea <_strtod_l+0x892>
 8007e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e2e:	f040 8082 	bne.w	8007f36 <_strtod_l+0x8de>
 8007e32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d17d      	bne.n	8007f36 <_strtod_l+0x8de>
 8007e3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e3e:	0d1b      	lsrs	r3, r3, #20
 8007e40:	051b      	lsls	r3, r3, #20
 8007e42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e46:	d976      	bls.n	8007f36 <_strtod_l+0x8de>
 8007e48:	696b      	ldr	r3, [r5, #20]
 8007e4a:	b913      	cbnz	r3, 8007e52 <_strtod_l+0x7fa>
 8007e4c:	692b      	ldr	r3, [r5, #16]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	dd71      	ble.n	8007f36 <_strtod_l+0x8de>
 8007e52:	4629      	mov	r1, r5
 8007e54:	2201      	movs	r2, #1
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 fffc 	bl	8008e54 <__lshift>
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4605      	mov	r5, r0
 8007e60:	f001 f868 	bl	8008f34 <__mcmp>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	dd66      	ble.n	8007f36 <_strtod_l+0x8de>
 8007e68:	9904      	ldr	r1, [sp, #16]
 8007e6a:	4a53      	ldr	r2, [pc, #332]	; (8007fb8 <_strtod_l+0x960>)
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	f000 8081 	beq.w	8007f76 <_strtod_l+0x91e>
 8007e74:	ea02 010b 	and.w	r1, r2, fp
 8007e78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e7c:	dc7b      	bgt.n	8007f76 <_strtod_l+0x91e>
 8007e7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e82:	f77f aea9 	ble.w	8007bd8 <_strtod_l+0x580>
 8007e86:	4b4d      	ldr	r3, [pc, #308]	; (8007fbc <_strtod_l+0x964>)
 8007e88:	4650      	mov	r0, sl
 8007e8a:	4659      	mov	r1, fp
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f7f8 fbeb 	bl	8000668 <__aeabi_dmul>
 8007e92:	460b      	mov	r3, r1
 8007e94:	4303      	orrs	r3, r0
 8007e96:	bf08      	it	eq
 8007e98:	2322      	moveq	r3, #34	; 0x22
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	468b      	mov	fp, r1
 8007e9e:	bf08      	it	eq
 8007ea0:	6023      	streq	r3, [r4, #0]
 8007ea2:	e62b      	b.n	8007afc <_strtod_l+0x4a4>
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	ea03 0a0a 	and.w	sl, r3, sl
 8007eb0:	e6e3      	b.n	8007c7a <_strtod_l+0x622>
 8007eb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007eb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007eba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ebe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007ec2:	fa01 f308 	lsl.w	r3, r1, r8
 8007ec6:	9308      	str	r3, [sp, #32]
 8007ec8:	910d      	str	r1, [sp, #52]	; 0x34
 8007eca:	e746      	b.n	8007d5a <_strtod_l+0x702>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9308      	str	r3, [sp, #32]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ed4:	e741      	b.n	8007d5a <_strtod_l+0x702>
 8007ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ed8:	4642      	mov	r2, r8
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 ffba 	bl	8008e54 <__lshift>
 8007ee0:	9018      	str	r0, [sp, #96]	; 0x60
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f47f af6b 	bne.w	8007dbe <_strtod_l+0x766>
 8007ee8:	e5fe      	b.n	8007ae8 <_strtod_l+0x490>
 8007eea:	465f      	mov	r7, fp
 8007eec:	d16e      	bne.n	8007fcc <_strtod_l+0x974>
 8007eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ef4:	b342      	cbz	r2, 8007f48 <_strtod_l+0x8f0>
 8007ef6:	4a32      	ldr	r2, [pc, #200]	; (8007fc0 <_strtod_l+0x968>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d128      	bne.n	8007f4e <_strtod_l+0x8f6>
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	4651      	mov	r1, sl
 8007f00:	b1eb      	cbz	r3, 8007f3e <_strtod_l+0x8e6>
 8007f02:	4b2d      	ldr	r3, [pc, #180]	; (8007fb8 <_strtod_l+0x960>)
 8007f04:	403b      	ands	r3, r7
 8007f06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0e:	d819      	bhi.n	8007f44 <_strtod_l+0x8ec>
 8007f10:	0d1b      	lsrs	r3, r3, #20
 8007f12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	4299      	cmp	r1, r3
 8007f1c:	d117      	bne.n	8007f4e <_strtod_l+0x8f6>
 8007f1e:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <_strtod_l+0x96c>)
 8007f20:	429f      	cmp	r7, r3
 8007f22:	d102      	bne.n	8007f2a <_strtod_l+0x8d2>
 8007f24:	3101      	adds	r1, #1
 8007f26:	f43f addf 	beq.w	8007ae8 <_strtod_l+0x490>
 8007f2a:	4b23      	ldr	r3, [pc, #140]	; (8007fb8 <_strtod_l+0x960>)
 8007f2c:	403b      	ands	r3, r7
 8007f2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007f32:	f04f 0a00 	mov.w	sl, #0
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1a4      	bne.n	8007e86 <_strtod_l+0x82e>
 8007f3c:	e5de      	b.n	8007afc <_strtod_l+0x4a4>
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	e7ea      	b.n	8007f1a <_strtod_l+0x8c2>
 8007f44:	4613      	mov	r3, r2
 8007f46:	e7e8      	b.n	8007f1a <_strtod_l+0x8c2>
 8007f48:	ea53 030a 	orrs.w	r3, r3, sl
 8007f4c:	d08c      	beq.n	8007e68 <_strtod_l+0x810>
 8007f4e:	9b08      	ldr	r3, [sp, #32]
 8007f50:	b1db      	cbz	r3, 8007f8a <_strtod_l+0x932>
 8007f52:	423b      	tst	r3, r7
 8007f54:	d0ef      	beq.n	8007f36 <_strtod_l+0x8de>
 8007f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f58:	9a04      	ldr	r2, [sp, #16]
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	b1c3      	cbz	r3, 8007f92 <_strtod_l+0x93a>
 8007f60:	f7ff fb5c 	bl	800761c <sulp>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	ec51 0b18 	vmov	r0, r1, d8
 8007f6c:	f7f8 f9c6 	bl	80002fc <__adddf3>
 8007f70:	4682      	mov	sl, r0
 8007f72:	468b      	mov	fp, r1
 8007f74:	e7df      	b.n	8007f36 <_strtod_l+0x8de>
 8007f76:	4013      	ands	r3, r2
 8007f78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f84:	f04f 3aff 	mov.w	sl, #4294967295
 8007f88:	e7d5      	b.n	8007f36 <_strtod_l+0x8de>
 8007f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f8c:	ea13 0f0a 	tst.w	r3, sl
 8007f90:	e7e0      	b.n	8007f54 <_strtod_l+0x8fc>
 8007f92:	f7ff fb43 	bl	800761c <sulp>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	ec51 0b18 	vmov	r0, r1, d8
 8007f9e:	f7f8 f9ab 	bl	80002f8 <__aeabi_dsub>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	468b      	mov	fp, r1
 8007faa:	f7f8 fdc5 	bl	8000b38 <__aeabi_dcmpeq>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d0c1      	beq.n	8007f36 <_strtod_l+0x8de>
 8007fb2:	e611      	b.n	8007bd8 <_strtod_l+0x580>
 8007fb4:	fffffc02 	.word	0xfffffc02
 8007fb8:	7ff00000 	.word	0x7ff00000
 8007fbc:	39500000 	.word	0x39500000
 8007fc0:	000fffff 	.word	0x000fffff
 8007fc4:	7fefffff 	.word	0x7fefffff
 8007fc8:	0800a5d0 	.word	0x0800a5d0
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f001 f92e 	bl	8009230 <__ratio>
 8007fd4:	ec59 8b10 	vmov	r8, r9, d0
 8007fd8:	ee10 0a10 	vmov	r0, s0
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	f7f8 fdbc 	bl	8000b60 <__aeabi_dcmple>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d07a      	beq.n	80080e2 <_strtod_l+0xa8a>
 8007fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d04a      	beq.n	8008088 <_strtod_l+0xa30>
 8007ff2:	4b95      	ldr	r3, [pc, #596]	; (8008248 <_strtod_l+0xbf0>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ffa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008248 <_strtod_l+0xbf0>
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	4b92      	ldr	r3, [pc, #584]	; (800824c <_strtod_l+0xbf4>)
 8008004:	403b      	ands	r3, r7
 8008006:	930d      	str	r3, [sp, #52]	; 0x34
 8008008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800800a:	4b91      	ldr	r3, [pc, #580]	; (8008250 <_strtod_l+0xbf8>)
 800800c:	429a      	cmp	r2, r3
 800800e:	f040 80b0 	bne.w	8008172 <_strtod_l+0xb1a>
 8008012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008016:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800801a:	ec4b ab10 	vmov	d0, sl, fp
 800801e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008022:	f001 f82d 	bl	8009080 <__ulp>
 8008026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800802a:	ec53 2b10 	vmov	r2, r3, d0
 800802e:	f7f8 fb1b 	bl	8000668 <__aeabi_dmul>
 8008032:	4652      	mov	r2, sl
 8008034:	465b      	mov	r3, fp
 8008036:	f7f8 f961 	bl	80002fc <__adddf3>
 800803a:	460b      	mov	r3, r1
 800803c:	4983      	ldr	r1, [pc, #524]	; (800824c <_strtod_l+0xbf4>)
 800803e:	4a85      	ldr	r2, [pc, #532]	; (8008254 <_strtod_l+0xbfc>)
 8008040:	4019      	ands	r1, r3
 8008042:	4291      	cmp	r1, r2
 8008044:	4682      	mov	sl, r0
 8008046:	d960      	bls.n	800810a <_strtod_l+0xab2>
 8008048:	ee18 3a90 	vmov	r3, s17
 800804c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008050:	4293      	cmp	r3, r2
 8008052:	d104      	bne.n	800805e <_strtod_l+0xa06>
 8008054:	ee18 3a10 	vmov	r3, s16
 8008058:	3301      	adds	r3, #1
 800805a:	f43f ad45 	beq.w	8007ae8 <_strtod_l+0x490>
 800805e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008260 <_strtod_l+0xc08>
 8008062:	f04f 3aff 	mov.w	sl, #4294967295
 8008066:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fcd7 	bl	8008a1c <_Bfree>
 800806e:	9905      	ldr	r1, [sp, #20]
 8008070:	4620      	mov	r0, r4
 8008072:	f000 fcd3 	bl	8008a1c <_Bfree>
 8008076:	4631      	mov	r1, r6
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fccf 	bl	8008a1c <_Bfree>
 800807e:	4629      	mov	r1, r5
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fccb 	bl	8008a1c <_Bfree>
 8008086:	e61a      	b.n	8007cbe <_strtod_l+0x666>
 8008088:	f1ba 0f00 	cmp.w	sl, #0
 800808c:	d11b      	bne.n	80080c6 <_strtod_l+0xa6e>
 800808e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008092:	b9f3      	cbnz	r3, 80080d2 <_strtod_l+0xa7a>
 8008094:	4b6c      	ldr	r3, [pc, #432]	; (8008248 <_strtod_l+0xbf0>)
 8008096:	2200      	movs	r2, #0
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 fd56 	bl	8000b4c <__aeabi_dcmplt>
 80080a0:	b9d0      	cbnz	r0, 80080d8 <_strtod_l+0xa80>
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	4b6c      	ldr	r3, [pc, #432]	; (8008258 <_strtod_l+0xc00>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	f7f8 fadd 	bl	8000668 <__aeabi_dmul>
 80080ae:	4680      	mov	r8, r0
 80080b0:	4689      	mov	r9, r1
 80080b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80080ba:	9315      	str	r3, [sp, #84]	; 0x54
 80080bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80080c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80080c4:	e79d      	b.n	8008002 <_strtod_l+0x9aa>
 80080c6:	f1ba 0f01 	cmp.w	sl, #1
 80080ca:	d102      	bne.n	80080d2 <_strtod_l+0xa7a>
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	f43f ad83 	beq.w	8007bd8 <_strtod_l+0x580>
 80080d2:	4b62      	ldr	r3, [pc, #392]	; (800825c <_strtod_l+0xc04>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	e78e      	b.n	8007ff6 <_strtod_l+0x99e>
 80080d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008258 <_strtod_l+0xc00>
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	e7e7      	b.n	80080b2 <_strtod_l+0xa5a>
 80080e2:	4b5d      	ldr	r3, [pc, #372]	; (8008258 <_strtod_l+0xc00>)
 80080e4:	4640      	mov	r0, r8
 80080e6:	4649      	mov	r1, r9
 80080e8:	2200      	movs	r2, #0
 80080ea:	f7f8 fabd 	bl	8000668 <__aeabi_dmul>
 80080ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	b933      	cbnz	r3, 8008104 <_strtod_l+0xaac>
 80080f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080fa:	900e      	str	r0, [sp, #56]	; 0x38
 80080fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008102:	e7dd      	b.n	80080c0 <_strtod_l+0xa68>
 8008104:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008108:	e7f9      	b.n	80080fe <_strtod_l+0xaa6>
 800810a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800810e:	9b04      	ldr	r3, [sp, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1a8      	bne.n	8008066 <_strtod_l+0xa0e>
 8008114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800811a:	0d1b      	lsrs	r3, r3, #20
 800811c:	051b      	lsls	r3, r3, #20
 800811e:	429a      	cmp	r2, r3
 8008120:	d1a1      	bne.n	8008066 <_strtod_l+0xa0e>
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 fd71 	bl	8000c0c <__aeabi_d2lz>
 800812a:	f7f8 fa6f 	bl	800060c <__aeabi_l2d>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	f7f8 f8df 	bl	80002f8 <__aeabi_dsub>
 800813a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800813c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008140:	ea43 030a 	orr.w	r3, r3, sl
 8008144:	4313      	orrs	r3, r2
 8008146:	4680      	mov	r8, r0
 8008148:	4689      	mov	r9, r1
 800814a:	d055      	beq.n	80081f8 <_strtod_l+0xba0>
 800814c:	a336      	add	r3, pc, #216	; (adr r3, 8008228 <_strtod_l+0xbd0>)
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f7f8 fcfb 	bl	8000b4c <__aeabi_dcmplt>
 8008156:	2800      	cmp	r0, #0
 8008158:	f47f acd0 	bne.w	8007afc <_strtod_l+0x4a4>
 800815c:	a334      	add	r3, pc, #208	; (adr r3, 8008230 <_strtod_l+0xbd8>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 fd0f 	bl	8000b88 <__aeabi_dcmpgt>
 800816a:	2800      	cmp	r0, #0
 800816c:	f43f af7b 	beq.w	8008066 <_strtod_l+0xa0e>
 8008170:	e4c4      	b.n	8007afc <_strtod_l+0x4a4>
 8008172:	9b04      	ldr	r3, [sp, #16]
 8008174:	b333      	cbz	r3, 80081c4 <_strtod_l+0xb6c>
 8008176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008178:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800817c:	d822      	bhi.n	80081c4 <_strtod_l+0xb6c>
 800817e:	a32e      	add	r3, pc, #184	; (adr r3, 8008238 <_strtod_l+0xbe0>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	4640      	mov	r0, r8
 8008186:	4649      	mov	r1, r9
 8008188:	f7f8 fcea 	bl	8000b60 <__aeabi_dcmple>
 800818c:	b1a0      	cbz	r0, 80081b8 <_strtod_l+0xb60>
 800818e:	4649      	mov	r1, r9
 8008190:	4640      	mov	r0, r8
 8008192:	f7f8 fd03 	bl	8000b9c <__aeabi_d2uiz>
 8008196:	2801      	cmp	r0, #1
 8008198:	bf38      	it	cc
 800819a:	2001      	movcc	r0, #1
 800819c:	f7f8 f9ea 	bl	8000574 <__aeabi_ui2d>
 80081a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a2:	4680      	mov	r8, r0
 80081a4:	4689      	mov	r9, r1
 80081a6:	bb23      	cbnz	r3, 80081f2 <_strtod_l+0xb9a>
 80081a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081ac:	9010      	str	r0, [sp, #64]	; 0x40
 80081ae:	9311      	str	r3, [sp, #68]	; 0x44
 80081b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	9309      	str	r3, [sp, #36]	; 0x24
 80081c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081c8:	eeb0 0a48 	vmov.f32	s0, s16
 80081cc:	eef0 0a68 	vmov.f32	s1, s17
 80081d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081d4:	f000 ff54 	bl	8009080 <__ulp>
 80081d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081dc:	ec53 2b10 	vmov	r2, r3, d0
 80081e0:	f7f8 fa42 	bl	8000668 <__aeabi_dmul>
 80081e4:	ec53 2b18 	vmov	r2, r3, d8
 80081e8:	f7f8 f888 	bl	80002fc <__adddf3>
 80081ec:	4682      	mov	sl, r0
 80081ee:	468b      	mov	fp, r1
 80081f0:	e78d      	b.n	800810e <_strtod_l+0xab6>
 80081f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80081f6:	e7db      	b.n	80081b0 <_strtod_l+0xb58>
 80081f8:	a311      	add	r3, pc, #68	; (adr r3, 8008240 <_strtod_l+0xbe8>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 fca5 	bl	8000b4c <__aeabi_dcmplt>
 8008202:	e7b2      	b.n	800816a <_strtod_l+0xb12>
 8008204:	2300      	movs	r3, #0
 8008206:	930a      	str	r3, [sp, #40]	; 0x28
 8008208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800820a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	f7ff ba6b 	b.w	80076e8 <_strtod_l+0x90>
 8008212:	2a65      	cmp	r2, #101	; 0x65
 8008214:	f43f ab5f 	beq.w	80078d6 <_strtod_l+0x27e>
 8008218:	2a45      	cmp	r2, #69	; 0x45
 800821a:	f43f ab5c 	beq.w	80078d6 <_strtod_l+0x27e>
 800821e:	2301      	movs	r3, #1
 8008220:	f7ff bb94 	b.w	800794c <_strtod_l+0x2f4>
 8008224:	f3af 8000 	nop.w
 8008228:	94a03595 	.word	0x94a03595
 800822c:	3fdfffff 	.word	0x3fdfffff
 8008230:	35afe535 	.word	0x35afe535
 8008234:	3fe00000 	.word	0x3fe00000
 8008238:	ffc00000 	.word	0xffc00000
 800823c:	41dfffff 	.word	0x41dfffff
 8008240:	94a03595 	.word	0x94a03595
 8008244:	3fcfffff 	.word	0x3fcfffff
 8008248:	3ff00000 	.word	0x3ff00000
 800824c:	7ff00000 	.word	0x7ff00000
 8008250:	7fe00000 	.word	0x7fe00000
 8008254:	7c9fffff 	.word	0x7c9fffff
 8008258:	3fe00000 	.word	0x3fe00000
 800825c:	bff00000 	.word	0xbff00000
 8008260:	7fefffff 	.word	0x7fefffff

08008264 <strtod>:
 8008264:	460a      	mov	r2, r1
 8008266:	4601      	mov	r1, r0
 8008268:	4802      	ldr	r0, [pc, #8]	; (8008274 <strtod+0x10>)
 800826a:	4b03      	ldr	r3, [pc, #12]	; (8008278 <strtod+0x14>)
 800826c:	6800      	ldr	r0, [r0, #0]
 800826e:	f7ff b9f3 	b.w	8007658 <_strtod_l>
 8008272:	bf00      	nop
 8008274:	2000000c 	.word	0x2000000c
 8008278:	20000074 	.word	0x20000074

0800827c <rshift>:
 800827c:	6903      	ldr	r3, [r0, #16]
 800827e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008286:	ea4f 1261 	mov.w	r2, r1, asr #5
 800828a:	f100 0414 	add.w	r4, r0, #20
 800828e:	dd45      	ble.n	800831c <rshift+0xa0>
 8008290:	f011 011f 	ands.w	r1, r1, #31
 8008294:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008298:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800829c:	d10c      	bne.n	80082b8 <rshift+0x3c>
 800829e:	f100 0710 	add.w	r7, r0, #16
 80082a2:	4629      	mov	r1, r5
 80082a4:	42b1      	cmp	r1, r6
 80082a6:	d334      	bcc.n	8008312 <rshift+0x96>
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	1eea      	subs	r2, r5, #3
 80082ae:	4296      	cmp	r6, r2
 80082b0:	bf38      	it	cc
 80082b2:	2300      	movcc	r3, #0
 80082b4:	4423      	add	r3, r4
 80082b6:	e015      	b.n	80082e4 <rshift+0x68>
 80082b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082bc:	f1c1 0820 	rsb	r8, r1, #32
 80082c0:	40cf      	lsrs	r7, r1
 80082c2:	f105 0e04 	add.w	lr, r5, #4
 80082c6:	46a1      	mov	r9, r4
 80082c8:	4576      	cmp	r6, lr
 80082ca:	46f4      	mov	ip, lr
 80082cc:	d815      	bhi.n	80082fa <rshift+0x7e>
 80082ce:	1a9a      	subs	r2, r3, r2
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	3a04      	subs	r2, #4
 80082d4:	3501      	adds	r5, #1
 80082d6:	42ae      	cmp	r6, r5
 80082d8:	bf38      	it	cc
 80082da:	2200      	movcc	r2, #0
 80082dc:	18a3      	adds	r3, r4, r2
 80082de:	50a7      	str	r7, [r4, r2]
 80082e0:	b107      	cbz	r7, 80082e4 <rshift+0x68>
 80082e2:	3304      	adds	r3, #4
 80082e4:	1b1a      	subs	r2, r3, r4
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082ec:	bf08      	it	eq
 80082ee:	2300      	moveq	r3, #0
 80082f0:	6102      	str	r2, [r0, #16]
 80082f2:	bf08      	it	eq
 80082f4:	6143      	streq	r3, [r0, #20]
 80082f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082fa:	f8dc c000 	ldr.w	ip, [ip]
 80082fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008302:	ea4c 0707 	orr.w	r7, ip, r7
 8008306:	f849 7b04 	str.w	r7, [r9], #4
 800830a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800830e:	40cf      	lsrs	r7, r1
 8008310:	e7da      	b.n	80082c8 <rshift+0x4c>
 8008312:	f851 cb04 	ldr.w	ip, [r1], #4
 8008316:	f847 cf04 	str.w	ip, [r7, #4]!
 800831a:	e7c3      	b.n	80082a4 <rshift+0x28>
 800831c:	4623      	mov	r3, r4
 800831e:	e7e1      	b.n	80082e4 <rshift+0x68>

08008320 <__hexdig_fun>:
 8008320:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008324:	2b09      	cmp	r3, #9
 8008326:	d802      	bhi.n	800832e <__hexdig_fun+0xe>
 8008328:	3820      	subs	r0, #32
 800832a:	b2c0      	uxtb	r0, r0
 800832c:	4770      	bx	lr
 800832e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008332:	2b05      	cmp	r3, #5
 8008334:	d801      	bhi.n	800833a <__hexdig_fun+0x1a>
 8008336:	3847      	subs	r0, #71	; 0x47
 8008338:	e7f7      	b.n	800832a <__hexdig_fun+0xa>
 800833a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800833e:	2b05      	cmp	r3, #5
 8008340:	d801      	bhi.n	8008346 <__hexdig_fun+0x26>
 8008342:	3827      	subs	r0, #39	; 0x27
 8008344:	e7f1      	b.n	800832a <__hexdig_fun+0xa>
 8008346:	2000      	movs	r0, #0
 8008348:	4770      	bx	lr
	...

0800834c <__gethex>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	ed2d 8b02 	vpush	{d8}
 8008354:	b089      	sub	sp, #36	; 0x24
 8008356:	ee08 0a10 	vmov	s16, r0
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	4bb4      	ldr	r3, [pc, #720]	; (8008630 <__gethex+0x2e4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	4618      	mov	r0, r3
 8008364:	468b      	mov	fp, r1
 8008366:	4690      	mov	r8, r2
 8008368:	f7f7 ff64 	bl	8000234 <strlen>
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	f8db 2000 	ldr.w	r2, [fp]
 8008372:	4403      	add	r3, r0
 8008374:	4682      	mov	sl, r0
 8008376:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800837a:	9305      	str	r3, [sp, #20]
 800837c:	1c93      	adds	r3, r2, #2
 800837e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008382:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008386:	32fe      	adds	r2, #254	; 0xfe
 8008388:	18d1      	adds	r1, r2, r3
 800838a:	461f      	mov	r7, r3
 800838c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008390:	9100      	str	r1, [sp, #0]
 8008392:	2830      	cmp	r0, #48	; 0x30
 8008394:	d0f8      	beq.n	8008388 <__gethex+0x3c>
 8008396:	f7ff ffc3 	bl	8008320 <__hexdig_fun>
 800839a:	4604      	mov	r4, r0
 800839c:	2800      	cmp	r0, #0
 800839e:	d13a      	bne.n	8008416 <__gethex+0xca>
 80083a0:	9901      	ldr	r1, [sp, #4]
 80083a2:	4652      	mov	r2, sl
 80083a4:	4638      	mov	r0, r7
 80083a6:	f001 f87f 	bl	80094a8 <strncmp>
 80083aa:	4605      	mov	r5, r0
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d168      	bne.n	8008482 <__gethex+0x136>
 80083b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80083b4:	eb07 060a 	add.w	r6, r7, sl
 80083b8:	f7ff ffb2 	bl	8008320 <__hexdig_fun>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d062      	beq.n	8008486 <__gethex+0x13a>
 80083c0:	4633      	mov	r3, r6
 80083c2:	7818      	ldrb	r0, [r3, #0]
 80083c4:	2830      	cmp	r0, #48	; 0x30
 80083c6:	461f      	mov	r7, r3
 80083c8:	f103 0301 	add.w	r3, r3, #1
 80083cc:	d0f9      	beq.n	80083c2 <__gethex+0x76>
 80083ce:	f7ff ffa7 	bl	8008320 <__hexdig_fun>
 80083d2:	2301      	movs	r3, #1
 80083d4:	fab0 f480 	clz	r4, r0
 80083d8:	0964      	lsrs	r4, r4, #5
 80083da:	4635      	mov	r5, r6
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	463a      	mov	r2, r7
 80083e0:	4616      	mov	r6, r2
 80083e2:	3201      	adds	r2, #1
 80083e4:	7830      	ldrb	r0, [r6, #0]
 80083e6:	f7ff ff9b 	bl	8008320 <__hexdig_fun>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d1f8      	bne.n	80083e0 <__gethex+0x94>
 80083ee:	9901      	ldr	r1, [sp, #4]
 80083f0:	4652      	mov	r2, sl
 80083f2:	4630      	mov	r0, r6
 80083f4:	f001 f858 	bl	80094a8 <strncmp>
 80083f8:	b980      	cbnz	r0, 800841c <__gethex+0xd0>
 80083fa:	b94d      	cbnz	r5, 8008410 <__gethex+0xc4>
 80083fc:	eb06 050a 	add.w	r5, r6, sl
 8008400:	462a      	mov	r2, r5
 8008402:	4616      	mov	r6, r2
 8008404:	3201      	adds	r2, #1
 8008406:	7830      	ldrb	r0, [r6, #0]
 8008408:	f7ff ff8a 	bl	8008320 <__hexdig_fun>
 800840c:	2800      	cmp	r0, #0
 800840e:	d1f8      	bne.n	8008402 <__gethex+0xb6>
 8008410:	1bad      	subs	r5, r5, r6
 8008412:	00ad      	lsls	r5, r5, #2
 8008414:	e004      	b.n	8008420 <__gethex+0xd4>
 8008416:	2400      	movs	r4, #0
 8008418:	4625      	mov	r5, r4
 800841a:	e7e0      	b.n	80083de <__gethex+0x92>
 800841c:	2d00      	cmp	r5, #0
 800841e:	d1f7      	bne.n	8008410 <__gethex+0xc4>
 8008420:	7833      	ldrb	r3, [r6, #0]
 8008422:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008426:	2b50      	cmp	r3, #80	; 0x50
 8008428:	d13b      	bne.n	80084a2 <__gethex+0x156>
 800842a:	7873      	ldrb	r3, [r6, #1]
 800842c:	2b2b      	cmp	r3, #43	; 0x2b
 800842e:	d02c      	beq.n	800848a <__gethex+0x13e>
 8008430:	2b2d      	cmp	r3, #45	; 0x2d
 8008432:	d02e      	beq.n	8008492 <__gethex+0x146>
 8008434:	1c71      	adds	r1, r6, #1
 8008436:	f04f 0900 	mov.w	r9, #0
 800843a:	7808      	ldrb	r0, [r1, #0]
 800843c:	f7ff ff70 	bl	8008320 <__hexdig_fun>
 8008440:	1e43      	subs	r3, r0, #1
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b18      	cmp	r3, #24
 8008446:	d82c      	bhi.n	80084a2 <__gethex+0x156>
 8008448:	f1a0 0210 	sub.w	r2, r0, #16
 800844c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008450:	f7ff ff66 	bl	8008320 <__hexdig_fun>
 8008454:	1e43      	subs	r3, r0, #1
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b18      	cmp	r3, #24
 800845a:	d91d      	bls.n	8008498 <__gethex+0x14c>
 800845c:	f1b9 0f00 	cmp.w	r9, #0
 8008460:	d000      	beq.n	8008464 <__gethex+0x118>
 8008462:	4252      	negs	r2, r2
 8008464:	4415      	add	r5, r2
 8008466:	f8cb 1000 	str.w	r1, [fp]
 800846a:	b1e4      	cbz	r4, 80084a6 <__gethex+0x15a>
 800846c:	9b00      	ldr	r3, [sp, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bf14      	ite	ne
 8008472:	2700      	movne	r7, #0
 8008474:	2706      	moveq	r7, #6
 8008476:	4638      	mov	r0, r7
 8008478:	b009      	add	sp, #36	; 0x24
 800847a:	ecbd 8b02 	vpop	{d8}
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	463e      	mov	r6, r7
 8008484:	4625      	mov	r5, r4
 8008486:	2401      	movs	r4, #1
 8008488:	e7ca      	b.n	8008420 <__gethex+0xd4>
 800848a:	f04f 0900 	mov.w	r9, #0
 800848e:	1cb1      	adds	r1, r6, #2
 8008490:	e7d3      	b.n	800843a <__gethex+0xee>
 8008492:	f04f 0901 	mov.w	r9, #1
 8008496:	e7fa      	b.n	800848e <__gethex+0x142>
 8008498:	230a      	movs	r3, #10
 800849a:	fb03 0202 	mla	r2, r3, r2, r0
 800849e:	3a10      	subs	r2, #16
 80084a0:	e7d4      	b.n	800844c <__gethex+0x100>
 80084a2:	4631      	mov	r1, r6
 80084a4:	e7df      	b.n	8008466 <__gethex+0x11a>
 80084a6:	1bf3      	subs	r3, r6, r7
 80084a8:	3b01      	subs	r3, #1
 80084aa:	4621      	mov	r1, r4
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	dc0b      	bgt.n	80084c8 <__gethex+0x17c>
 80084b0:	ee18 0a10 	vmov	r0, s16
 80084b4:	f000 fa72 	bl	800899c <_Balloc>
 80084b8:	4604      	mov	r4, r0
 80084ba:	b940      	cbnz	r0, 80084ce <__gethex+0x182>
 80084bc:	4b5d      	ldr	r3, [pc, #372]	; (8008634 <__gethex+0x2e8>)
 80084be:	4602      	mov	r2, r0
 80084c0:	21de      	movs	r1, #222	; 0xde
 80084c2:	485d      	ldr	r0, [pc, #372]	; (8008638 <__gethex+0x2ec>)
 80084c4:	f001 f812 	bl	80094ec <__assert_func>
 80084c8:	3101      	adds	r1, #1
 80084ca:	105b      	asrs	r3, r3, #1
 80084cc:	e7ee      	b.n	80084ac <__gethex+0x160>
 80084ce:	f100 0914 	add.w	r9, r0, #20
 80084d2:	f04f 0b00 	mov.w	fp, #0
 80084d6:	f1ca 0301 	rsb	r3, sl, #1
 80084da:	f8cd 9008 	str.w	r9, [sp, #8]
 80084de:	f8cd b000 	str.w	fp, [sp]
 80084e2:	9306      	str	r3, [sp, #24]
 80084e4:	42b7      	cmp	r7, r6
 80084e6:	d340      	bcc.n	800856a <__gethex+0x21e>
 80084e8:	9802      	ldr	r0, [sp, #8]
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	f840 3b04 	str.w	r3, [r0], #4
 80084f0:	eba0 0009 	sub.w	r0, r0, r9
 80084f4:	1080      	asrs	r0, r0, #2
 80084f6:	0146      	lsls	r6, r0, #5
 80084f8:	6120      	str	r0, [r4, #16]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fb40 	bl	8008b80 <__hi0bits>
 8008500:	1a30      	subs	r0, r6, r0
 8008502:	f8d8 6000 	ldr.w	r6, [r8]
 8008506:	42b0      	cmp	r0, r6
 8008508:	dd63      	ble.n	80085d2 <__gethex+0x286>
 800850a:	1b87      	subs	r7, r0, r6
 800850c:	4639      	mov	r1, r7
 800850e:	4620      	mov	r0, r4
 8008510:	f000 fee4 	bl	80092dc <__any_on>
 8008514:	4682      	mov	sl, r0
 8008516:	b1a8      	cbz	r0, 8008544 <__gethex+0x1f8>
 8008518:	1e7b      	subs	r3, r7, #1
 800851a:	1159      	asrs	r1, r3, #5
 800851c:	f003 021f 	and.w	r2, r3, #31
 8008520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008524:	f04f 0a01 	mov.w	sl, #1
 8008528:	fa0a f202 	lsl.w	r2, sl, r2
 800852c:	420a      	tst	r2, r1
 800852e:	d009      	beq.n	8008544 <__gethex+0x1f8>
 8008530:	4553      	cmp	r3, sl
 8008532:	dd05      	ble.n	8008540 <__gethex+0x1f4>
 8008534:	1eb9      	subs	r1, r7, #2
 8008536:	4620      	mov	r0, r4
 8008538:	f000 fed0 	bl	80092dc <__any_on>
 800853c:	2800      	cmp	r0, #0
 800853e:	d145      	bne.n	80085cc <__gethex+0x280>
 8008540:	f04f 0a02 	mov.w	sl, #2
 8008544:	4639      	mov	r1, r7
 8008546:	4620      	mov	r0, r4
 8008548:	f7ff fe98 	bl	800827c <rshift>
 800854c:	443d      	add	r5, r7
 800854e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008552:	42ab      	cmp	r3, r5
 8008554:	da4c      	bge.n	80085f0 <__gethex+0x2a4>
 8008556:	ee18 0a10 	vmov	r0, s16
 800855a:	4621      	mov	r1, r4
 800855c:	f000 fa5e 	bl	8008a1c <_Bfree>
 8008560:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008562:	2300      	movs	r3, #0
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	27a3      	movs	r7, #163	; 0xa3
 8008568:	e785      	b.n	8008476 <__gethex+0x12a>
 800856a:	1e73      	subs	r3, r6, #1
 800856c:	9a05      	ldr	r2, [sp, #20]
 800856e:	9303      	str	r3, [sp, #12]
 8008570:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008574:	4293      	cmp	r3, r2
 8008576:	d019      	beq.n	80085ac <__gethex+0x260>
 8008578:	f1bb 0f20 	cmp.w	fp, #32
 800857c:	d107      	bne.n	800858e <__gethex+0x242>
 800857e:	9b02      	ldr	r3, [sp, #8]
 8008580:	9a00      	ldr	r2, [sp, #0]
 8008582:	f843 2b04 	str.w	r2, [r3], #4
 8008586:	9302      	str	r3, [sp, #8]
 8008588:	2300      	movs	r3, #0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	469b      	mov	fp, r3
 800858e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008592:	f7ff fec5 	bl	8008320 <__hexdig_fun>
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	f000 000f 	and.w	r0, r0, #15
 800859c:	fa00 f00b 	lsl.w	r0, r0, fp
 80085a0:	4303      	orrs	r3, r0
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	f10b 0b04 	add.w	fp, fp, #4
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	e00d      	b.n	80085c8 <__gethex+0x27c>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	9a06      	ldr	r2, [sp, #24]
 80085b0:	4413      	add	r3, r2
 80085b2:	42bb      	cmp	r3, r7
 80085b4:	d3e0      	bcc.n	8008578 <__gethex+0x22c>
 80085b6:	4618      	mov	r0, r3
 80085b8:	9901      	ldr	r1, [sp, #4]
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	4652      	mov	r2, sl
 80085be:	f000 ff73 	bl	80094a8 <strncmp>
 80085c2:	9b07      	ldr	r3, [sp, #28]
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d1d7      	bne.n	8008578 <__gethex+0x22c>
 80085c8:	461e      	mov	r6, r3
 80085ca:	e78b      	b.n	80084e4 <__gethex+0x198>
 80085cc:	f04f 0a03 	mov.w	sl, #3
 80085d0:	e7b8      	b.n	8008544 <__gethex+0x1f8>
 80085d2:	da0a      	bge.n	80085ea <__gethex+0x29e>
 80085d4:	1a37      	subs	r7, r6, r0
 80085d6:	4621      	mov	r1, r4
 80085d8:	ee18 0a10 	vmov	r0, s16
 80085dc:	463a      	mov	r2, r7
 80085de:	f000 fc39 	bl	8008e54 <__lshift>
 80085e2:	1bed      	subs	r5, r5, r7
 80085e4:	4604      	mov	r4, r0
 80085e6:	f100 0914 	add.w	r9, r0, #20
 80085ea:	f04f 0a00 	mov.w	sl, #0
 80085ee:	e7ae      	b.n	800854e <__gethex+0x202>
 80085f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085f4:	42a8      	cmp	r0, r5
 80085f6:	dd72      	ble.n	80086de <__gethex+0x392>
 80085f8:	1b45      	subs	r5, r0, r5
 80085fa:	42ae      	cmp	r6, r5
 80085fc:	dc36      	bgt.n	800866c <__gethex+0x320>
 80085fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d02a      	beq.n	800865c <__gethex+0x310>
 8008606:	2b03      	cmp	r3, #3
 8008608:	d02c      	beq.n	8008664 <__gethex+0x318>
 800860a:	2b01      	cmp	r3, #1
 800860c:	d11c      	bne.n	8008648 <__gethex+0x2fc>
 800860e:	42ae      	cmp	r6, r5
 8008610:	d11a      	bne.n	8008648 <__gethex+0x2fc>
 8008612:	2e01      	cmp	r6, #1
 8008614:	d112      	bne.n	800863c <__gethex+0x2f0>
 8008616:	9a04      	ldr	r2, [sp, #16]
 8008618:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	2301      	movs	r3, #1
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	f8c9 3000 	str.w	r3, [r9]
 8008626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008628:	2762      	movs	r7, #98	; 0x62
 800862a:	601c      	str	r4, [r3, #0]
 800862c:	e723      	b.n	8008476 <__gethex+0x12a>
 800862e:	bf00      	nop
 8008630:	0800a670 	.word	0x0800a670
 8008634:	0800a5f8 	.word	0x0800a5f8
 8008638:	0800a609 	.word	0x0800a609
 800863c:	1e71      	subs	r1, r6, #1
 800863e:	4620      	mov	r0, r4
 8008640:	f000 fe4c 	bl	80092dc <__any_on>
 8008644:	2800      	cmp	r0, #0
 8008646:	d1e6      	bne.n	8008616 <__gethex+0x2ca>
 8008648:	ee18 0a10 	vmov	r0, s16
 800864c:	4621      	mov	r1, r4
 800864e:	f000 f9e5 	bl	8008a1c <_Bfree>
 8008652:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008654:	2300      	movs	r3, #0
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	2750      	movs	r7, #80	; 0x50
 800865a:	e70c      	b.n	8008476 <__gethex+0x12a>
 800865c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f2      	bne.n	8008648 <__gethex+0x2fc>
 8008662:	e7d8      	b.n	8008616 <__gethex+0x2ca>
 8008664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1d5      	bne.n	8008616 <__gethex+0x2ca>
 800866a:	e7ed      	b.n	8008648 <__gethex+0x2fc>
 800866c:	1e6f      	subs	r7, r5, #1
 800866e:	f1ba 0f00 	cmp.w	sl, #0
 8008672:	d131      	bne.n	80086d8 <__gethex+0x38c>
 8008674:	b127      	cbz	r7, 8008680 <__gethex+0x334>
 8008676:	4639      	mov	r1, r7
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fe2f 	bl	80092dc <__any_on>
 800867e:	4682      	mov	sl, r0
 8008680:	117b      	asrs	r3, r7, #5
 8008682:	2101      	movs	r1, #1
 8008684:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008688:	f007 071f 	and.w	r7, r7, #31
 800868c:	fa01 f707 	lsl.w	r7, r1, r7
 8008690:	421f      	tst	r7, r3
 8008692:	4629      	mov	r1, r5
 8008694:	4620      	mov	r0, r4
 8008696:	bf18      	it	ne
 8008698:	f04a 0a02 	orrne.w	sl, sl, #2
 800869c:	1b76      	subs	r6, r6, r5
 800869e:	f7ff fded 	bl	800827c <rshift>
 80086a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086a6:	2702      	movs	r7, #2
 80086a8:	f1ba 0f00 	cmp.w	sl, #0
 80086ac:	d048      	beq.n	8008740 <__gethex+0x3f4>
 80086ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d015      	beq.n	80086e2 <__gethex+0x396>
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d017      	beq.n	80086ea <__gethex+0x39e>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d109      	bne.n	80086d2 <__gethex+0x386>
 80086be:	f01a 0f02 	tst.w	sl, #2
 80086c2:	d006      	beq.n	80086d2 <__gethex+0x386>
 80086c4:	f8d9 0000 	ldr.w	r0, [r9]
 80086c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80086cc:	f01a 0f01 	tst.w	sl, #1
 80086d0:	d10e      	bne.n	80086f0 <__gethex+0x3a4>
 80086d2:	f047 0710 	orr.w	r7, r7, #16
 80086d6:	e033      	b.n	8008740 <__gethex+0x3f4>
 80086d8:	f04f 0a01 	mov.w	sl, #1
 80086dc:	e7d0      	b.n	8008680 <__gethex+0x334>
 80086de:	2701      	movs	r7, #1
 80086e0:	e7e2      	b.n	80086a8 <__gethex+0x35c>
 80086e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e4:	f1c3 0301 	rsb	r3, r3, #1
 80086e8:	9315      	str	r3, [sp, #84]	; 0x54
 80086ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <__gethex+0x386>
 80086f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086f4:	f104 0314 	add.w	r3, r4, #20
 80086f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f853 2b04 	ldr.w	r2, [r3], #4
 800870a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800870e:	d01c      	beq.n	800874a <__gethex+0x3fe>
 8008710:	3201      	adds	r2, #1
 8008712:	6002      	str	r2, [r0, #0]
 8008714:	2f02      	cmp	r7, #2
 8008716:	f104 0314 	add.w	r3, r4, #20
 800871a:	d13f      	bne.n	800879c <__gethex+0x450>
 800871c:	f8d8 2000 	ldr.w	r2, [r8]
 8008720:	3a01      	subs	r2, #1
 8008722:	42b2      	cmp	r2, r6
 8008724:	d10a      	bne.n	800873c <__gethex+0x3f0>
 8008726:	1171      	asrs	r1, r6, #5
 8008728:	2201      	movs	r2, #1
 800872a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800872e:	f006 061f 	and.w	r6, r6, #31
 8008732:	fa02 f606 	lsl.w	r6, r2, r6
 8008736:	421e      	tst	r6, r3
 8008738:	bf18      	it	ne
 800873a:	4617      	movne	r7, r2
 800873c:	f047 0720 	orr.w	r7, r7, #32
 8008740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008742:	601c      	str	r4, [r3, #0]
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	601d      	str	r5, [r3, #0]
 8008748:	e695      	b.n	8008476 <__gethex+0x12a>
 800874a:	4299      	cmp	r1, r3
 800874c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008750:	d8d8      	bhi.n	8008704 <__gethex+0x3b8>
 8008752:	68a3      	ldr	r3, [r4, #8]
 8008754:	459b      	cmp	fp, r3
 8008756:	db19      	blt.n	800878c <__gethex+0x440>
 8008758:	6861      	ldr	r1, [r4, #4]
 800875a:	ee18 0a10 	vmov	r0, s16
 800875e:	3101      	adds	r1, #1
 8008760:	f000 f91c 	bl	800899c <_Balloc>
 8008764:	4681      	mov	r9, r0
 8008766:	b918      	cbnz	r0, 8008770 <__gethex+0x424>
 8008768:	4b1a      	ldr	r3, [pc, #104]	; (80087d4 <__gethex+0x488>)
 800876a:	4602      	mov	r2, r0
 800876c:	2184      	movs	r1, #132	; 0x84
 800876e:	e6a8      	b.n	80084c2 <__gethex+0x176>
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	3202      	adds	r2, #2
 8008774:	f104 010c 	add.w	r1, r4, #12
 8008778:	0092      	lsls	r2, r2, #2
 800877a:	300c      	adds	r0, #12
 800877c:	f000 f900 	bl	8008980 <memcpy>
 8008780:	4621      	mov	r1, r4
 8008782:	ee18 0a10 	vmov	r0, s16
 8008786:	f000 f949 	bl	8008a1c <_Bfree>
 800878a:	464c      	mov	r4, r9
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008794:	6122      	str	r2, [r4, #16]
 8008796:	2201      	movs	r2, #1
 8008798:	615a      	str	r2, [r3, #20]
 800879a:	e7bb      	b.n	8008714 <__gethex+0x3c8>
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	455a      	cmp	r2, fp
 80087a0:	dd0b      	ble.n	80087ba <__gethex+0x46e>
 80087a2:	2101      	movs	r1, #1
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7ff fd69 	bl	800827c <rshift>
 80087aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087ae:	3501      	adds	r5, #1
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	f6ff aed0 	blt.w	8008556 <__gethex+0x20a>
 80087b6:	2701      	movs	r7, #1
 80087b8:	e7c0      	b.n	800873c <__gethex+0x3f0>
 80087ba:	f016 061f 	ands.w	r6, r6, #31
 80087be:	d0fa      	beq.n	80087b6 <__gethex+0x46a>
 80087c0:	4453      	add	r3, sl
 80087c2:	f1c6 0620 	rsb	r6, r6, #32
 80087c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087ca:	f000 f9d9 	bl	8008b80 <__hi0bits>
 80087ce:	42b0      	cmp	r0, r6
 80087d0:	dbe7      	blt.n	80087a2 <__gethex+0x456>
 80087d2:	e7f0      	b.n	80087b6 <__gethex+0x46a>
 80087d4:	0800a5f8 	.word	0x0800a5f8

080087d8 <L_shift>:
 80087d8:	f1c2 0208 	rsb	r2, r2, #8
 80087dc:	0092      	lsls	r2, r2, #2
 80087de:	b570      	push	{r4, r5, r6, lr}
 80087e0:	f1c2 0620 	rsb	r6, r2, #32
 80087e4:	6843      	ldr	r3, [r0, #4]
 80087e6:	6804      	ldr	r4, [r0, #0]
 80087e8:	fa03 f506 	lsl.w	r5, r3, r6
 80087ec:	432c      	orrs	r4, r5
 80087ee:	40d3      	lsrs	r3, r2
 80087f0:	6004      	str	r4, [r0, #0]
 80087f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80087f6:	4288      	cmp	r0, r1
 80087f8:	d3f4      	bcc.n	80087e4 <L_shift+0xc>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}

080087fc <__match>:
 80087fc:	b530      	push	{r4, r5, lr}
 80087fe:	6803      	ldr	r3, [r0, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008806:	b914      	cbnz	r4, 800880e <__match+0x12>
 8008808:	6003      	str	r3, [r0, #0]
 800880a:	2001      	movs	r0, #1
 800880c:	bd30      	pop	{r4, r5, pc}
 800880e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008812:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008816:	2d19      	cmp	r5, #25
 8008818:	bf98      	it	ls
 800881a:	3220      	addls	r2, #32
 800881c:	42a2      	cmp	r2, r4
 800881e:	d0f0      	beq.n	8008802 <__match+0x6>
 8008820:	2000      	movs	r0, #0
 8008822:	e7f3      	b.n	800880c <__match+0x10>

08008824 <__hexnan>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	680b      	ldr	r3, [r1, #0]
 800882a:	115e      	asrs	r6, r3, #5
 800882c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008830:	f013 031f 	ands.w	r3, r3, #31
 8008834:	b087      	sub	sp, #28
 8008836:	bf18      	it	ne
 8008838:	3604      	addne	r6, #4
 800883a:	2500      	movs	r5, #0
 800883c:	1f37      	subs	r7, r6, #4
 800883e:	4690      	mov	r8, r2
 8008840:	6802      	ldr	r2, [r0, #0]
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	4682      	mov	sl, r0
 8008846:	f846 5c04 	str.w	r5, [r6, #-4]
 800884a:	46b9      	mov	r9, r7
 800884c:	463c      	mov	r4, r7
 800884e:	9502      	str	r5, [sp, #8]
 8008850:	46ab      	mov	fp, r5
 8008852:	7851      	ldrb	r1, [r2, #1]
 8008854:	1c53      	adds	r3, r2, #1
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	b341      	cbz	r1, 80088ac <__hexnan+0x88>
 800885a:	4608      	mov	r0, r1
 800885c:	9205      	str	r2, [sp, #20]
 800885e:	9104      	str	r1, [sp, #16]
 8008860:	f7ff fd5e 	bl	8008320 <__hexdig_fun>
 8008864:	2800      	cmp	r0, #0
 8008866:	d14f      	bne.n	8008908 <__hexnan+0xe4>
 8008868:	9904      	ldr	r1, [sp, #16]
 800886a:	9a05      	ldr	r2, [sp, #20]
 800886c:	2920      	cmp	r1, #32
 800886e:	d818      	bhi.n	80088a2 <__hexnan+0x7e>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	459b      	cmp	fp, r3
 8008874:	dd13      	ble.n	800889e <__hexnan+0x7a>
 8008876:	454c      	cmp	r4, r9
 8008878:	d206      	bcs.n	8008888 <__hexnan+0x64>
 800887a:	2d07      	cmp	r5, #7
 800887c:	dc04      	bgt.n	8008888 <__hexnan+0x64>
 800887e:	462a      	mov	r2, r5
 8008880:	4649      	mov	r1, r9
 8008882:	4620      	mov	r0, r4
 8008884:	f7ff ffa8 	bl	80087d8 <L_shift>
 8008888:	4544      	cmp	r4, r8
 800888a:	d950      	bls.n	800892e <__hexnan+0x10a>
 800888c:	2300      	movs	r3, #0
 800888e:	f1a4 0904 	sub.w	r9, r4, #4
 8008892:	f844 3c04 	str.w	r3, [r4, #-4]
 8008896:	f8cd b008 	str.w	fp, [sp, #8]
 800889a:	464c      	mov	r4, r9
 800889c:	461d      	mov	r5, r3
 800889e:	9a03      	ldr	r2, [sp, #12]
 80088a0:	e7d7      	b.n	8008852 <__hexnan+0x2e>
 80088a2:	2929      	cmp	r1, #41	; 0x29
 80088a4:	d156      	bne.n	8008954 <__hexnan+0x130>
 80088a6:	3202      	adds	r2, #2
 80088a8:	f8ca 2000 	str.w	r2, [sl]
 80088ac:	f1bb 0f00 	cmp.w	fp, #0
 80088b0:	d050      	beq.n	8008954 <__hexnan+0x130>
 80088b2:	454c      	cmp	r4, r9
 80088b4:	d206      	bcs.n	80088c4 <__hexnan+0xa0>
 80088b6:	2d07      	cmp	r5, #7
 80088b8:	dc04      	bgt.n	80088c4 <__hexnan+0xa0>
 80088ba:	462a      	mov	r2, r5
 80088bc:	4649      	mov	r1, r9
 80088be:	4620      	mov	r0, r4
 80088c0:	f7ff ff8a 	bl	80087d8 <L_shift>
 80088c4:	4544      	cmp	r4, r8
 80088c6:	d934      	bls.n	8008932 <__hexnan+0x10e>
 80088c8:	f1a8 0204 	sub.w	r2, r8, #4
 80088cc:	4623      	mov	r3, r4
 80088ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80088d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80088d6:	429f      	cmp	r7, r3
 80088d8:	d2f9      	bcs.n	80088ce <__hexnan+0xaa>
 80088da:	1b3b      	subs	r3, r7, r4
 80088dc:	f023 0303 	bic.w	r3, r3, #3
 80088e0:	3304      	adds	r3, #4
 80088e2:	3401      	adds	r4, #1
 80088e4:	3e03      	subs	r6, #3
 80088e6:	42b4      	cmp	r4, r6
 80088e8:	bf88      	it	hi
 80088ea:	2304      	movhi	r3, #4
 80088ec:	4443      	add	r3, r8
 80088ee:	2200      	movs	r2, #0
 80088f0:	f843 2b04 	str.w	r2, [r3], #4
 80088f4:	429f      	cmp	r7, r3
 80088f6:	d2fb      	bcs.n	80088f0 <__hexnan+0xcc>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	b91b      	cbnz	r3, 8008904 <__hexnan+0xe0>
 80088fc:	4547      	cmp	r7, r8
 80088fe:	d127      	bne.n	8008950 <__hexnan+0x12c>
 8008900:	2301      	movs	r3, #1
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	2005      	movs	r0, #5
 8008906:	e026      	b.n	8008956 <__hexnan+0x132>
 8008908:	3501      	adds	r5, #1
 800890a:	2d08      	cmp	r5, #8
 800890c:	f10b 0b01 	add.w	fp, fp, #1
 8008910:	dd06      	ble.n	8008920 <__hexnan+0xfc>
 8008912:	4544      	cmp	r4, r8
 8008914:	d9c3      	bls.n	800889e <__hexnan+0x7a>
 8008916:	2300      	movs	r3, #0
 8008918:	f844 3c04 	str.w	r3, [r4, #-4]
 800891c:	2501      	movs	r5, #1
 800891e:	3c04      	subs	r4, #4
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	f000 000f 	and.w	r0, r0, #15
 8008926:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	e7b7      	b.n	800889e <__hexnan+0x7a>
 800892e:	2508      	movs	r5, #8
 8008930:	e7b5      	b.n	800889e <__hexnan+0x7a>
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0df      	beq.n	80088f8 <__hexnan+0xd4>
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	f1c3 0320 	rsb	r3, r3, #32
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
 8008944:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008948:	401a      	ands	r2, r3
 800894a:	f846 2c04 	str.w	r2, [r6, #-4]
 800894e:	e7d3      	b.n	80088f8 <__hexnan+0xd4>
 8008950:	3f04      	subs	r7, #4
 8008952:	e7d1      	b.n	80088f8 <__hexnan+0xd4>
 8008954:	2004      	movs	r0, #4
 8008956:	b007      	add	sp, #28
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800895c <__ascii_mbtowc>:
 800895c:	b082      	sub	sp, #8
 800895e:	b901      	cbnz	r1, 8008962 <__ascii_mbtowc+0x6>
 8008960:	a901      	add	r1, sp, #4
 8008962:	b142      	cbz	r2, 8008976 <__ascii_mbtowc+0x1a>
 8008964:	b14b      	cbz	r3, 800897a <__ascii_mbtowc+0x1e>
 8008966:	7813      	ldrb	r3, [r2, #0]
 8008968:	600b      	str	r3, [r1, #0]
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	1e10      	subs	r0, r2, #0
 800896e:	bf18      	it	ne
 8008970:	2001      	movne	r0, #1
 8008972:	b002      	add	sp, #8
 8008974:	4770      	bx	lr
 8008976:	4610      	mov	r0, r2
 8008978:	e7fb      	b.n	8008972 <__ascii_mbtowc+0x16>
 800897a:	f06f 0001 	mvn.w	r0, #1
 800897e:	e7f8      	b.n	8008972 <__ascii_mbtowc+0x16>

08008980 <memcpy>:
 8008980:	440a      	add	r2, r1
 8008982:	4291      	cmp	r1, r2
 8008984:	f100 33ff 	add.w	r3, r0, #4294967295
 8008988:	d100      	bne.n	800898c <memcpy+0xc>
 800898a:	4770      	bx	lr
 800898c:	b510      	push	{r4, lr}
 800898e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008996:	4291      	cmp	r1, r2
 8008998:	d1f9      	bne.n	800898e <memcpy+0xe>
 800899a:	bd10      	pop	{r4, pc}

0800899c <_Balloc>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089a0:	4604      	mov	r4, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	b976      	cbnz	r6, 80089c4 <_Balloc+0x28>
 80089a6:	2010      	movs	r0, #16
 80089a8:	f000 fdd0 	bl	800954c <malloc>
 80089ac:	4602      	mov	r2, r0
 80089ae:	6260      	str	r0, [r4, #36]	; 0x24
 80089b0:	b920      	cbnz	r0, 80089bc <_Balloc+0x20>
 80089b2:	4b18      	ldr	r3, [pc, #96]	; (8008a14 <_Balloc+0x78>)
 80089b4:	4818      	ldr	r0, [pc, #96]	; (8008a18 <_Balloc+0x7c>)
 80089b6:	2166      	movs	r1, #102	; 0x66
 80089b8:	f000 fd98 	bl	80094ec <__assert_func>
 80089bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c0:	6006      	str	r6, [r0, #0]
 80089c2:	60c6      	str	r6, [r0, #12]
 80089c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089c6:	68f3      	ldr	r3, [r6, #12]
 80089c8:	b183      	cbz	r3, 80089ec <_Balloc+0x50>
 80089ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089d2:	b9b8      	cbnz	r0, 8008a04 <_Balloc+0x68>
 80089d4:	2101      	movs	r1, #1
 80089d6:	fa01 f605 	lsl.w	r6, r1, r5
 80089da:	1d72      	adds	r2, r6, #5
 80089dc:	0092      	lsls	r2, r2, #2
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 fc9d 	bl	800931e <_calloc_r>
 80089e4:	b160      	cbz	r0, 8008a00 <_Balloc+0x64>
 80089e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089ea:	e00e      	b.n	8008a0a <_Balloc+0x6e>
 80089ec:	2221      	movs	r2, #33	; 0x21
 80089ee:	2104      	movs	r1, #4
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fc94 	bl	800931e <_calloc_r>
 80089f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f8:	60f0      	str	r0, [r6, #12]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e4      	bne.n	80089ca <_Balloc+0x2e>
 8008a00:	2000      	movs	r0, #0
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	6802      	ldr	r2, [r0, #0]
 8008a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a10:	e7f7      	b.n	8008a02 <_Balloc+0x66>
 8008a12:	bf00      	nop
 8008a14:	0800a684 	.word	0x0800a684
 8008a18:	0800a69b 	.word	0x0800a69b

08008a1c <_Bfree>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a20:	4605      	mov	r5, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	b976      	cbnz	r6, 8008a44 <_Bfree+0x28>
 8008a26:	2010      	movs	r0, #16
 8008a28:	f000 fd90 	bl	800954c <malloc>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6268      	str	r0, [r5, #36]	; 0x24
 8008a30:	b920      	cbnz	r0, 8008a3c <_Bfree+0x20>
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <_Bfree+0x3c>)
 8008a34:	4809      	ldr	r0, [pc, #36]	; (8008a5c <_Bfree+0x40>)
 8008a36:	218a      	movs	r1, #138	; 0x8a
 8008a38:	f000 fd58 	bl	80094ec <__assert_func>
 8008a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a40:	6006      	str	r6, [r0, #0]
 8008a42:	60c6      	str	r6, [r0, #12]
 8008a44:	b13c      	cbz	r4, 8008a56 <_Bfree+0x3a>
 8008a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a48:	6862      	ldr	r2, [r4, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a50:	6021      	str	r1, [r4, #0]
 8008a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	0800a684 	.word	0x0800a684
 8008a5c:	0800a69b 	.word	0x0800a69b

08008a60 <__multadd>:
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	690d      	ldr	r5, [r1, #16]
 8008a66:	4607      	mov	r7, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	461e      	mov	r6, r3
 8008a6c:	f101 0c14 	add.w	ip, r1, #20
 8008a70:	2000      	movs	r0, #0
 8008a72:	f8dc 3000 	ldr.w	r3, [ip]
 8008a76:	b299      	uxth	r1, r3
 8008a78:	fb02 6101 	mla	r1, r2, r1, r6
 8008a7c:	0c1e      	lsrs	r6, r3, #16
 8008a7e:	0c0b      	lsrs	r3, r1, #16
 8008a80:	fb02 3306 	mla	r3, r2, r6, r3
 8008a84:	b289      	uxth	r1, r1
 8008a86:	3001      	adds	r0, #1
 8008a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a8c:	4285      	cmp	r5, r0
 8008a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8008a92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a96:	dcec      	bgt.n	8008a72 <__multadd+0x12>
 8008a98:	b30e      	cbz	r6, 8008ade <__multadd+0x7e>
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	dc19      	bgt.n	8008ad4 <__multadd+0x74>
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	3101      	adds	r1, #1
 8008aa6:	f7ff ff79 	bl	800899c <_Balloc>
 8008aaa:	4680      	mov	r8, r0
 8008aac:	b928      	cbnz	r0, 8008aba <__multadd+0x5a>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	4b0c      	ldr	r3, [pc, #48]	; (8008ae4 <__multadd+0x84>)
 8008ab2:	480d      	ldr	r0, [pc, #52]	; (8008ae8 <__multadd+0x88>)
 8008ab4:	21b5      	movs	r1, #181	; 0xb5
 8008ab6:	f000 fd19 	bl	80094ec <__assert_func>
 8008aba:	6922      	ldr	r2, [r4, #16]
 8008abc:	3202      	adds	r2, #2
 8008abe:	f104 010c 	add.w	r1, r4, #12
 8008ac2:	0092      	lsls	r2, r2, #2
 8008ac4:	300c      	adds	r0, #12
 8008ac6:	f7ff ff5b 	bl	8008980 <memcpy>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7ff ffa5 	bl	8008a1c <_Bfree>
 8008ad2:	4644      	mov	r4, r8
 8008ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ad8:	3501      	adds	r5, #1
 8008ada:	615e      	str	r6, [r3, #20]
 8008adc:	6125      	str	r5, [r4, #16]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	0800a5f8 	.word	0x0800a5f8
 8008ae8:	0800a69b 	.word	0x0800a69b

08008aec <__s2b>:
 8008aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	4615      	mov	r5, r2
 8008af4:	461f      	mov	r7, r3
 8008af6:	2209      	movs	r2, #9
 8008af8:	3308      	adds	r3, #8
 8008afa:	4606      	mov	r6, r0
 8008afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b00:	2100      	movs	r1, #0
 8008b02:	2201      	movs	r2, #1
 8008b04:	429a      	cmp	r2, r3
 8008b06:	db09      	blt.n	8008b1c <__s2b+0x30>
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7ff ff47 	bl	800899c <_Balloc>
 8008b0e:	b940      	cbnz	r0, 8008b22 <__s2b+0x36>
 8008b10:	4602      	mov	r2, r0
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <__s2b+0x8c>)
 8008b14:	4819      	ldr	r0, [pc, #100]	; (8008b7c <__s2b+0x90>)
 8008b16:	21ce      	movs	r1, #206	; 0xce
 8008b18:	f000 fce8 	bl	80094ec <__assert_func>
 8008b1c:	0052      	lsls	r2, r2, #1
 8008b1e:	3101      	adds	r1, #1
 8008b20:	e7f0      	b.n	8008b04 <__s2b+0x18>
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	6143      	str	r3, [r0, #20]
 8008b26:	2d09      	cmp	r5, #9
 8008b28:	f04f 0301 	mov.w	r3, #1
 8008b2c:	6103      	str	r3, [r0, #16]
 8008b2e:	dd16      	ble.n	8008b5e <__s2b+0x72>
 8008b30:	f104 0909 	add.w	r9, r4, #9
 8008b34:	46c8      	mov	r8, r9
 8008b36:	442c      	add	r4, r5
 8008b38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	3b30      	subs	r3, #48	; 0x30
 8008b40:	220a      	movs	r2, #10
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7ff ff8c 	bl	8008a60 <__multadd>
 8008b48:	45a0      	cmp	r8, r4
 8008b4a:	d1f5      	bne.n	8008b38 <__s2b+0x4c>
 8008b4c:	f1a5 0408 	sub.w	r4, r5, #8
 8008b50:	444c      	add	r4, r9
 8008b52:	1b2d      	subs	r5, r5, r4
 8008b54:	1963      	adds	r3, r4, r5
 8008b56:	42bb      	cmp	r3, r7
 8008b58:	db04      	blt.n	8008b64 <__s2b+0x78>
 8008b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b5e:	340a      	adds	r4, #10
 8008b60:	2509      	movs	r5, #9
 8008b62:	e7f6      	b.n	8008b52 <__s2b+0x66>
 8008b64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b68:	4601      	mov	r1, r0
 8008b6a:	3b30      	subs	r3, #48	; 0x30
 8008b6c:	220a      	movs	r2, #10
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7ff ff76 	bl	8008a60 <__multadd>
 8008b74:	e7ee      	b.n	8008b54 <__s2b+0x68>
 8008b76:	bf00      	nop
 8008b78:	0800a5f8 	.word	0x0800a5f8
 8008b7c:	0800a69b 	.word	0x0800a69b

08008b80 <__hi0bits>:
 8008b80:	0c03      	lsrs	r3, r0, #16
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	b9d3      	cbnz	r3, 8008bbc <__hi0bits+0x3c>
 8008b86:	0400      	lsls	r0, r0, #16
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b8e:	bf04      	itt	eq
 8008b90:	0200      	lsleq	r0, r0, #8
 8008b92:	3308      	addeq	r3, #8
 8008b94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b98:	bf04      	itt	eq
 8008b9a:	0100      	lsleq	r0, r0, #4
 8008b9c:	3304      	addeq	r3, #4
 8008b9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ba2:	bf04      	itt	eq
 8008ba4:	0080      	lsleq	r0, r0, #2
 8008ba6:	3302      	addeq	r3, #2
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	db05      	blt.n	8008bb8 <__hi0bits+0x38>
 8008bac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bb0:	f103 0301 	add.w	r3, r3, #1
 8008bb4:	bf08      	it	eq
 8008bb6:	2320      	moveq	r3, #32
 8008bb8:	4618      	mov	r0, r3
 8008bba:	4770      	bx	lr
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e7e4      	b.n	8008b8a <__hi0bits+0xa>

08008bc0 <__lo0bits>:
 8008bc0:	6803      	ldr	r3, [r0, #0]
 8008bc2:	f013 0207 	ands.w	r2, r3, #7
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	d00b      	beq.n	8008be2 <__lo0bits+0x22>
 8008bca:	07da      	lsls	r2, r3, #31
 8008bcc:	d423      	bmi.n	8008c16 <__lo0bits+0x56>
 8008bce:	0798      	lsls	r0, r3, #30
 8008bd0:	bf49      	itett	mi
 8008bd2:	085b      	lsrmi	r3, r3, #1
 8008bd4:	089b      	lsrpl	r3, r3, #2
 8008bd6:	2001      	movmi	r0, #1
 8008bd8:	600b      	strmi	r3, [r1, #0]
 8008bda:	bf5c      	itt	pl
 8008bdc:	600b      	strpl	r3, [r1, #0]
 8008bde:	2002      	movpl	r0, #2
 8008be0:	4770      	bx	lr
 8008be2:	b298      	uxth	r0, r3
 8008be4:	b9a8      	cbnz	r0, 8008c12 <__lo0bits+0x52>
 8008be6:	0c1b      	lsrs	r3, r3, #16
 8008be8:	2010      	movs	r0, #16
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	b90a      	cbnz	r2, 8008bf2 <__lo0bits+0x32>
 8008bee:	3008      	adds	r0, #8
 8008bf0:	0a1b      	lsrs	r3, r3, #8
 8008bf2:	071a      	lsls	r2, r3, #28
 8008bf4:	bf04      	itt	eq
 8008bf6:	091b      	lsreq	r3, r3, #4
 8008bf8:	3004      	addeq	r0, #4
 8008bfa:	079a      	lsls	r2, r3, #30
 8008bfc:	bf04      	itt	eq
 8008bfe:	089b      	lsreq	r3, r3, #2
 8008c00:	3002      	addeq	r0, #2
 8008c02:	07da      	lsls	r2, r3, #31
 8008c04:	d403      	bmi.n	8008c0e <__lo0bits+0x4e>
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	f100 0001 	add.w	r0, r0, #1
 8008c0c:	d005      	beq.n	8008c1a <__lo0bits+0x5a>
 8008c0e:	600b      	str	r3, [r1, #0]
 8008c10:	4770      	bx	lr
 8008c12:	4610      	mov	r0, r2
 8008c14:	e7e9      	b.n	8008bea <__lo0bits+0x2a>
 8008c16:	2000      	movs	r0, #0
 8008c18:	4770      	bx	lr
 8008c1a:	2020      	movs	r0, #32
 8008c1c:	4770      	bx	lr
	...

08008c20 <__i2b>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	460c      	mov	r4, r1
 8008c24:	2101      	movs	r1, #1
 8008c26:	f7ff feb9 	bl	800899c <_Balloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	b928      	cbnz	r0, 8008c3a <__i2b+0x1a>
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <__i2b+0x24>)
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <__i2b+0x28>)
 8008c32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c36:	f000 fc59 	bl	80094ec <__assert_func>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	6144      	str	r4, [r0, #20]
 8008c3e:	6103      	str	r3, [r0, #16]
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	bf00      	nop
 8008c44:	0800a5f8 	.word	0x0800a5f8
 8008c48:	0800a69b 	.word	0x0800a69b

08008c4c <__multiply>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	4691      	mov	r9, r2
 8008c52:	690a      	ldr	r2, [r1, #16]
 8008c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bfb8      	it	lt
 8008c5c:	460b      	movlt	r3, r1
 8008c5e:	460c      	mov	r4, r1
 8008c60:	bfbc      	itt	lt
 8008c62:	464c      	movlt	r4, r9
 8008c64:	4699      	movlt	r9, r3
 8008c66:	6927      	ldr	r7, [r4, #16]
 8008c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c6c:	68a3      	ldr	r3, [r4, #8]
 8008c6e:	6861      	ldr	r1, [r4, #4]
 8008c70:	eb07 060a 	add.w	r6, r7, sl
 8008c74:	42b3      	cmp	r3, r6
 8008c76:	b085      	sub	sp, #20
 8008c78:	bfb8      	it	lt
 8008c7a:	3101      	addlt	r1, #1
 8008c7c:	f7ff fe8e 	bl	800899c <_Balloc>
 8008c80:	b930      	cbnz	r0, 8008c90 <__multiply+0x44>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b44      	ldr	r3, [pc, #272]	; (8008d98 <__multiply+0x14c>)
 8008c86:	4845      	ldr	r0, [pc, #276]	; (8008d9c <__multiply+0x150>)
 8008c88:	f240 115d 	movw	r1, #349	; 0x15d
 8008c8c:	f000 fc2e 	bl	80094ec <__assert_func>
 8008c90:	f100 0514 	add.w	r5, r0, #20
 8008c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c98:	462b      	mov	r3, r5
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4543      	cmp	r3, r8
 8008c9e:	d321      	bcc.n	8008ce4 <__multiply+0x98>
 8008ca0:	f104 0314 	add.w	r3, r4, #20
 8008ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ca8:	f109 0314 	add.w	r3, r9, #20
 8008cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cb0:	9202      	str	r2, [sp, #8]
 8008cb2:	1b3a      	subs	r2, r7, r4
 8008cb4:	3a15      	subs	r2, #21
 8008cb6:	f022 0203 	bic.w	r2, r2, #3
 8008cba:	3204      	adds	r2, #4
 8008cbc:	f104 0115 	add.w	r1, r4, #21
 8008cc0:	428f      	cmp	r7, r1
 8008cc2:	bf38      	it	cc
 8008cc4:	2204      	movcc	r2, #4
 8008cc6:	9201      	str	r2, [sp, #4]
 8008cc8:	9a02      	ldr	r2, [sp, #8]
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d80c      	bhi.n	8008cea <__multiply+0x9e>
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	dd03      	ble.n	8008cdc <__multiply+0x90>
 8008cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d05a      	beq.n	8008d92 <__multiply+0x146>
 8008cdc:	6106      	str	r6, [r0, #16]
 8008cde:	b005      	add	sp, #20
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	f843 2b04 	str.w	r2, [r3], #4
 8008ce8:	e7d8      	b.n	8008c9c <__multiply+0x50>
 8008cea:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cee:	f1ba 0f00 	cmp.w	sl, #0
 8008cf2:	d024      	beq.n	8008d3e <__multiply+0xf2>
 8008cf4:	f104 0e14 	add.w	lr, r4, #20
 8008cf8:	46a9      	mov	r9, r5
 8008cfa:	f04f 0c00 	mov.w	ip, #0
 8008cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d02:	f8d9 1000 	ldr.w	r1, [r9]
 8008d06:	fa1f fb82 	uxth.w	fp, r2
 8008d0a:	b289      	uxth	r1, r1
 8008d0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d14:	f8d9 2000 	ldr.w	r2, [r9]
 8008d18:	4461      	add	r1, ip
 8008d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d26:	b289      	uxth	r1, r1
 8008d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d2c:	4577      	cmp	r7, lr
 8008d2e:	f849 1b04 	str.w	r1, [r9], #4
 8008d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d36:	d8e2      	bhi.n	8008cfe <__multiply+0xb2>
 8008d38:	9a01      	ldr	r2, [sp, #4]
 8008d3a:	f845 c002 	str.w	ip, [r5, r2]
 8008d3e:	9a03      	ldr	r2, [sp, #12]
 8008d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d44:	3304      	adds	r3, #4
 8008d46:	f1b9 0f00 	cmp.w	r9, #0
 8008d4a:	d020      	beq.n	8008d8e <__multiply+0x142>
 8008d4c:	6829      	ldr	r1, [r5, #0]
 8008d4e:	f104 0c14 	add.w	ip, r4, #20
 8008d52:	46ae      	mov	lr, r5
 8008d54:	f04f 0a00 	mov.w	sl, #0
 8008d58:	f8bc b000 	ldrh.w	fp, [ip]
 8008d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d60:	fb09 220b 	mla	r2, r9, fp, r2
 8008d64:	4492      	add	sl, r2
 8008d66:	b289      	uxth	r1, r1
 8008d68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d6c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d74:	f8be 1000 	ldrh.w	r1, [lr]
 8008d78:	0c12      	lsrs	r2, r2, #16
 8008d7a:	fb09 1102 	mla	r1, r9, r2, r1
 8008d7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d82:	4567      	cmp	r7, ip
 8008d84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d88:	d8e6      	bhi.n	8008d58 <__multiply+0x10c>
 8008d8a:	9a01      	ldr	r2, [sp, #4]
 8008d8c:	50a9      	str	r1, [r5, r2]
 8008d8e:	3504      	adds	r5, #4
 8008d90:	e79a      	b.n	8008cc8 <__multiply+0x7c>
 8008d92:	3e01      	subs	r6, #1
 8008d94:	e79c      	b.n	8008cd0 <__multiply+0x84>
 8008d96:	bf00      	nop
 8008d98:	0800a5f8 	.word	0x0800a5f8
 8008d9c:	0800a69b 	.word	0x0800a69b

08008da0 <__pow5mult>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4615      	mov	r5, r2
 8008da6:	f012 0203 	ands.w	r2, r2, #3
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	d007      	beq.n	8008dc0 <__pow5mult+0x20>
 8008db0:	4c25      	ldr	r4, [pc, #148]	; (8008e48 <__pow5mult+0xa8>)
 8008db2:	3a01      	subs	r2, #1
 8008db4:	2300      	movs	r3, #0
 8008db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dba:	f7ff fe51 	bl	8008a60 <__multadd>
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	10ad      	asrs	r5, r5, #2
 8008dc2:	d03d      	beq.n	8008e40 <__pow5mult+0xa0>
 8008dc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dc6:	b97c      	cbnz	r4, 8008de8 <__pow5mult+0x48>
 8008dc8:	2010      	movs	r0, #16
 8008dca:	f000 fbbf 	bl	800954c <malloc>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	6270      	str	r0, [r6, #36]	; 0x24
 8008dd2:	b928      	cbnz	r0, 8008de0 <__pow5mult+0x40>
 8008dd4:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <__pow5mult+0xac>)
 8008dd6:	481e      	ldr	r0, [pc, #120]	; (8008e50 <__pow5mult+0xb0>)
 8008dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ddc:	f000 fb86 	bl	80094ec <__assert_func>
 8008de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008de4:	6004      	str	r4, [r0, #0]
 8008de6:	60c4      	str	r4, [r0, #12]
 8008de8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008df0:	b94c      	cbnz	r4, 8008e06 <__pow5mult+0x66>
 8008df2:	f240 2171 	movw	r1, #625	; 0x271
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ff12 	bl	8008c20 <__i2b>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e02:	4604      	mov	r4, r0
 8008e04:	6003      	str	r3, [r0, #0]
 8008e06:	f04f 0900 	mov.w	r9, #0
 8008e0a:	07eb      	lsls	r3, r5, #31
 8008e0c:	d50a      	bpl.n	8008e24 <__pow5mult+0x84>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4622      	mov	r2, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f7ff ff1a 	bl	8008c4c <__multiply>
 8008e18:	4639      	mov	r1, r7
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f7ff fdfd 	bl	8008a1c <_Bfree>
 8008e22:	4647      	mov	r7, r8
 8008e24:	106d      	asrs	r5, r5, #1
 8008e26:	d00b      	beq.n	8008e40 <__pow5mult+0xa0>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	b938      	cbnz	r0, 8008e3c <__pow5mult+0x9c>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff ff0b 	bl	8008c4c <__multiply>
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	f8c0 9000 	str.w	r9, [r0]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	e7e4      	b.n	8008e0a <__pow5mult+0x6a>
 8008e40:	4638      	mov	r0, r7
 8008e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e46:	bf00      	nop
 8008e48:	0800a7e8 	.word	0x0800a7e8
 8008e4c:	0800a684 	.word	0x0800a684
 8008e50:	0800a69b 	.word	0x0800a69b

08008e54 <__lshift>:
 8008e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	460c      	mov	r4, r1
 8008e5a:	6849      	ldr	r1, [r1, #4]
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	4607      	mov	r7, r0
 8008e66:	4691      	mov	r9, r2
 8008e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e6c:	f108 0601 	add.w	r6, r8, #1
 8008e70:	42b3      	cmp	r3, r6
 8008e72:	db0b      	blt.n	8008e8c <__lshift+0x38>
 8008e74:	4638      	mov	r0, r7
 8008e76:	f7ff fd91 	bl	800899c <_Balloc>
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	b948      	cbnz	r0, 8008e92 <__lshift+0x3e>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b2a      	ldr	r3, [pc, #168]	; (8008f2c <__lshift+0xd8>)
 8008e82:	482b      	ldr	r0, [pc, #172]	; (8008f30 <__lshift+0xdc>)
 8008e84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e88:	f000 fb30 	bl	80094ec <__assert_func>
 8008e8c:	3101      	adds	r1, #1
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	e7ee      	b.n	8008e70 <__lshift+0x1c>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f100 0114 	add.w	r1, r0, #20
 8008e98:	f100 0210 	add.w	r2, r0, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4553      	cmp	r3, sl
 8008ea0:	db37      	blt.n	8008f12 <__lshift+0xbe>
 8008ea2:	6920      	ldr	r0, [r4, #16]
 8008ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ea8:	f104 0314 	add.w	r3, r4, #20
 8008eac:	f019 091f 	ands.w	r9, r9, #31
 8008eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008eb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008eb8:	d02f      	beq.n	8008f1a <__lshift+0xc6>
 8008eba:	f1c9 0e20 	rsb	lr, r9, #32
 8008ebe:	468a      	mov	sl, r1
 8008ec0:	f04f 0c00 	mov.w	ip, #0
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	fa02 f209 	lsl.w	r2, r2, r9
 8008eca:	ea42 020c 	orr.w	r2, r2, ip
 8008ece:	f84a 2b04 	str.w	r2, [sl], #4
 8008ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed6:	4298      	cmp	r0, r3
 8008ed8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008edc:	d8f2      	bhi.n	8008ec4 <__lshift+0x70>
 8008ede:	1b03      	subs	r3, r0, r4
 8008ee0:	3b15      	subs	r3, #21
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	f104 0215 	add.w	r2, r4, #21
 8008eec:	4290      	cmp	r0, r2
 8008eee:	bf38      	it	cc
 8008ef0:	2304      	movcc	r3, #4
 8008ef2:	f841 c003 	str.w	ip, [r1, r3]
 8008ef6:	f1bc 0f00 	cmp.w	ip, #0
 8008efa:	d001      	beq.n	8008f00 <__lshift+0xac>
 8008efc:	f108 0602 	add.w	r6, r8, #2
 8008f00:	3e01      	subs	r6, #1
 8008f02:	4638      	mov	r0, r7
 8008f04:	612e      	str	r6, [r5, #16]
 8008f06:	4621      	mov	r1, r4
 8008f08:	f7ff fd88 	bl	8008a1c <_Bfree>
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f16:	3301      	adds	r3, #1
 8008f18:	e7c1      	b.n	8008e9e <__lshift+0x4a>
 8008f1a:	3904      	subs	r1, #4
 8008f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f24:	4298      	cmp	r0, r3
 8008f26:	d8f9      	bhi.n	8008f1c <__lshift+0xc8>
 8008f28:	e7ea      	b.n	8008f00 <__lshift+0xac>
 8008f2a:	bf00      	nop
 8008f2c:	0800a5f8 	.word	0x0800a5f8
 8008f30:	0800a69b 	.word	0x0800a69b

08008f34 <__mcmp>:
 8008f34:	b530      	push	{r4, r5, lr}
 8008f36:	6902      	ldr	r2, [r0, #16]
 8008f38:	690c      	ldr	r4, [r1, #16]
 8008f3a:	1b12      	subs	r2, r2, r4
 8008f3c:	d10e      	bne.n	8008f5c <__mcmp+0x28>
 8008f3e:	f100 0314 	add.w	r3, r0, #20
 8008f42:	3114      	adds	r1, #20
 8008f44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f54:	42a5      	cmp	r5, r4
 8008f56:	d003      	beq.n	8008f60 <__mcmp+0x2c>
 8008f58:	d305      	bcc.n	8008f66 <__mcmp+0x32>
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	bd30      	pop	{r4, r5, pc}
 8008f60:	4283      	cmp	r3, r0
 8008f62:	d3f3      	bcc.n	8008f4c <__mcmp+0x18>
 8008f64:	e7fa      	b.n	8008f5c <__mcmp+0x28>
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	e7f7      	b.n	8008f5c <__mcmp+0x28>

08008f6c <__mdiff>:
 8008f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	4606      	mov	r6, r0
 8008f74:	4611      	mov	r1, r2
 8008f76:	4620      	mov	r0, r4
 8008f78:	4690      	mov	r8, r2
 8008f7a:	f7ff ffdb 	bl	8008f34 <__mcmp>
 8008f7e:	1e05      	subs	r5, r0, #0
 8008f80:	d110      	bne.n	8008fa4 <__mdiff+0x38>
 8008f82:	4629      	mov	r1, r5
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff fd09 	bl	800899c <_Balloc>
 8008f8a:	b930      	cbnz	r0, 8008f9a <__mdiff+0x2e>
 8008f8c:	4b3a      	ldr	r3, [pc, #232]	; (8009078 <__mdiff+0x10c>)
 8008f8e:	4602      	mov	r2, r0
 8008f90:	f240 2132 	movw	r1, #562	; 0x232
 8008f94:	4839      	ldr	r0, [pc, #228]	; (800907c <__mdiff+0x110>)
 8008f96:	f000 faa9 	bl	80094ec <__assert_func>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa4:	bfa4      	itt	ge
 8008fa6:	4643      	movge	r3, r8
 8008fa8:	46a0      	movge	r8, r4
 8008faa:	4630      	mov	r0, r6
 8008fac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fb0:	bfa6      	itte	ge
 8008fb2:	461c      	movge	r4, r3
 8008fb4:	2500      	movge	r5, #0
 8008fb6:	2501      	movlt	r5, #1
 8008fb8:	f7ff fcf0 	bl	800899c <_Balloc>
 8008fbc:	b920      	cbnz	r0, 8008fc8 <__mdiff+0x5c>
 8008fbe:	4b2e      	ldr	r3, [pc, #184]	; (8009078 <__mdiff+0x10c>)
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fc6:	e7e5      	b.n	8008f94 <__mdiff+0x28>
 8008fc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fcc:	6926      	ldr	r6, [r4, #16]
 8008fce:	60c5      	str	r5, [r0, #12]
 8008fd0:	f104 0914 	add.w	r9, r4, #20
 8008fd4:	f108 0514 	add.w	r5, r8, #20
 8008fd8:	f100 0e14 	add.w	lr, r0, #20
 8008fdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008fe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fe4:	f108 0210 	add.w	r2, r8, #16
 8008fe8:	46f2      	mov	sl, lr
 8008fea:	2100      	movs	r1, #0
 8008fec:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ff4:	fa1f f883 	uxth.w	r8, r3
 8008ff8:	fa11 f18b 	uxtah	r1, r1, fp
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	eba1 0808 	sub.w	r8, r1, r8
 8009002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800900a:	fa1f f888 	uxth.w	r8, r8
 800900e:	1419      	asrs	r1, r3, #16
 8009010:	454e      	cmp	r6, r9
 8009012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009016:	f84a 3b04 	str.w	r3, [sl], #4
 800901a:	d8e7      	bhi.n	8008fec <__mdiff+0x80>
 800901c:	1b33      	subs	r3, r6, r4
 800901e:	3b15      	subs	r3, #21
 8009020:	f023 0303 	bic.w	r3, r3, #3
 8009024:	3304      	adds	r3, #4
 8009026:	3415      	adds	r4, #21
 8009028:	42a6      	cmp	r6, r4
 800902a:	bf38      	it	cc
 800902c:	2304      	movcc	r3, #4
 800902e:	441d      	add	r5, r3
 8009030:	4473      	add	r3, lr
 8009032:	469e      	mov	lr, r3
 8009034:	462e      	mov	r6, r5
 8009036:	4566      	cmp	r6, ip
 8009038:	d30e      	bcc.n	8009058 <__mdiff+0xec>
 800903a:	f10c 0203 	add.w	r2, ip, #3
 800903e:	1b52      	subs	r2, r2, r5
 8009040:	f022 0203 	bic.w	r2, r2, #3
 8009044:	3d03      	subs	r5, #3
 8009046:	45ac      	cmp	ip, r5
 8009048:	bf38      	it	cc
 800904a:	2200      	movcc	r2, #0
 800904c:	441a      	add	r2, r3
 800904e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009052:	b17b      	cbz	r3, 8009074 <__mdiff+0x108>
 8009054:	6107      	str	r7, [r0, #16]
 8009056:	e7a3      	b.n	8008fa0 <__mdiff+0x34>
 8009058:	f856 8b04 	ldr.w	r8, [r6], #4
 800905c:	fa11 f288 	uxtah	r2, r1, r8
 8009060:	1414      	asrs	r4, r2, #16
 8009062:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009066:	b292      	uxth	r2, r2
 8009068:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800906c:	f84e 2b04 	str.w	r2, [lr], #4
 8009070:	1421      	asrs	r1, r4, #16
 8009072:	e7e0      	b.n	8009036 <__mdiff+0xca>
 8009074:	3f01      	subs	r7, #1
 8009076:	e7ea      	b.n	800904e <__mdiff+0xe2>
 8009078:	0800a5f8 	.word	0x0800a5f8
 800907c:	0800a69b 	.word	0x0800a69b

08009080 <__ulp>:
 8009080:	b082      	sub	sp, #8
 8009082:	ed8d 0b00 	vstr	d0, [sp]
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	4912      	ldr	r1, [pc, #72]	; (80090d4 <__ulp+0x54>)
 800908a:	4019      	ands	r1, r3
 800908c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009090:	2900      	cmp	r1, #0
 8009092:	dd05      	ble.n	80090a0 <__ulp+0x20>
 8009094:	2200      	movs	r2, #0
 8009096:	460b      	mov	r3, r1
 8009098:	ec43 2b10 	vmov	d0, r2, r3
 800909c:	b002      	add	sp, #8
 800909e:	4770      	bx	lr
 80090a0:	4249      	negs	r1, r1
 80090a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80090a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	f04f 0300 	mov.w	r3, #0
 80090b2:	da04      	bge.n	80090be <__ulp+0x3e>
 80090b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090b8:	fa41 f300 	asr.w	r3, r1, r0
 80090bc:	e7ec      	b.n	8009098 <__ulp+0x18>
 80090be:	f1a0 0114 	sub.w	r1, r0, #20
 80090c2:	291e      	cmp	r1, #30
 80090c4:	bfda      	itte	le
 80090c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80090ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80090ce:	2101      	movgt	r1, #1
 80090d0:	460a      	mov	r2, r1
 80090d2:	e7e1      	b.n	8009098 <__ulp+0x18>
 80090d4:	7ff00000 	.word	0x7ff00000

080090d8 <__b2d>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	6905      	ldr	r5, [r0, #16]
 80090dc:	f100 0714 	add.w	r7, r0, #20
 80090e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80090e4:	1f2e      	subs	r6, r5, #4
 80090e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7ff fd48 	bl	8008b80 <__hi0bits>
 80090f0:	f1c0 0320 	rsb	r3, r0, #32
 80090f4:	280a      	cmp	r0, #10
 80090f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009174 <__b2d+0x9c>
 80090fa:	600b      	str	r3, [r1, #0]
 80090fc:	dc14      	bgt.n	8009128 <__b2d+0x50>
 80090fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009102:	fa24 f10e 	lsr.w	r1, r4, lr
 8009106:	42b7      	cmp	r7, r6
 8009108:	ea41 030c 	orr.w	r3, r1, ip
 800910c:	bf34      	ite	cc
 800910e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009112:	2100      	movcs	r1, #0
 8009114:	3015      	adds	r0, #21
 8009116:	fa04 f000 	lsl.w	r0, r4, r0
 800911a:	fa21 f10e 	lsr.w	r1, r1, lr
 800911e:	ea40 0201 	orr.w	r2, r0, r1
 8009122:	ec43 2b10 	vmov	d0, r2, r3
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	42b7      	cmp	r7, r6
 800912a:	bf3a      	itte	cc
 800912c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009130:	f1a5 0608 	subcc.w	r6, r5, #8
 8009134:	2100      	movcs	r1, #0
 8009136:	380b      	subs	r0, #11
 8009138:	d017      	beq.n	800916a <__b2d+0x92>
 800913a:	f1c0 0c20 	rsb	ip, r0, #32
 800913e:	fa04 f500 	lsl.w	r5, r4, r0
 8009142:	42be      	cmp	r6, r7
 8009144:	fa21 f40c 	lsr.w	r4, r1, ip
 8009148:	ea45 0504 	orr.w	r5, r5, r4
 800914c:	bf8c      	ite	hi
 800914e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009152:	2400      	movls	r4, #0
 8009154:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009158:	fa01 f000 	lsl.w	r0, r1, r0
 800915c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009164:	ea40 0204 	orr.w	r2, r0, r4
 8009168:	e7db      	b.n	8009122 <__b2d+0x4a>
 800916a:	ea44 030c 	orr.w	r3, r4, ip
 800916e:	460a      	mov	r2, r1
 8009170:	e7d7      	b.n	8009122 <__b2d+0x4a>
 8009172:	bf00      	nop
 8009174:	3ff00000 	.word	0x3ff00000

08009178 <__d2b>:
 8009178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800917c:	4689      	mov	r9, r1
 800917e:	2101      	movs	r1, #1
 8009180:	ec57 6b10 	vmov	r6, r7, d0
 8009184:	4690      	mov	r8, r2
 8009186:	f7ff fc09 	bl	800899c <_Balloc>
 800918a:	4604      	mov	r4, r0
 800918c:	b930      	cbnz	r0, 800919c <__d2b+0x24>
 800918e:	4602      	mov	r2, r0
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <__d2b+0xb0>)
 8009192:	4826      	ldr	r0, [pc, #152]	; (800922c <__d2b+0xb4>)
 8009194:	f240 310a 	movw	r1, #778	; 0x30a
 8009198:	f000 f9a8 	bl	80094ec <__assert_func>
 800919c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091a4:	bb35      	cbnz	r5, 80091f4 <__d2b+0x7c>
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	d028      	beq.n	80091fe <__d2b+0x86>
 80091ac:	4668      	mov	r0, sp
 80091ae:	9600      	str	r6, [sp, #0]
 80091b0:	f7ff fd06 	bl	8008bc0 <__lo0bits>
 80091b4:	9900      	ldr	r1, [sp, #0]
 80091b6:	b300      	cbz	r0, 80091fa <__d2b+0x82>
 80091b8:	9a01      	ldr	r2, [sp, #4]
 80091ba:	f1c0 0320 	rsb	r3, r0, #32
 80091be:	fa02 f303 	lsl.w	r3, r2, r3
 80091c2:	430b      	orrs	r3, r1
 80091c4:	40c2      	lsrs	r2, r0
 80091c6:	6163      	str	r3, [r4, #20]
 80091c8:	9201      	str	r2, [sp, #4]
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	61a3      	str	r3, [r4, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bf14      	ite	ne
 80091d2:	2202      	movne	r2, #2
 80091d4:	2201      	moveq	r2, #1
 80091d6:	6122      	str	r2, [r4, #16]
 80091d8:	b1d5      	cbz	r5, 8009210 <__d2b+0x98>
 80091da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091de:	4405      	add	r5, r0
 80091e0:	f8c9 5000 	str.w	r5, [r9]
 80091e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091e8:	f8c8 0000 	str.w	r0, [r8]
 80091ec:	4620      	mov	r0, r4
 80091ee:	b003      	add	sp, #12
 80091f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091f8:	e7d5      	b.n	80091a6 <__d2b+0x2e>
 80091fa:	6161      	str	r1, [r4, #20]
 80091fc:	e7e5      	b.n	80091ca <__d2b+0x52>
 80091fe:	a801      	add	r0, sp, #4
 8009200:	f7ff fcde 	bl	8008bc0 <__lo0bits>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	2201      	movs	r2, #1
 800920a:	6122      	str	r2, [r4, #16]
 800920c:	3020      	adds	r0, #32
 800920e:	e7e3      	b.n	80091d8 <__d2b+0x60>
 8009210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009218:	f8c9 0000 	str.w	r0, [r9]
 800921c:	6918      	ldr	r0, [r3, #16]
 800921e:	f7ff fcaf 	bl	8008b80 <__hi0bits>
 8009222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009226:	e7df      	b.n	80091e8 <__d2b+0x70>
 8009228:	0800a5f8 	.word	0x0800a5f8
 800922c:	0800a69b 	.word	0x0800a69b

08009230 <__ratio>:
 8009230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4688      	mov	r8, r1
 8009236:	4669      	mov	r1, sp
 8009238:	4681      	mov	r9, r0
 800923a:	f7ff ff4d 	bl	80090d8 <__b2d>
 800923e:	a901      	add	r1, sp, #4
 8009240:	4640      	mov	r0, r8
 8009242:	ec55 4b10 	vmov	r4, r5, d0
 8009246:	f7ff ff47 	bl	80090d8 <__b2d>
 800924a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800924e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009252:	eba3 0c02 	sub.w	ip, r3, r2
 8009256:	e9dd 3200 	ldrd	r3, r2, [sp]
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009260:	ec51 0b10 	vmov	r0, r1, d0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfd6      	itet	le
 8009268:	460a      	movle	r2, r1
 800926a:	462a      	movgt	r2, r5
 800926c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009270:	468b      	mov	fp, r1
 8009272:	462f      	mov	r7, r5
 8009274:	bfd4      	ite	le
 8009276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800927a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800927e:	4620      	mov	r0, r4
 8009280:	ee10 2a10 	vmov	r2, s0
 8009284:	465b      	mov	r3, fp
 8009286:	4639      	mov	r1, r7
 8009288:	f7f7 fb18 	bl	80008bc <__aeabi_ddiv>
 800928c:	ec41 0b10 	vmov	d0, r0, r1
 8009290:	b003      	add	sp, #12
 8009292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009296 <__copybits>:
 8009296:	3901      	subs	r1, #1
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	1149      	asrs	r1, r1, #5
 800929c:	6914      	ldr	r4, [r2, #16]
 800929e:	3101      	adds	r1, #1
 80092a0:	f102 0314 	add.w	r3, r2, #20
 80092a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092ac:	1f05      	subs	r5, r0, #4
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	d30c      	bcc.n	80092cc <__copybits+0x36>
 80092b2:	1aa3      	subs	r3, r4, r2
 80092b4:	3b11      	subs	r3, #17
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	3211      	adds	r2, #17
 80092bc:	42a2      	cmp	r2, r4
 80092be:	bf88      	it	hi
 80092c0:	2300      	movhi	r3, #0
 80092c2:	4418      	add	r0, r3
 80092c4:	2300      	movs	r3, #0
 80092c6:	4288      	cmp	r0, r1
 80092c8:	d305      	bcc.n	80092d6 <__copybits+0x40>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80092d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80092d4:	e7eb      	b.n	80092ae <__copybits+0x18>
 80092d6:	f840 3b04 	str.w	r3, [r0], #4
 80092da:	e7f4      	b.n	80092c6 <__copybits+0x30>

080092dc <__any_on>:
 80092dc:	f100 0214 	add.w	r2, r0, #20
 80092e0:	6900      	ldr	r0, [r0, #16]
 80092e2:	114b      	asrs	r3, r1, #5
 80092e4:	4298      	cmp	r0, r3
 80092e6:	b510      	push	{r4, lr}
 80092e8:	db11      	blt.n	800930e <__any_on+0x32>
 80092ea:	dd0a      	ble.n	8009302 <__any_on+0x26>
 80092ec:	f011 011f 	ands.w	r1, r1, #31
 80092f0:	d007      	beq.n	8009302 <__any_on+0x26>
 80092f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092f6:	fa24 f001 	lsr.w	r0, r4, r1
 80092fa:	fa00 f101 	lsl.w	r1, r0, r1
 80092fe:	428c      	cmp	r4, r1
 8009300:	d10b      	bne.n	800931a <__any_on+0x3e>
 8009302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009306:	4293      	cmp	r3, r2
 8009308:	d803      	bhi.n	8009312 <__any_on+0x36>
 800930a:	2000      	movs	r0, #0
 800930c:	bd10      	pop	{r4, pc}
 800930e:	4603      	mov	r3, r0
 8009310:	e7f7      	b.n	8009302 <__any_on+0x26>
 8009312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009316:	2900      	cmp	r1, #0
 8009318:	d0f5      	beq.n	8009306 <__any_on+0x2a>
 800931a:	2001      	movs	r0, #1
 800931c:	e7f6      	b.n	800930c <__any_on+0x30>

0800931e <_calloc_r>:
 800931e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009320:	fba1 2402 	umull	r2, r4, r1, r2
 8009324:	b94c      	cbnz	r4, 800933a <_calloc_r+0x1c>
 8009326:	4611      	mov	r1, r2
 8009328:	9201      	str	r2, [sp, #4]
 800932a:	f000 f82f 	bl	800938c <_malloc_r>
 800932e:	9a01      	ldr	r2, [sp, #4]
 8009330:	4605      	mov	r5, r0
 8009332:	b930      	cbnz	r0, 8009342 <_calloc_r+0x24>
 8009334:	4628      	mov	r0, r5
 8009336:	b003      	add	sp, #12
 8009338:	bd30      	pop	{r4, r5, pc}
 800933a:	220c      	movs	r2, #12
 800933c:	6002      	str	r2, [r0, #0]
 800933e:	2500      	movs	r5, #0
 8009340:	e7f8      	b.n	8009334 <_calloc_r+0x16>
 8009342:	4621      	mov	r1, r4
 8009344:	f7fe f93a 	bl	80075bc <memset>
 8009348:	e7f4      	b.n	8009334 <_calloc_r+0x16>
	...

0800934c <sbrk_aligned>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4e0e      	ldr	r6, [pc, #56]	; (8009388 <sbrk_aligned+0x3c>)
 8009350:	460c      	mov	r4, r1
 8009352:	6831      	ldr	r1, [r6, #0]
 8009354:	4605      	mov	r5, r0
 8009356:	b911      	cbnz	r1, 800935e <sbrk_aligned+0x12>
 8009358:	f000 f896 	bl	8009488 <_sbrk_r>
 800935c:	6030      	str	r0, [r6, #0]
 800935e:	4621      	mov	r1, r4
 8009360:	4628      	mov	r0, r5
 8009362:	f000 f891 	bl	8009488 <_sbrk_r>
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	d00a      	beq.n	8009380 <sbrk_aligned+0x34>
 800936a:	1cc4      	adds	r4, r0, #3
 800936c:	f024 0403 	bic.w	r4, r4, #3
 8009370:	42a0      	cmp	r0, r4
 8009372:	d007      	beq.n	8009384 <sbrk_aligned+0x38>
 8009374:	1a21      	subs	r1, r4, r0
 8009376:	4628      	mov	r0, r5
 8009378:	f000 f886 	bl	8009488 <_sbrk_r>
 800937c:	3001      	adds	r0, #1
 800937e:	d101      	bne.n	8009384 <sbrk_aligned+0x38>
 8009380:	f04f 34ff 	mov.w	r4, #4294967295
 8009384:	4620      	mov	r0, r4
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	200004dc 	.word	0x200004dc

0800938c <_malloc_r>:
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	1ccd      	adds	r5, r1, #3
 8009392:	f025 0503 	bic.w	r5, r5, #3
 8009396:	3508      	adds	r5, #8
 8009398:	2d0c      	cmp	r5, #12
 800939a:	bf38      	it	cc
 800939c:	250c      	movcc	r5, #12
 800939e:	2d00      	cmp	r5, #0
 80093a0:	4607      	mov	r7, r0
 80093a2:	db01      	blt.n	80093a8 <_malloc_r+0x1c>
 80093a4:	42a9      	cmp	r1, r5
 80093a6:	d905      	bls.n	80093b4 <_malloc_r+0x28>
 80093a8:	230c      	movs	r3, #12
 80093aa:	603b      	str	r3, [r7, #0]
 80093ac:	2600      	movs	r6, #0
 80093ae:	4630      	mov	r0, r6
 80093b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b4:	4e2e      	ldr	r6, [pc, #184]	; (8009470 <_malloc_r+0xe4>)
 80093b6:	f000 f8d1 	bl	800955c <__malloc_lock>
 80093ba:	6833      	ldr	r3, [r6, #0]
 80093bc:	461c      	mov	r4, r3
 80093be:	bb34      	cbnz	r4, 800940e <_malloc_r+0x82>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4638      	mov	r0, r7
 80093c4:	f7ff ffc2 	bl	800934c <sbrk_aligned>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	4604      	mov	r4, r0
 80093cc:	d14d      	bne.n	800946a <_malloc_r+0xde>
 80093ce:	6834      	ldr	r4, [r6, #0]
 80093d0:	4626      	mov	r6, r4
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	d140      	bne.n	8009458 <_malloc_r+0xcc>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	4631      	mov	r1, r6
 80093da:	4638      	mov	r0, r7
 80093dc:	eb04 0803 	add.w	r8, r4, r3
 80093e0:	f000 f852 	bl	8009488 <_sbrk_r>
 80093e4:	4580      	cmp	r8, r0
 80093e6:	d13a      	bne.n	800945e <_malloc_r+0xd2>
 80093e8:	6821      	ldr	r1, [r4, #0]
 80093ea:	3503      	adds	r5, #3
 80093ec:	1a6d      	subs	r5, r5, r1
 80093ee:	f025 0503 	bic.w	r5, r5, #3
 80093f2:	3508      	adds	r5, #8
 80093f4:	2d0c      	cmp	r5, #12
 80093f6:	bf38      	it	cc
 80093f8:	250c      	movcc	r5, #12
 80093fa:	4629      	mov	r1, r5
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff ffa5 	bl	800934c <sbrk_aligned>
 8009402:	3001      	adds	r0, #1
 8009404:	d02b      	beq.n	800945e <_malloc_r+0xd2>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	442b      	add	r3, r5
 800940a:	6023      	str	r3, [r4, #0]
 800940c:	e00e      	b.n	800942c <_malloc_r+0xa0>
 800940e:	6822      	ldr	r2, [r4, #0]
 8009410:	1b52      	subs	r2, r2, r5
 8009412:	d41e      	bmi.n	8009452 <_malloc_r+0xc6>
 8009414:	2a0b      	cmp	r2, #11
 8009416:	d916      	bls.n	8009446 <_malloc_r+0xba>
 8009418:	1961      	adds	r1, r4, r5
 800941a:	42a3      	cmp	r3, r4
 800941c:	6025      	str	r5, [r4, #0]
 800941e:	bf18      	it	ne
 8009420:	6059      	strne	r1, [r3, #4]
 8009422:	6863      	ldr	r3, [r4, #4]
 8009424:	bf08      	it	eq
 8009426:	6031      	streq	r1, [r6, #0]
 8009428:	5162      	str	r2, [r4, r5]
 800942a:	604b      	str	r3, [r1, #4]
 800942c:	4638      	mov	r0, r7
 800942e:	f104 060b 	add.w	r6, r4, #11
 8009432:	f000 f899 	bl	8009568 <__malloc_unlock>
 8009436:	f026 0607 	bic.w	r6, r6, #7
 800943a:	1d23      	adds	r3, r4, #4
 800943c:	1af2      	subs	r2, r6, r3
 800943e:	d0b6      	beq.n	80093ae <_malloc_r+0x22>
 8009440:	1b9b      	subs	r3, r3, r6
 8009442:	50a3      	str	r3, [r4, r2]
 8009444:	e7b3      	b.n	80093ae <_malloc_r+0x22>
 8009446:	6862      	ldr	r2, [r4, #4]
 8009448:	42a3      	cmp	r3, r4
 800944a:	bf0c      	ite	eq
 800944c:	6032      	streq	r2, [r6, #0]
 800944e:	605a      	strne	r2, [r3, #4]
 8009450:	e7ec      	b.n	800942c <_malloc_r+0xa0>
 8009452:	4623      	mov	r3, r4
 8009454:	6864      	ldr	r4, [r4, #4]
 8009456:	e7b2      	b.n	80093be <_malloc_r+0x32>
 8009458:	4634      	mov	r4, r6
 800945a:	6876      	ldr	r6, [r6, #4]
 800945c:	e7b9      	b.n	80093d2 <_malloc_r+0x46>
 800945e:	230c      	movs	r3, #12
 8009460:	603b      	str	r3, [r7, #0]
 8009462:	4638      	mov	r0, r7
 8009464:	f000 f880 	bl	8009568 <__malloc_unlock>
 8009468:	e7a1      	b.n	80093ae <_malloc_r+0x22>
 800946a:	6025      	str	r5, [r4, #0]
 800946c:	e7de      	b.n	800942c <_malloc_r+0xa0>
 800946e:	bf00      	nop
 8009470:	200004d8 	.word	0x200004d8
 8009474:	00000000 	.word	0x00000000

08009478 <nan>:
 8009478:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009480 <nan+0x8>
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	00000000 	.word	0x00000000
 8009484:	7ff80000 	.word	0x7ff80000

08009488 <_sbrk_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d06      	ldr	r5, [pc, #24]	; (80094a4 <_sbrk_r+0x1c>)
 800948c:	2300      	movs	r3, #0
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	602b      	str	r3, [r5, #0]
 8009494:	f7f8 fd16 	bl	8001ec4 <_sbrk>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d102      	bne.n	80094a2 <_sbrk_r+0x1a>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	b103      	cbz	r3, 80094a2 <_sbrk_r+0x1a>
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	200004e0 	.word	0x200004e0

080094a8 <strncmp>:
 80094a8:	b510      	push	{r4, lr}
 80094aa:	b17a      	cbz	r2, 80094cc <strncmp+0x24>
 80094ac:	4603      	mov	r3, r0
 80094ae:	3901      	subs	r1, #1
 80094b0:	1884      	adds	r4, r0, r2
 80094b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094ba:	4290      	cmp	r0, r2
 80094bc:	d101      	bne.n	80094c2 <strncmp+0x1a>
 80094be:	42a3      	cmp	r3, r4
 80094c0:	d101      	bne.n	80094c6 <strncmp+0x1e>
 80094c2:	1a80      	subs	r0, r0, r2
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d1f3      	bne.n	80094b2 <strncmp+0xa>
 80094ca:	e7fa      	b.n	80094c2 <strncmp+0x1a>
 80094cc:	4610      	mov	r0, r2
 80094ce:	e7f9      	b.n	80094c4 <strncmp+0x1c>

080094d0 <__ascii_wctomb>:
 80094d0:	b149      	cbz	r1, 80094e6 <__ascii_wctomb+0x16>
 80094d2:	2aff      	cmp	r2, #255	; 0xff
 80094d4:	bf85      	ittet	hi
 80094d6:	238a      	movhi	r3, #138	; 0x8a
 80094d8:	6003      	strhi	r3, [r0, #0]
 80094da:	700a      	strbls	r2, [r1, #0]
 80094dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80094e0:	bf98      	it	ls
 80094e2:	2001      	movls	r0, #1
 80094e4:	4770      	bx	lr
 80094e6:	4608      	mov	r0, r1
 80094e8:	4770      	bx	lr
	...

080094ec <__assert_func>:
 80094ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ee:	4614      	mov	r4, r2
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <__assert_func+0x2c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4605      	mov	r5, r0
 80094f8:	68d8      	ldr	r0, [r3, #12]
 80094fa:	b14c      	cbz	r4, 8009510 <__assert_func+0x24>
 80094fc:	4b07      	ldr	r3, [pc, #28]	; (800951c <__assert_func+0x30>)
 80094fe:	9100      	str	r1, [sp, #0]
 8009500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009504:	4906      	ldr	r1, [pc, #24]	; (8009520 <__assert_func+0x34>)
 8009506:	462b      	mov	r3, r5
 8009508:	f000 f80e 	bl	8009528 <fiprintf>
 800950c:	f000 fc2c 	bl	8009d68 <abort>
 8009510:	4b04      	ldr	r3, [pc, #16]	; (8009524 <__assert_func+0x38>)
 8009512:	461c      	mov	r4, r3
 8009514:	e7f3      	b.n	80094fe <__assert_func+0x12>
 8009516:	bf00      	nop
 8009518:	2000000c 	.word	0x2000000c
 800951c:	0800a7f4 	.word	0x0800a7f4
 8009520:	0800a801 	.word	0x0800a801
 8009524:	0800a82f 	.word	0x0800a82f

08009528 <fiprintf>:
 8009528:	b40e      	push	{r1, r2, r3}
 800952a:	b503      	push	{r0, r1, lr}
 800952c:	4601      	mov	r1, r0
 800952e:	ab03      	add	r3, sp, #12
 8009530:	4805      	ldr	r0, [pc, #20]	; (8009548 <fiprintf+0x20>)
 8009532:	f853 2b04 	ldr.w	r2, [r3], #4
 8009536:	6800      	ldr	r0, [r0, #0]
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	f000 f891 	bl	8009660 <_vfiprintf_r>
 800953e:	b002      	add	sp, #8
 8009540:	f85d eb04 	ldr.w	lr, [sp], #4
 8009544:	b003      	add	sp, #12
 8009546:	4770      	bx	lr
 8009548:	2000000c 	.word	0x2000000c

0800954c <malloc>:
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <malloc+0xc>)
 800954e:	4601      	mov	r1, r0
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f7ff bf1b 	b.w	800938c <_malloc_r>
 8009556:	bf00      	nop
 8009558:	2000000c 	.word	0x2000000c

0800955c <__malloc_lock>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__malloc_lock+0x8>)
 800955e:	f000 bdc3 	b.w	800a0e8 <__retarget_lock_acquire_recursive>
 8009562:	bf00      	nop
 8009564:	200004e4 	.word	0x200004e4

08009568 <__malloc_unlock>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__malloc_unlock+0x8>)
 800956a:	f000 bdbe 	b.w	800a0ea <__retarget_lock_release_recursive>
 800956e:	bf00      	nop
 8009570:	200004e4 	.word	0x200004e4

08009574 <_free_r>:
 8009574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009576:	2900      	cmp	r1, #0
 8009578:	d044      	beq.n	8009604 <_free_r+0x90>
 800957a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957e:	9001      	str	r0, [sp, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f1a1 0404 	sub.w	r4, r1, #4
 8009586:	bfb8      	it	lt
 8009588:	18e4      	addlt	r4, r4, r3
 800958a:	f7ff ffe7 	bl	800955c <__malloc_lock>
 800958e:	4a1e      	ldr	r2, [pc, #120]	; (8009608 <_free_r+0x94>)
 8009590:	9801      	ldr	r0, [sp, #4]
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	b933      	cbnz	r3, 80095a4 <_free_r+0x30>
 8009596:	6063      	str	r3, [r4, #4]
 8009598:	6014      	str	r4, [r2, #0]
 800959a:	b003      	add	sp, #12
 800959c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095a0:	f7ff bfe2 	b.w	8009568 <__malloc_unlock>
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	d908      	bls.n	80095ba <_free_r+0x46>
 80095a8:	6825      	ldr	r5, [r4, #0]
 80095aa:	1961      	adds	r1, r4, r5
 80095ac:	428b      	cmp	r3, r1
 80095ae:	bf01      	itttt	eq
 80095b0:	6819      	ldreq	r1, [r3, #0]
 80095b2:	685b      	ldreq	r3, [r3, #4]
 80095b4:	1949      	addeq	r1, r1, r5
 80095b6:	6021      	streq	r1, [r4, #0]
 80095b8:	e7ed      	b.n	8009596 <_free_r+0x22>
 80095ba:	461a      	mov	r2, r3
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	b10b      	cbz	r3, 80095c4 <_free_r+0x50>
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	d9fa      	bls.n	80095ba <_free_r+0x46>
 80095c4:	6811      	ldr	r1, [r2, #0]
 80095c6:	1855      	adds	r5, r2, r1
 80095c8:	42a5      	cmp	r5, r4
 80095ca:	d10b      	bne.n	80095e4 <_free_r+0x70>
 80095cc:	6824      	ldr	r4, [r4, #0]
 80095ce:	4421      	add	r1, r4
 80095d0:	1854      	adds	r4, r2, r1
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	6011      	str	r1, [r2, #0]
 80095d6:	d1e0      	bne.n	800959a <_free_r+0x26>
 80095d8:	681c      	ldr	r4, [r3, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	6053      	str	r3, [r2, #4]
 80095de:	4421      	add	r1, r4
 80095e0:	6011      	str	r1, [r2, #0]
 80095e2:	e7da      	b.n	800959a <_free_r+0x26>
 80095e4:	d902      	bls.n	80095ec <_free_r+0x78>
 80095e6:	230c      	movs	r3, #12
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	e7d6      	b.n	800959a <_free_r+0x26>
 80095ec:	6825      	ldr	r5, [r4, #0]
 80095ee:	1961      	adds	r1, r4, r5
 80095f0:	428b      	cmp	r3, r1
 80095f2:	bf04      	itt	eq
 80095f4:	6819      	ldreq	r1, [r3, #0]
 80095f6:	685b      	ldreq	r3, [r3, #4]
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	bf04      	itt	eq
 80095fc:	1949      	addeq	r1, r1, r5
 80095fe:	6021      	streq	r1, [r4, #0]
 8009600:	6054      	str	r4, [r2, #4]
 8009602:	e7ca      	b.n	800959a <_free_r+0x26>
 8009604:	b003      	add	sp, #12
 8009606:	bd30      	pop	{r4, r5, pc}
 8009608:	200004d8 	.word	0x200004d8

0800960c <__sfputc_r>:
 800960c:	6893      	ldr	r3, [r2, #8]
 800960e:	3b01      	subs	r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	b410      	push	{r4}
 8009614:	6093      	str	r3, [r2, #8]
 8009616:	da08      	bge.n	800962a <__sfputc_r+0x1e>
 8009618:	6994      	ldr	r4, [r2, #24]
 800961a:	42a3      	cmp	r3, r4
 800961c:	db01      	blt.n	8009622 <__sfputc_r+0x16>
 800961e:	290a      	cmp	r1, #10
 8009620:	d103      	bne.n	800962a <__sfputc_r+0x1e>
 8009622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009626:	f000 badf 	b.w	8009be8 <__swbuf_r>
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	1c58      	adds	r0, r3, #1
 800962e:	6010      	str	r0, [r2, #0]
 8009630:	7019      	strb	r1, [r3, #0]
 8009632:	4608      	mov	r0, r1
 8009634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009638:	4770      	bx	lr

0800963a <__sfputs_r>:
 800963a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	4614      	mov	r4, r2
 8009642:	18d5      	adds	r5, r2, r3
 8009644:	42ac      	cmp	r4, r5
 8009646:	d101      	bne.n	800964c <__sfputs_r+0x12>
 8009648:	2000      	movs	r0, #0
 800964a:	e007      	b.n	800965c <__sfputs_r+0x22>
 800964c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009650:	463a      	mov	r2, r7
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ffda 	bl	800960c <__sfputc_r>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d1f3      	bne.n	8009644 <__sfputs_r+0xa>
 800965c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009660 <_vfiprintf_r>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	460d      	mov	r5, r1
 8009666:	b09d      	sub	sp, #116	; 0x74
 8009668:	4614      	mov	r4, r2
 800966a:	4698      	mov	r8, r3
 800966c:	4606      	mov	r6, r0
 800966e:	b118      	cbz	r0, 8009678 <_vfiprintf_r+0x18>
 8009670:	6983      	ldr	r3, [r0, #24]
 8009672:	b90b      	cbnz	r3, 8009678 <_vfiprintf_r+0x18>
 8009674:	f000 fc9a 	bl	8009fac <__sinit>
 8009678:	4b89      	ldr	r3, [pc, #548]	; (80098a0 <_vfiprintf_r+0x240>)
 800967a:	429d      	cmp	r5, r3
 800967c:	d11b      	bne.n	80096b6 <_vfiprintf_r+0x56>
 800967e:	6875      	ldr	r5, [r6, #4]
 8009680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009682:	07d9      	lsls	r1, r3, #31
 8009684:	d405      	bmi.n	8009692 <_vfiprintf_r+0x32>
 8009686:	89ab      	ldrh	r3, [r5, #12]
 8009688:	059a      	lsls	r2, r3, #22
 800968a:	d402      	bmi.n	8009692 <_vfiprintf_r+0x32>
 800968c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800968e:	f000 fd2b 	bl	800a0e8 <__retarget_lock_acquire_recursive>
 8009692:	89ab      	ldrh	r3, [r5, #12]
 8009694:	071b      	lsls	r3, r3, #28
 8009696:	d501      	bpl.n	800969c <_vfiprintf_r+0x3c>
 8009698:	692b      	ldr	r3, [r5, #16]
 800969a:	b9eb      	cbnz	r3, 80096d8 <_vfiprintf_r+0x78>
 800969c:	4629      	mov	r1, r5
 800969e:	4630      	mov	r0, r6
 80096a0:	f000 faf4 	bl	8009c8c <__swsetup_r>
 80096a4:	b1c0      	cbz	r0, 80096d8 <_vfiprintf_r+0x78>
 80096a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096a8:	07dc      	lsls	r4, r3, #31
 80096aa:	d50e      	bpl.n	80096ca <_vfiprintf_r+0x6a>
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	b01d      	add	sp, #116	; 0x74
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	4b7b      	ldr	r3, [pc, #492]	; (80098a4 <_vfiprintf_r+0x244>)
 80096b8:	429d      	cmp	r5, r3
 80096ba:	d101      	bne.n	80096c0 <_vfiprintf_r+0x60>
 80096bc:	68b5      	ldr	r5, [r6, #8]
 80096be:	e7df      	b.n	8009680 <_vfiprintf_r+0x20>
 80096c0:	4b79      	ldr	r3, [pc, #484]	; (80098a8 <_vfiprintf_r+0x248>)
 80096c2:	429d      	cmp	r5, r3
 80096c4:	bf08      	it	eq
 80096c6:	68f5      	ldreq	r5, [r6, #12]
 80096c8:	e7da      	b.n	8009680 <_vfiprintf_r+0x20>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	0598      	lsls	r0, r3, #22
 80096ce:	d4ed      	bmi.n	80096ac <_vfiprintf_r+0x4c>
 80096d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096d2:	f000 fd0a 	bl	800a0ea <__retarget_lock_release_recursive>
 80096d6:	e7e9      	b.n	80096ac <_vfiprintf_r+0x4c>
 80096d8:	2300      	movs	r3, #0
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	2320      	movs	r3, #32
 80096de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096e6:	2330      	movs	r3, #48	; 0x30
 80096e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098ac <_vfiprintf_r+0x24c>
 80096ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096f0:	f04f 0901 	mov.w	r9, #1
 80096f4:	4623      	mov	r3, r4
 80096f6:	469a      	mov	sl, r3
 80096f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096fc:	b10a      	cbz	r2, 8009702 <_vfiprintf_r+0xa2>
 80096fe:	2a25      	cmp	r2, #37	; 0x25
 8009700:	d1f9      	bne.n	80096f6 <_vfiprintf_r+0x96>
 8009702:	ebba 0b04 	subs.w	fp, sl, r4
 8009706:	d00b      	beq.n	8009720 <_vfiprintf_r+0xc0>
 8009708:	465b      	mov	r3, fp
 800970a:	4622      	mov	r2, r4
 800970c:	4629      	mov	r1, r5
 800970e:	4630      	mov	r0, r6
 8009710:	f7ff ff93 	bl	800963a <__sfputs_r>
 8009714:	3001      	adds	r0, #1
 8009716:	f000 80aa 	beq.w	800986e <_vfiprintf_r+0x20e>
 800971a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800971c:	445a      	add	r2, fp
 800971e:	9209      	str	r2, [sp, #36]	; 0x24
 8009720:	f89a 3000 	ldrb.w	r3, [sl]
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 80a2 	beq.w	800986e <_vfiprintf_r+0x20e>
 800972a:	2300      	movs	r3, #0
 800972c:	f04f 32ff 	mov.w	r2, #4294967295
 8009730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009734:	f10a 0a01 	add.w	sl, sl, #1
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	9307      	str	r3, [sp, #28]
 800973c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009740:	931a      	str	r3, [sp, #104]	; 0x68
 8009742:	4654      	mov	r4, sl
 8009744:	2205      	movs	r2, #5
 8009746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974a:	4858      	ldr	r0, [pc, #352]	; (80098ac <_vfiprintf_r+0x24c>)
 800974c:	f7f6 fd80 	bl	8000250 <memchr>
 8009750:	9a04      	ldr	r2, [sp, #16]
 8009752:	b9d8      	cbnz	r0, 800978c <_vfiprintf_r+0x12c>
 8009754:	06d1      	lsls	r1, r2, #27
 8009756:	bf44      	itt	mi
 8009758:	2320      	movmi	r3, #32
 800975a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975e:	0713      	lsls	r3, r2, #28
 8009760:	bf44      	itt	mi
 8009762:	232b      	movmi	r3, #43	; 0x2b
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009768:	f89a 3000 	ldrb.w	r3, [sl]
 800976c:	2b2a      	cmp	r3, #42	; 0x2a
 800976e:	d015      	beq.n	800979c <_vfiprintf_r+0x13c>
 8009770:	9a07      	ldr	r2, [sp, #28]
 8009772:	4654      	mov	r4, sl
 8009774:	2000      	movs	r0, #0
 8009776:	f04f 0c0a 	mov.w	ip, #10
 800977a:	4621      	mov	r1, r4
 800977c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009780:	3b30      	subs	r3, #48	; 0x30
 8009782:	2b09      	cmp	r3, #9
 8009784:	d94e      	bls.n	8009824 <_vfiprintf_r+0x1c4>
 8009786:	b1b0      	cbz	r0, 80097b6 <_vfiprintf_r+0x156>
 8009788:	9207      	str	r2, [sp, #28]
 800978a:	e014      	b.n	80097b6 <_vfiprintf_r+0x156>
 800978c:	eba0 0308 	sub.w	r3, r0, r8
 8009790:	fa09 f303 	lsl.w	r3, r9, r3
 8009794:	4313      	orrs	r3, r2
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	46a2      	mov	sl, r4
 800979a:	e7d2      	b.n	8009742 <_vfiprintf_r+0xe2>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	1d19      	adds	r1, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	9103      	str	r1, [sp, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	bfbb      	ittet	lt
 80097a8:	425b      	neglt	r3, r3
 80097aa:	f042 0202 	orrlt.w	r2, r2, #2
 80097ae:	9307      	strge	r3, [sp, #28]
 80097b0:	9307      	strlt	r3, [sp, #28]
 80097b2:	bfb8      	it	lt
 80097b4:	9204      	strlt	r2, [sp, #16]
 80097b6:	7823      	ldrb	r3, [r4, #0]
 80097b8:	2b2e      	cmp	r3, #46	; 0x2e
 80097ba:	d10c      	bne.n	80097d6 <_vfiprintf_r+0x176>
 80097bc:	7863      	ldrb	r3, [r4, #1]
 80097be:	2b2a      	cmp	r3, #42	; 0x2a
 80097c0:	d135      	bne.n	800982e <_vfiprintf_r+0x1ce>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfb8      	it	lt
 80097ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80097d2:	3402      	adds	r4, #2
 80097d4:	9305      	str	r3, [sp, #20]
 80097d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098bc <_vfiprintf_r+0x25c>
 80097da:	7821      	ldrb	r1, [r4, #0]
 80097dc:	2203      	movs	r2, #3
 80097de:	4650      	mov	r0, sl
 80097e0:	f7f6 fd36 	bl	8000250 <memchr>
 80097e4:	b140      	cbz	r0, 80097f8 <_vfiprintf_r+0x198>
 80097e6:	2340      	movs	r3, #64	; 0x40
 80097e8:	eba0 000a 	sub.w	r0, r0, sl
 80097ec:	fa03 f000 	lsl.w	r0, r3, r0
 80097f0:	9b04      	ldr	r3, [sp, #16]
 80097f2:	4303      	orrs	r3, r0
 80097f4:	3401      	adds	r4, #1
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fc:	482c      	ldr	r0, [pc, #176]	; (80098b0 <_vfiprintf_r+0x250>)
 80097fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009802:	2206      	movs	r2, #6
 8009804:	f7f6 fd24 	bl	8000250 <memchr>
 8009808:	2800      	cmp	r0, #0
 800980a:	d03f      	beq.n	800988c <_vfiprintf_r+0x22c>
 800980c:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <_vfiprintf_r+0x254>)
 800980e:	bb1b      	cbnz	r3, 8009858 <_vfiprintf_r+0x1f8>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	3307      	adds	r3, #7
 8009814:	f023 0307 	bic.w	r3, r3, #7
 8009818:	3308      	adds	r3, #8
 800981a:	9303      	str	r3, [sp, #12]
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	443b      	add	r3, r7
 8009820:	9309      	str	r3, [sp, #36]	; 0x24
 8009822:	e767      	b.n	80096f4 <_vfiprintf_r+0x94>
 8009824:	fb0c 3202 	mla	r2, ip, r2, r3
 8009828:	460c      	mov	r4, r1
 800982a:	2001      	movs	r0, #1
 800982c:	e7a5      	b.n	800977a <_vfiprintf_r+0x11a>
 800982e:	2300      	movs	r3, #0
 8009830:	3401      	adds	r4, #1
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	4619      	mov	r1, r3
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	4620      	mov	r0, r4
 800983c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009840:	3a30      	subs	r2, #48	; 0x30
 8009842:	2a09      	cmp	r2, #9
 8009844:	d903      	bls.n	800984e <_vfiprintf_r+0x1ee>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0c5      	beq.n	80097d6 <_vfiprintf_r+0x176>
 800984a:	9105      	str	r1, [sp, #20]
 800984c:	e7c3      	b.n	80097d6 <_vfiprintf_r+0x176>
 800984e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009852:	4604      	mov	r4, r0
 8009854:	2301      	movs	r3, #1
 8009856:	e7f0      	b.n	800983a <_vfiprintf_r+0x1da>
 8009858:	ab03      	add	r3, sp, #12
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	462a      	mov	r2, r5
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <_vfiprintf_r+0x258>)
 8009860:	a904      	add	r1, sp, #16
 8009862:	4630      	mov	r0, r6
 8009864:	f3af 8000 	nop.w
 8009868:	4607      	mov	r7, r0
 800986a:	1c78      	adds	r0, r7, #1
 800986c:	d1d6      	bne.n	800981c <_vfiprintf_r+0x1bc>
 800986e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009870:	07d9      	lsls	r1, r3, #31
 8009872:	d405      	bmi.n	8009880 <_vfiprintf_r+0x220>
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	059a      	lsls	r2, r3, #22
 8009878:	d402      	bmi.n	8009880 <_vfiprintf_r+0x220>
 800987a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800987c:	f000 fc35 	bl	800a0ea <__retarget_lock_release_recursive>
 8009880:	89ab      	ldrh	r3, [r5, #12]
 8009882:	065b      	lsls	r3, r3, #25
 8009884:	f53f af12 	bmi.w	80096ac <_vfiprintf_r+0x4c>
 8009888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800988a:	e711      	b.n	80096b0 <_vfiprintf_r+0x50>
 800988c:	ab03      	add	r3, sp, #12
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	462a      	mov	r2, r5
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <_vfiprintf_r+0x258>)
 8009894:	a904      	add	r1, sp, #16
 8009896:	4630      	mov	r0, r6
 8009898:	f000 f880 	bl	800999c <_printf_i>
 800989c:	e7e4      	b.n	8009868 <_vfiprintf_r+0x208>
 800989e:	bf00      	nop
 80098a0:	0800a984 	.word	0x0800a984
 80098a4:	0800a9a4 	.word	0x0800a9a4
 80098a8:	0800a964 	.word	0x0800a964
 80098ac:	0800a931 	.word	0x0800a931
 80098b0:	0800a93b 	.word	0x0800a93b
 80098b4:	00000000 	.word	0x00000000
 80098b8:	0800963b 	.word	0x0800963b
 80098bc:	0800a937 	.word	0x0800a937

080098c0 <_printf_common>:
 80098c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	4616      	mov	r6, r2
 80098c6:	4699      	mov	r9, r3
 80098c8:	688a      	ldr	r2, [r1, #8]
 80098ca:	690b      	ldr	r3, [r1, #16]
 80098cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	bfb8      	it	lt
 80098d4:	4613      	movlt	r3, r2
 80098d6:	6033      	str	r3, [r6, #0]
 80098d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098dc:	4607      	mov	r7, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	b10a      	cbz	r2, 80098e6 <_printf_common+0x26>
 80098e2:	3301      	adds	r3, #1
 80098e4:	6033      	str	r3, [r6, #0]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	0699      	lsls	r1, r3, #26
 80098ea:	bf42      	ittt	mi
 80098ec:	6833      	ldrmi	r3, [r6, #0]
 80098ee:	3302      	addmi	r3, #2
 80098f0:	6033      	strmi	r3, [r6, #0]
 80098f2:	6825      	ldr	r5, [r4, #0]
 80098f4:	f015 0506 	ands.w	r5, r5, #6
 80098f8:	d106      	bne.n	8009908 <_printf_common+0x48>
 80098fa:	f104 0a19 	add.w	sl, r4, #25
 80098fe:	68e3      	ldr	r3, [r4, #12]
 8009900:	6832      	ldr	r2, [r6, #0]
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	42ab      	cmp	r3, r5
 8009906:	dc26      	bgt.n	8009956 <_printf_common+0x96>
 8009908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800990c:	1e13      	subs	r3, r2, #0
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	bf18      	it	ne
 8009912:	2301      	movne	r3, #1
 8009914:	0692      	lsls	r2, r2, #26
 8009916:	d42b      	bmi.n	8009970 <_printf_common+0xb0>
 8009918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800991c:	4649      	mov	r1, r9
 800991e:	4638      	mov	r0, r7
 8009920:	47c0      	blx	r8
 8009922:	3001      	adds	r0, #1
 8009924:	d01e      	beq.n	8009964 <_printf_common+0xa4>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	68e5      	ldr	r5, [r4, #12]
 800992a:	6832      	ldr	r2, [r6, #0]
 800992c:	f003 0306 	and.w	r3, r3, #6
 8009930:	2b04      	cmp	r3, #4
 8009932:	bf08      	it	eq
 8009934:	1aad      	subeq	r5, r5, r2
 8009936:	68a3      	ldr	r3, [r4, #8]
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	bf0c      	ite	eq
 800993c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009940:	2500      	movne	r5, #0
 8009942:	4293      	cmp	r3, r2
 8009944:	bfc4      	itt	gt
 8009946:	1a9b      	subgt	r3, r3, r2
 8009948:	18ed      	addgt	r5, r5, r3
 800994a:	2600      	movs	r6, #0
 800994c:	341a      	adds	r4, #26
 800994e:	42b5      	cmp	r5, r6
 8009950:	d11a      	bne.n	8009988 <_printf_common+0xc8>
 8009952:	2000      	movs	r0, #0
 8009954:	e008      	b.n	8009968 <_printf_common+0xa8>
 8009956:	2301      	movs	r3, #1
 8009958:	4652      	mov	r2, sl
 800995a:	4649      	mov	r1, r9
 800995c:	4638      	mov	r0, r7
 800995e:	47c0      	blx	r8
 8009960:	3001      	adds	r0, #1
 8009962:	d103      	bne.n	800996c <_printf_common+0xac>
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996c:	3501      	adds	r5, #1
 800996e:	e7c6      	b.n	80098fe <_printf_common+0x3e>
 8009970:	18e1      	adds	r1, r4, r3
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	2030      	movs	r0, #48	; 0x30
 8009976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800997a:	4422      	add	r2, r4
 800997c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009984:	3302      	adds	r3, #2
 8009986:	e7c7      	b.n	8009918 <_printf_common+0x58>
 8009988:	2301      	movs	r3, #1
 800998a:	4622      	mov	r2, r4
 800998c:	4649      	mov	r1, r9
 800998e:	4638      	mov	r0, r7
 8009990:	47c0      	blx	r8
 8009992:	3001      	adds	r0, #1
 8009994:	d0e6      	beq.n	8009964 <_printf_common+0xa4>
 8009996:	3601      	adds	r6, #1
 8009998:	e7d9      	b.n	800994e <_printf_common+0x8e>
	...

0800999c <_printf_i>:
 800999c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	7e0f      	ldrb	r7, [r1, #24]
 80099a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099a4:	2f78      	cmp	r7, #120	; 0x78
 80099a6:	4691      	mov	r9, r2
 80099a8:	4680      	mov	r8, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	469a      	mov	sl, r3
 80099ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099b2:	d807      	bhi.n	80099c4 <_printf_i+0x28>
 80099b4:	2f62      	cmp	r7, #98	; 0x62
 80099b6:	d80a      	bhi.n	80099ce <_printf_i+0x32>
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	f000 80d8 	beq.w	8009b6e <_printf_i+0x1d2>
 80099be:	2f58      	cmp	r7, #88	; 0x58
 80099c0:	f000 80a3 	beq.w	8009b0a <_printf_i+0x16e>
 80099c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099cc:	e03a      	b.n	8009a44 <_printf_i+0xa8>
 80099ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099d2:	2b15      	cmp	r3, #21
 80099d4:	d8f6      	bhi.n	80099c4 <_printf_i+0x28>
 80099d6:	a101      	add	r1, pc, #4	; (adr r1, 80099dc <_printf_i+0x40>)
 80099d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099dc:	08009a35 	.word	0x08009a35
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	080099c5 	.word	0x080099c5
 80099e8:	080099c5 	.word	0x080099c5
 80099ec:	080099c5 	.word	0x080099c5
 80099f0:	080099c5 	.word	0x080099c5
 80099f4:	08009a49 	.word	0x08009a49
 80099f8:	080099c5 	.word	0x080099c5
 80099fc:	080099c5 	.word	0x080099c5
 8009a00:	080099c5 	.word	0x080099c5
 8009a04:	080099c5 	.word	0x080099c5
 8009a08:	08009b55 	.word	0x08009b55
 8009a0c:	08009a79 	.word	0x08009a79
 8009a10:	08009b37 	.word	0x08009b37
 8009a14:	080099c5 	.word	0x080099c5
 8009a18:	080099c5 	.word	0x080099c5
 8009a1c:	08009b77 	.word	0x08009b77
 8009a20:	080099c5 	.word	0x080099c5
 8009a24:	08009a79 	.word	0x08009a79
 8009a28:	080099c5 	.word	0x080099c5
 8009a2c:	080099c5 	.word	0x080099c5
 8009a30:	08009b3f 	.word	0x08009b3f
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	602a      	str	r2, [r5, #0]
 8009a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a44:	2301      	movs	r3, #1
 8009a46:	e0a3      	b.n	8009b90 <_printf_i+0x1f4>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	6829      	ldr	r1, [r5, #0]
 8009a4c:	0606      	lsls	r6, r0, #24
 8009a4e:	f101 0304 	add.w	r3, r1, #4
 8009a52:	d50a      	bpl.n	8009a6a <_printf_i+0xce>
 8009a54:	680e      	ldr	r6, [r1, #0]
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	da03      	bge.n	8009a64 <_printf_i+0xc8>
 8009a5c:	232d      	movs	r3, #45	; 0x2d
 8009a5e:	4276      	negs	r6, r6
 8009a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a64:	485e      	ldr	r0, [pc, #376]	; (8009be0 <_printf_i+0x244>)
 8009a66:	230a      	movs	r3, #10
 8009a68:	e019      	b.n	8009a9e <_printf_i+0x102>
 8009a6a:	680e      	ldr	r6, [r1, #0]
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a72:	bf18      	it	ne
 8009a74:	b236      	sxthne	r6, r6
 8009a76:	e7ef      	b.n	8009a58 <_printf_i+0xbc>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	6820      	ldr	r0, [r4, #0]
 8009a7c:	1d19      	adds	r1, r3, #4
 8009a7e:	6029      	str	r1, [r5, #0]
 8009a80:	0601      	lsls	r1, r0, #24
 8009a82:	d501      	bpl.n	8009a88 <_printf_i+0xec>
 8009a84:	681e      	ldr	r6, [r3, #0]
 8009a86:	e002      	b.n	8009a8e <_printf_i+0xf2>
 8009a88:	0646      	lsls	r6, r0, #25
 8009a8a:	d5fb      	bpl.n	8009a84 <_printf_i+0xe8>
 8009a8c:	881e      	ldrh	r6, [r3, #0]
 8009a8e:	4854      	ldr	r0, [pc, #336]	; (8009be0 <_printf_i+0x244>)
 8009a90:	2f6f      	cmp	r7, #111	; 0x6f
 8009a92:	bf0c      	ite	eq
 8009a94:	2308      	moveq	r3, #8
 8009a96:	230a      	movne	r3, #10
 8009a98:	2100      	movs	r1, #0
 8009a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a9e:	6865      	ldr	r5, [r4, #4]
 8009aa0:	60a5      	str	r5, [r4, #8]
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	bfa2      	ittt	ge
 8009aa6:	6821      	ldrge	r1, [r4, #0]
 8009aa8:	f021 0104 	bicge.w	r1, r1, #4
 8009aac:	6021      	strge	r1, [r4, #0]
 8009aae:	b90e      	cbnz	r6, 8009ab4 <_printf_i+0x118>
 8009ab0:	2d00      	cmp	r5, #0
 8009ab2:	d04d      	beq.n	8009b50 <_printf_i+0x1b4>
 8009ab4:	4615      	mov	r5, r2
 8009ab6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009aba:	fb03 6711 	mls	r7, r3, r1, r6
 8009abe:	5dc7      	ldrb	r7, [r0, r7]
 8009ac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ac4:	4637      	mov	r7, r6
 8009ac6:	42bb      	cmp	r3, r7
 8009ac8:	460e      	mov	r6, r1
 8009aca:	d9f4      	bls.n	8009ab6 <_printf_i+0x11a>
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d10b      	bne.n	8009ae8 <_printf_i+0x14c>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	07de      	lsls	r6, r3, #31
 8009ad4:	d508      	bpl.n	8009ae8 <_printf_i+0x14c>
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	6861      	ldr	r1, [r4, #4]
 8009ada:	4299      	cmp	r1, r3
 8009adc:	bfde      	ittt	le
 8009ade:	2330      	movle	r3, #48	; 0x30
 8009ae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ae8:	1b52      	subs	r2, r2, r5
 8009aea:	6122      	str	r2, [r4, #16]
 8009aec:	f8cd a000 	str.w	sl, [sp]
 8009af0:	464b      	mov	r3, r9
 8009af2:	aa03      	add	r2, sp, #12
 8009af4:	4621      	mov	r1, r4
 8009af6:	4640      	mov	r0, r8
 8009af8:	f7ff fee2 	bl	80098c0 <_printf_common>
 8009afc:	3001      	adds	r0, #1
 8009afe:	d14c      	bne.n	8009b9a <_printf_i+0x1fe>
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	b004      	add	sp, #16
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	4835      	ldr	r0, [pc, #212]	; (8009be0 <_printf_i+0x244>)
 8009b0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b10:	6829      	ldr	r1, [r5, #0]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b18:	6029      	str	r1, [r5, #0]
 8009b1a:	061d      	lsls	r5, r3, #24
 8009b1c:	d514      	bpl.n	8009b48 <_printf_i+0x1ac>
 8009b1e:	07df      	lsls	r7, r3, #31
 8009b20:	bf44      	itt	mi
 8009b22:	f043 0320 	orrmi.w	r3, r3, #32
 8009b26:	6023      	strmi	r3, [r4, #0]
 8009b28:	b91e      	cbnz	r6, 8009b32 <_printf_i+0x196>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	f023 0320 	bic.w	r3, r3, #32
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	2310      	movs	r3, #16
 8009b34:	e7b0      	b.n	8009a98 <_printf_i+0xfc>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f043 0320 	orr.w	r3, r3, #32
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	2378      	movs	r3, #120	; 0x78
 8009b40:	4828      	ldr	r0, [pc, #160]	; (8009be4 <_printf_i+0x248>)
 8009b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b46:	e7e3      	b.n	8009b10 <_printf_i+0x174>
 8009b48:	0659      	lsls	r1, r3, #25
 8009b4a:	bf48      	it	mi
 8009b4c:	b2b6      	uxthmi	r6, r6
 8009b4e:	e7e6      	b.n	8009b1e <_printf_i+0x182>
 8009b50:	4615      	mov	r5, r2
 8009b52:	e7bb      	b.n	8009acc <_printf_i+0x130>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	6826      	ldr	r6, [r4, #0]
 8009b58:	6961      	ldr	r1, [r4, #20]
 8009b5a:	1d18      	adds	r0, r3, #4
 8009b5c:	6028      	str	r0, [r5, #0]
 8009b5e:	0635      	lsls	r5, r6, #24
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	d501      	bpl.n	8009b68 <_printf_i+0x1cc>
 8009b64:	6019      	str	r1, [r3, #0]
 8009b66:	e002      	b.n	8009b6e <_printf_i+0x1d2>
 8009b68:	0670      	lsls	r0, r6, #25
 8009b6a:	d5fb      	bpl.n	8009b64 <_printf_i+0x1c8>
 8009b6c:	8019      	strh	r1, [r3, #0]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6123      	str	r3, [r4, #16]
 8009b72:	4615      	mov	r5, r2
 8009b74:	e7ba      	b.n	8009aec <_printf_i+0x150>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	602a      	str	r2, [r5, #0]
 8009b7c:	681d      	ldr	r5, [r3, #0]
 8009b7e:	6862      	ldr	r2, [r4, #4]
 8009b80:	2100      	movs	r1, #0
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7f6 fb64 	bl	8000250 <memchr>
 8009b88:	b108      	cbz	r0, 8009b8e <_printf_i+0x1f2>
 8009b8a:	1b40      	subs	r0, r0, r5
 8009b8c:	6060      	str	r0, [r4, #4]
 8009b8e:	6863      	ldr	r3, [r4, #4]
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	2300      	movs	r3, #0
 8009b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b98:	e7a8      	b.n	8009aec <_printf_i+0x150>
 8009b9a:	6923      	ldr	r3, [r4, #16]
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	47d0      	blx	sl
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d0ab      	beq.n	8009b00 <_printf_i+0x164>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	079b      	lsls	r3, r3, #30
 8009bac:	d413      	bmi.n	8009bd6 <_printf_i+0x23a>
 8009bae:	68e0      	ldr	r0, [r4, #12]
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	4298      	cmp	r0, r3
 8009bb4:	bfb8      	it	lt
 8009bb6:	4618      	movlt	r0, r3
 8009bb8:	e7a4      	b.n	8009b04 <_printf_i+0x168>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	47d0      	blx	sl
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d09b      	beq.n	8009b00 <_printf_i+0x164>
 8009bc8:	3501      	adds	r5, #1
 8009bca:	68e3      	ldr	r3, [r4, #12]
 8009bcc:	9903      	ldr	r1, [sp, #12]
 8009bce:	1a5b      	subs	r3, r3, r1
 8009bd0:	42ab      	cmp	r3, r5
 8009bd2:	dcf2      	bgt.n	8009bba <_printf_i+0x21e>
 8009bd4:	e7eb      	b.n	8009bae <_printf_i+0x212>
 8009bd6:	2500      	movs	r5, #0
 8009bd8:	f104 0619 	add.w	r6, r4, #25
 8009bdc:	e7f5      	b.n	8009bca <_printf_i+0x22e>
 8009bde:	bf00      	nop
 8009be0:	0800a942 	.word	0x0800a942
 8009be4:	0800a953 	.word	0x0800a953

08009be8 <__swbuf_r>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	460e      	mov	r6, r1
 8009bec:	4614      	mov	r4, r2
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b118      	cbz	r0, 8009bfa <__swbuf_r+0x12>
 8009bf2:	6983      	ldr	r3, [r0, #24]
 8009bf4:	b90b      	cbnz	r3, 8009bfa <__swbuf_r+0x12>
 8009bf6:	f000 f9d9 	bl	8009fac <__sinit>
 8009bfa:	4b21      	ldr	r3, [pc, #132]	; (8009c80 <__swbuf_r+0x98>)
 8009bfc:	429c      	cmp	r4, r3
 8009bfe:	d12b      	bne.n	8009c58 <__swbuf_r+0x70>
 8009c00:	686c      	ldr	r4, [r5, #4]
 8009c02:	69a3      	ldr	r3, [r4, #24]
 8009c04:	60a3      	str	r3, [r4, #8]
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	071a      	lsls	r2, r3, #28
 8009c0a:	d52f      	bpl.n	8009c6c <__swbuf_r+0x84>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	b36b      	cbz	r3, 8009c6c <__swbuf_r+0x84>
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	6820      	ldr	r0, [r4, #0]
 8009c14:	1ac0      	subs	r0, r0, r3
 8009c16:	6963      	ldr	r3, [r4, #20]
 8009c18:	b2f6      	uxtb	r6, r6
 8009c1a:	4283      	cmp	r3, r0
 8009c1c:	4637      	mov	r7, r6
 8009c1e:	dc04      	bgt.n	8009c2a <__swbuf_r+0x42>
 8009c20:	4621      	mov	r1, r4
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 f92e 	bl	8009e84 <_fflush_r>
 8009c28:	bb30      	cbnz	r0, 8009c78 <__swbuf_r+0x90>
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	60a3      	str	r3, [r4, #8]
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	6022      	str	r2, [r4, #0]
 8009c36:	701e      	strb	r6, [r3, #0]
 8009c38:	6963      	ldr	r3, [r4, #20]
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	4283      	cmp	r3, r0
 8009c3e:	d004      	beq.n	8009c4a <__swbuf_r+0x62>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	07db      	lsls	r3, r3, #31
 8009c44:	d506      	bpl.n	8009c54 <__swbuf_r+0x6c>
 8009c46:	2e0a      	cmp	r6, #10
 8009c48:	d104      	bne.n	8009c54 <__swbuf_r+0x6c>
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f000 f919 	bl	8009e84 <_fflush_r>
 8009c52:	b988      	cbnz	r0, 8009c78 <__swbuf_r+0x90>
 8009c54:	4638      	mov	r0, r7
 8009c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c58:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <__swbuf_r+0x9c>)
 8009c5a:	429c      	cmp	r4, r3
 8009c5c:	d101      	bne.n	8009c62 <__swbuf_r+0x7a>
 8009c5e:	68ac      	ldr	r4, [r5, #8]
 8009c60:	e7cf      	b.n	8009c02 <__swbuf_r+0x1a>
 8009c62:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <__swbuf_r+0xa0>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	bf08      	it	eq
 8009c68:	68ec      	ldreq	r4, [r5, #12]
 8009c6a:	e7ca      	b.n	8009c02 <__swbuf_r+0x1a>
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f000 f80c 	bl	8009c8c <__swsetup_r>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d0cb      	beq.n	8009c10 <__swbuf_r+0x28>
 8009c78:	f04f 37ff 	mov.w	r7, #4294967295
 8009c7c:	e7ea      	b.n	8009c54 <__swbuf_r+0x6c>
 8009c7e:	bf00      	nop
 8009c80:	0800a984 	.word	0x0800a984
 8009c84:	0800a9a4 	.word	0x0800a9a4
 8009c88:	0800a964 	.word	0x0800a964

08009c8c <__swsetup_r>:
 8009c8c:	4b32      	ldr	r3, [pc, #200]	; (8009d58 <__swsetup_r+0xcc>)
 8009c8e:	b570      	push	{r4, r5, r6, lr}
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	4606      	mov	r6, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	b125      	cbz	r5, 8009ca2 <__swsetup_r+0x16>
 8009c98:	69ab      	ldr	r3, [r5, #24]
 8009c9a:	b913      	cbnz	r3, 8009ca2 <__swsetup_r+0x16>
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f000 f985 	bl	8009fac <__sinit>
 8009ca2:	4b2e      	ldr	r3, [pc, #184]	; (8009d5c <__swsetup_r+0xd0>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d10f      	bne.n	8009cc8 <__swsetup_r+0x3c>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cb0:	0719      	lsls	r1, r3, #28
 8009cb2:	d42c      	bmi.n	8009d0e <__swsetup_r+0x82>
 8009cb4:	06dd      	lsls	r5, r3, #27
 8009cb6:	d411      	bmi.n	8009cdc <__swsetup_r+0x50>
 8009cb8:	2309      	movs	r3, #9
 8009cba:	6033      	str	r3, [r6, #0]
 8009cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc6:	e03e      	b.n	8009d46 <__swsetup_r+0xba>
 8009cc8:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <__swsetup_r+0xd4>)
 8009cca:	429c      	cmp	r4, r3
 8009ccc:	d101      	bne.n	8009cd2 <__swsetup_r+0x46>
 8009cce:	68ac      	ldr	r4, [r5, #8]
 8009cd0:	e7eb      	b.n	8009caa <__swsetup_r+0x1e>
 8009cd2:	4b24      	ldr	r3, [pc, #144]	; (8009d64 <__swsetup_r+0xd8>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	bf08      	it	eq
 8009cd8:	68ec      	ldreq	r4, [r5, #12]
 8009cda:	e7e6      	b.n	8009caa <__swsetup_r+0x1e>
 8009cdc:	0758      	lsls	r0, r3, #29
 8009cde:	d512      	bpl.n	8009d06 <__swsetup_r+0x7a>
 8009ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce2:	b141      	cbz	r1, 8009cf6 <__swsetup_r+0x6a>
 8009ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce8:	4299      	cmp	r1, r3
 8009cea:	d002      	beq.n	8009cf2 <__swsetup_r+0x66>
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7ff fc41 	bl	8009574 <_free_r>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cfc:	81a3      	strh	r3, [r4, #12]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	6063      	str	r3, [r4, #4]
 8009d02:	6923      	ldr	r3, [r4, #16]
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f043 0308 	orr.w	r3, r3, #8
 8009d0c:	81a3      	strh	r3, [r4, #12]
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	b94b      	cbnz	r3, 8009d26 <__swsetup_r+0x9a>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d1c:	d003      	beq.n	8009d26 <__swsetup_r+0x9a>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 fa09 	bl	800a138 <__smakebuf_r>
 8009d26:	89a0      	ldrh	r0, [r4, #12]
 8009d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d2c:	f010 0301 	ands.w	r3, r0, #1
 8009d30:	d00a      	beq.n	8009d48 <__swsetup_r+0xbc>
 8009d32:	2300      	movs	r3, #0
 8009d34:	60a3      	str	r3, [r4, #8]
 8009d36:	6963      	ldr	r3, [r4, #20]
 8009d38:	425b      	negs	r3, r3
 8009d3a:	61a3      	str	r3, [r4, #24]
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	b943      	cbnz	r3, 8009d52 <__swsetup_r+0xc6>
 8009d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d44:	d1ba      	bne.n	8009cbc <__swsetup_r+0x30>
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	0781      	lsls	r1, r0, #30
 8009d4a:	bf58      	it	pl
 8009d4c:	6963      	ldrpl	r3, [r4, #20]
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	e7f4      	b.n	8009d3c <__swsetup_r+0xb0>
 8009d52:	2000      	movs	r0, #0
 8009d54:	e7f7      	b.n	8009d46 <__swsetup_r+0xba>
 8009d56:	bf00      	nop
 8009d58:	2000000c 	.word	0x2000000c
 8009d5c:	0800a984 	.word	0x0800a984
 8009d60:	0800a9a4 	.word	0x0800a9a4
 8009d64:	0800a964 	.word	0x0800a964

08009d68 <abort>:
 8009d68:	b508      	push	{r3, lr}
 8009d6a:	2006      	movs	r0, #6
 8009d6c:	f000 fa4c 	bl	800a208 <raise>
 8009d70:	2001      	movs	r0, #1
 8009d72:	f7f8 f82f 	bl	8001dd4 <_exit>
	...

08009d78 <__sflush_r>:
 8009d78:	898a      	ldrh	r2, [r1, #12]
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	4605      	mov	r5, r0
 8009d80:	0710      	lsls	r0, r2, #28
 8009d82:	460c      	mov	r4, r1
 8009d84:	d458      	bmi.n	8009e38 <__sflush_r+0xc0>
 8009d86:	684b      	ldr	r3, [r1, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	dc05      	bgt.n	8009d98 <__sflush_r+0x20>
 8009d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	dc02      	bgt.n	8009d98 <__sflush_r+0x20>
 8009d92:	2000      	movs	r0, #0
 8009d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d0f9      	beq.n	8009d92 <__sflush_r+0x1a>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009da4:	682f      	ldr	r7, [r5, #0]
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	d032      	beq.n	8009e10 <__sflush_r+0x98>
 8009daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	075a      	lsls	r2, r3, #29
 8009db0:	d505      	bpl.n	8009dbe <__sflush_r+0x46>
 8009db2:	6863      	ldr	r3, [r4, #4]
 8009db4:	1ac0      	subs	r0, r0, r3
 8009db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009db8:	b10b      	cbz	r3, 8009dbe <__sflush_r+0x46>
 8009dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dbc:	1ac0      	subs	r0, r0, r3
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b0      	blx	r6
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	d106      	bne.n	8009dde <__sflush_r+0x66>
 8009dd0:	6829      	ldr	r1, [r5, #0]
 8009dd2:	291d      	cmp	r1, #29
 8009dd4:	d82c      	bhi.n	8009e30 <__sflush_r+0xb8>
 8009dd6:	4a2a      	ldr	r2, [pc, #168]	; (8009e80 <__sflush_r+0x108>)
 8009dd8:	40ca      	lsrs	r2, r1
 8009dda:	07d6      	lsls	r6, r2, #31
 8009ddc:	d528      	bpl.n	8009e30 <__sflush_r+0xb8>
 8009dde:	2200      	movs	r2, #0
 8009de0:	6062      	str	r2, [r4, #4]
 8009de2:	04d9      	lsls	r1, r3, #19
 8009de4:	6922      	ldr	r2, [r4, #16]
 8009de6:	6022      	str	r2, [r4, #0]
 8009de8:	d504      	bpl.n	8009df4 <__sflush_r+0x7c>
 8009dea:	1c42      	adds	r2, r0, #1
 8009dec:	d101      	bne.n	8009df2 <__sflush_r+0x7a>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b903      	cbnz	r3, 8009df4 <__sflush_r+0x7c>
 8009df2:	6560      	str	r0, [r4, #84]	; 0x54
 8009df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009df6:	602f      	str	r7, [r5, #0]
 8009df8:	2900      	cmp	r1, #0
 8009dfa:	d0ca      	beq.n	8009d92 <__sflush_r+0x1a>
 8009dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e00:	4299      	cmp	r1, r3
 8009e02:	d002      	beq.n	8009e0a <__sflush_r+0x92>
 8009e04:	4628      	mov	r0, r5
 8009e06:	f7ff fbb5 	bl	8009574 <_free_r>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e0e:	e7c1      	b.n	8009d94 <__sflush_r+0x1c>
 8009e10:	6a21      	ldr	r1, [r4, #32]
 8009e12:	2301      	movs	r3, #1
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b0      	blx	r6
 8009e18:	1c41      	adds	r1, r0, #1
 8009e1a:	d1c7      	bne.n	8009dac <__sflush_r+0x34>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0c4      	beq.n	8009dac <__sflush_r+0x34>
 8009e22:	2b1d      	cmp	r3, #29
 8009e24:	d001      	beq.n	8009e2a <__sflush_r+0xb2>
 8009e26:	2b16      	cmp	r3, #22
 8009e28:	d101      	bne.n	8009e2e <__sflush_r+0xb6>
 8009e2a:	602f      	str	r7, [r5, #0]
 8009e2c:	e7b1      	b.n	8009d92 <__sflush_r+0x1a>
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e34:	81a3      	strh	r3, [r4, #12]
 8009e36:	e7ad      	b.n	8009d94 <__sflush_r+0x1c>
 8009e38:	690f      	ldr	r7, [r1, #16]
 8009e3a:	2f00      	cmp	r7, #0
 8009e3c:	d0a9      	beq.n	8009d92 <__sflush_r+0x1a>
 8009e3e:	0793      	lsls	r3, r2, #30
 8009e40:	680e      	ldr	r6, [r1, #0]
 8009e42:	bf08      	it	eq
 8009e44:	694b      	ldreq	r3, [r1, #20]
 8009e46:	600f      	str	r7, [r1, #0]
 8009e48:	bf18      	it	ne
 8009e4a:	2300      	movne	r3, #0
 8009e4c:	eba6 0807 	sub.w	r8, r6, r7
 8009e50:	608b      	str	r3, [r1, #8]
 8009e52:	f1b8 0f00 	cmp.w	r8, #0
 8009e56:	dd9c      	ble.n	8009d92 <__sflush_r+0x1a>
 8009e58:	6a21      	ldr	r1, [r4, #32]
 8009e5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e5c:	4643      	mov	r3, r8
 8009e5e:	463a      	mov	r2, r7
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b0      	blx	r6
 8009e64:	2800      	cmp	r0, #0
 8009e66:	dc06      	bgt.n	8009e76 <__sflush_r+0xfe>
 8009e68:	89a3      	ldrh	r3, [r4, #12]
 8009e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e6e:	81a3      	strh	r3, [r4, #12]
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	e78e      	b.n	8009d94 <__sflush_r+0x1c>
 8009e76:	4407      	add	r7, r0
 8009e78:	eba8 0800 	sub.w	r8, r8, r0
 8009e7c:	e7e9      	b.n	8009e52 <__sflush_r+0xda>
 8009e7e:	bf00      	nop
 8009e80:	20400001 	.word	0x20400001

08009e84 <_fflush_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	690b      	ldr	r3, [r1, #16]
 8009e88:	4605      	mov	r5, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	b913      	cbnz	r3, 8009e94 <_fflush_r+0x10>
 8009e8e:	2500      	movs	r5, #0
 8009e90:	4628      	mov	r0, r5
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	b118      	cbz	r0, 8009e9e <_fflush_r+0x1a>
 8009e96:	6983      	ldr	r3, [r0, #24]
 8009e98:	b90b      	cbnz	r3, 8009e9e <_fflush_r+0x1a>
 8009e9a:	f000 f887 	bl	8009fac <__sinit>
 8009e9e:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <_fflush_r+0x6c>)
 8009ea0:	429c      	cmp	r4, r3
 8009ea2:	d11b      	bne.n	8009edc <_fflush_r+0x58>
 8009ea4:	686c      	ldr	r4, [r5, #4]
 8009ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0ef      	beq.n	8009e8e <_fflush_r+0xa>
 8009eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eb0:	07d0      	lsls	r0, r2, #31
 8009eb2:	d404      	bmi.n	8009ebe <_fflush_r+0x3a>
 8009eb4:	0599      	lsls	r1, r3, #22
 8009eb6:	d402      	bmi.n	8009ebe <_fflush_r+0x3a>
 8009eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eba:	f000 f915 	bl	800a0e8 <__retarget_lock_acquire_recursive>
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	f7ff ff59 	bl	8009d78 <__sflush_r>
 8009ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ec8:	07da      	lsls	r2, r3, #31
 8009eca:	4605      	mov	r5, r0
 8009ecc:	d4e0      	bmi.n	8009e90 <_fflush_r+0xc>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	059b      	lsls	r3, r3, #22
 8009ed2:	d4dd      	bmi.n	8009e90 <_fflush_r+0xc>
 8009ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed6:	f000 f908 	bl	800a0ea <__retarget_lock_release_recursive>
 8009eda:	e7d9      	b.n	8009e90 <_fflush_r+0xc>
 8009edc:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <_fflush_r+0x70>)
 8009ede:	429c      	cmp	r4, r3
 8009ee0:	d101      	bne.n	8009ee6 <_fflush_r+0x62>
 8009ee2:	68ac      	ldr	r4, [r5, #8]
 8009ee4:	e7df      	b.n	8009ea6 <_fflush_r+0x22>
 8009ee6:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <_fflush_r+0x74>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	bf08      	it	eq
 8009eec:	68ec      	ldreq	r4, [r5, #12]
 8009eee:	e7da      	b.n	8009ea6 <_fflush_r+0x22>
 8009ef0:	0800a984 	.word	0x0800a984
 8009ef4:	0800a9a4 	.word	0x0800a9a4
 8009ef8:	0800a964 	.word	0x0800a964

08009efc <std>:
 8009efc:	2300      	movs	r3, #0
 8009efe:	b510      	push	{r4, lr}
 8009f00:	4604      	mov	r4, r0
 8009f02:	e9c0 3300 	strd	r3, r3, [r0]
 8009f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f0a:	6083      	str	r3, [r0, #8]
 8009f0c:	8181      	strh	r1, [r0, #12]
 8009f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f10:	81c2      	strh	r2, [r0, #14]
 8009f12:	6183      	str	r3, [r0, #24]
 8009f14:	4619      	mov	r1, r3
 8009f16:	2208      	movs	r2, #8
 8009f18:	305c      	adds	r0, #92	; 0x5c
 8009f1a:	f7fd fb4f 	bl	80075bc <memset>
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <std+0x38>)
 8009f20:	6263      	str	r3, [r4, #36]	; 0x24
 8009f22:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <std+0x3c>)
 8009f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f26:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <std+0x40>)
 8009f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <std+0x44>)
 8009f2c:	6224      	str	r4, [r4, #32]
 8009f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	bf00      	nop
 8009f34:	0800a241 	.word	0x0800a241
 8009f38:	0800a263 	.word	0x0800a263
 8009f3c:	0800a29b 	.word	0x0800a29b
 8009f40:	0800a2bf 	.word	0x0800a2bf

08009f44 <_cleanup_r>:
 8009f44:	4901      	ldr	r1, [pc, #4]	; (8009f4c <_cleanup_r+0x8>)
 8009f46:	f000 b8af 	b.w	800a0a8 <_fwalk_reent>
 8009f4a:	bf00      	nop
 8009f4c:	08009e85 	.word	0x08009e85

08009f50 <__sfmoreglue>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	2268      	movs	r2, #104	; 0x68
 8009f54:	1e4d      	subs	r5, r1, #1
 8009f56:	4355      	muls	r5, r2
 8009f58:	460e      	mov	r6, r1
 8009f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f5e:	f7ff fa15 	bl	800938c <_malloc_r>
 8009f62:	4604      	mov	r4, r0
 8009f64:	b140      	cbz	r0, 8009f78 <__sfmoreglue+0x28>
 8009f66:	2100      	movs	r1, #0
 8009f68:	e9c0 1600 	strd	r1, r6, [r0]
 8009f6c:	300c      	adds	r0, #12
 8009f6e:	60a0      	str	r0, [r4, #8]
 8009f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f74:	f7fd fb22 	bl	80075bc <memset>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}

08009f7c <__sfp_lock_acquire>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	; (8009f84 <__sfp_lock_acquire+0x8>)
 8009f7e:	f000 b8b3 	b.w	800a0e8 <__retarget_lock_acquire_recursive>
 8009f82:	bf00      	nop
 8009f84:	200004e5 	.word	0x200004e5

08009f88 <__sfp_lock_release>:
 8009f88:	4801      	ldr	r0, [pc, #4]	; (8009f90 <__sfp_lock_release+0x8>)
 8009f8a:	f000 b8ae 	b.w	800a0ea <__retarget_lock_release_recursive>
 8009f8e:	bf00      	nop
 8009f90:	200004e5 	.word	0x200004e5

08009f94 <__sinit_lock_acquire>:
 8009f94:	4801      	ldr	r0, [pc, #4]	; (8009f9c <__sinit_lock_acquire+0x8>)
 8009f96:	f000 b8a7 	b.w	800a0e8 <__retarget_lock_acquire_recursive>
 8009f9a:	bf00      	nop
 8009f9c:	200004e6 	.word	0x200004e6

08009fa0 <__sinit_lock_release>:
 8009fa0:	4801      	ldr	r0, [pc, #4]	; (8009fa8 <__sinit_lock_release+0x8>)
 8009fa2:	f000 b8a2 	b.w	800a0ea <__retarget_lock_release_recursive>
 8009fa6:	bf00      	nop
 8009fa8:	200004e6 	.word	0x200004e6

08009fac <__sinit>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4604      	mov	r4, r0
 8009fb0:	f7ff fff0 	bl	8009f94 <__sinit_lock_acquire>
 8009fb4:	69a3      	ldr	r3, [r4, #24]
 8009fb6:	b11b      	cbz	r3, 8009fc0 <__sinit+0x14>
 8009fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fbc:	f7ff bff0 	b.w	8009fa0 <__sinit_lock_release>
 8009fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8009fc6:	4b13      	ldr	r3, [pc, #76]	; (800a014 <__sinit+0x68>)
 8009fc8:	4a13      	ldr	r2, [pc, #76]	; (800a018 <__sinit+0x6c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fce:	42a3      	cmp	r3, r4
 8009fd0:	bf04      	itt	eq
 8009fd2:	2301      	moveq	r3, #1
 8009fd4:	61a3      	streq	r3, [r4, #24]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f820 	bl	800a01c <__sfp>
 8009fdc:	6060      	str	r0, [r4, #4]
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 f81c 	bl	800a01c <__sfp>
 8009fe4:	60a0      	str	r0, [r4, #8]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 f818 	bl	800a01c <__sfp>
 8009fec:	2200      	movs	r2, #0
 8009fee:	60e0      	str	r0, [r4, #12]
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	6860      	ldr	r0, [r4, #4]
 8009ff4:	f7ff ff82 	bl	8009efc <std>
 8009ff8:	68a0      	ldr	r0, [r4, #8]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	2109      	movs	r1, #9
 8009ffe:	f7ff ff7d 	bl	8009efc <std>
 800a002:	68e0      	ldr	r0, [r4, #12]
 800a004:	2202      	movs	r2, #2
 800a006:	2112      	movs	r1, #18
 800a008:	f7ff ff78 	bl	8009efc <std>
 800a00c:	2301      	movs	r3, #1
 800a00e:	61a3      	str	r3, [r4, #24]
 800a010:	e7d2      	b.n	8009fb8 <__sinit+0xc>
 800a012:	bf00      	nop
 800a014:	0800a598 	.word	0x0800a598
 800a018:	08009f45 	.word	0x08009f45

0800a01c <__sfp>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	4607      	mov	r7, r0
 800a020:	f7ff ffac 	bl	8009f7c <__sfp_lock_acquire>
 800a024:	4b1e      	ldr	r3, [pc, #120]	; (800a0a0 <__sfp+0x84>)
 800a026:	681e      	ldr	r6, [r3, #0]
 800a028:	69b3      	ldr	r3, [r6, #24]
 800a02a:	b913      	cbnz	r3, 800a032 <__sfp+0x16>
 800a02c:	4630      	mov	r0, r6
 800a02e:	f7ff ffbd 	bl	8009fac <__sinit>
 800a032:	3648      	adds	r6, #72	; 0x48
 800a034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a038:	3b01      	subs	r3, #1
 800a03a:	d503      	bpl.n	800a044 <__sfp+0x28>
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	b30b      	cbz	r3, 800a084 <__sfp+0x68>
 800a040:	6836      	ldr	r6, [r6, #0]
 800a042:	e7f7      	b.n	800a034 <__sfp+0x18>
 800a044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a048:	b9d5      	cbnz	r5, 800a080 <__sfp+0x64>
 800a04a:	4b16      	ldr	r3, [pc, #88]	; (800a0a4 <__sfp+0x88>)
 800a04c:	60e3      	str	r3, [r4, #12]
 800a04e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a052:	6665      	str	r5, [r4, #100]	; 0x64
 800a054:	f000 f847 	bl	800a0e6 <__retarget_lock_init_recursive>
 800a058:	f7ff ff96 	bl	8009f88 <__sfp_lock_release>
 800a05c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a064:	6025      	str	r5, [r4, #0]
 800a066:	61a5      	str	r5, [r4, #24]
 800a068:	2208      	movs	r2, #8
 800a06a:	4629      	mov	r1, r5
 800a06c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a070:	f7fd faa4 	bl	80075bc <memset>
 800a074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a07c:	4620      	mov	r0, r4
 800a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a080:	3468      	adds	r4, #104	; 0x68
 800a082:	e7d9      	b.n	800a038 <__sfp+0x1c>
 800a084:	2104      	movs	r1, #4
 800a086:	4638      	mov	r0, r7
 800a088:	f7ff ff62 	bl	8009f50 <__sfmoreglue>
 800a08c:	4604      	mov	r4, r0
 800a08e:	6030      	str	r0, [r6, #0]
 800a090:	2800      	cmp	r0, #0
 800a092:	d1d5      	bne.n	800a040 <__sfp+0x24>
 800a094:	f7ff ff78 	bl	8009f88 <__sfp_lock_release>
 800a098:	230c      	movs	r3, #12
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	e7ee      	b.n	800a07c <__sfp+0x60>
 800a09e:	bf00      	nop
 800a0a0:	0800a598 	.word	0x0800a598
 800a0a4:	ffff0001 	.word	0xffff0001

0800a0a8 <_fwalk_reent>:
 800a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	4688      	mov	r8, r1
 800a0b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0b4:	2700      	movs	r7, #0
 800a0b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0ba:	f1b9 0901 	subs.w	r9, r9, #1
 800a0be:	d505      	bpl.n	800a0cc <_fwalk_reent+0x24>
 800a0c0:	6824      	ldr	r4, [r4, #0]
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	d1f7      	bne.n	800a0b6 <_fwalk_reent+0xe>
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0cc:	89ab      	ldrh	r3, [r5, #12]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d907      	bls.n	800a0e2 <_fwalk_reent+0x3a>
 800a0d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	d003      	beq.n	800a0e2 <_fwalk_reent+0x3a>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4630      	mov	r0, r6
 800a0de:	47c0      	blx	r8
 800a0e0:	4307      	orrs	r7, r0
 800a0e2:	3568      	adds	r5, #104	; 0x68
 800a0e4:	e7e9      	b.n	800a0ba <_fwalk_reent+0x12>

0800a0e6 <__retarget_lock_init_recursive>:
 800a0e6:	4770      	bx	lr

0800a0e8 <__retarget_lock_acquire_recursive>:
 800a0e8:	4770      	bx	lr

0800a0ea <__retarget_lock_release_recursive>:
 800a0ea:	4770      	bx	lr

0800a0ec <__swhatbuf_r>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	460e      	mov	r6, r1
 800a0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	b096      	sub	sp, #88	; 0x58
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	461d      	mov	r5, r3
 800a0fc:	da08      	bge.n	800a110 <__swhatbuf_r+0x24>
 800a0fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	602a      	str	r2, [r5, #0]
 800a106:	061a      	lsls	r2, r3, #24
 800a108:	d410      	bmi.n	800a12c <__swhatbuf_r+0x40>
 800a10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a10e:	e00e      	b.n	800a12e <__swhatbuf_r+0x42>
 800a110:	466a      	mov	r2, sp
 800a112:	f000 f8fb 	bl	800a30c <_fstat_r>
 800a116:	2800      	cmp	r0, #0
 800a118:	dbf1      	blt.n	800a0fe <__swhatbuf_r+0x12>
 800a11a:	9a01      	ldr	r2, [sp, #4]
 800a11c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a124:	425a      	negs	r2, r3
 800a126:	415a      	adcs	r2, r3
 800a128:	602a      	str	r2, [r5, #0]
 800a12a:	e7ee      	b.n	800a10a <__swhatbuf_r+0x1e>
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	2000      	movs	r0, #0
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	b016      	add	sp, #88	; 0x58
 800a134:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a138 <__smakebuf_r>:
 800a138:	898b      	ldrh	r3, [r1, #12]
 800a13a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a13c:	079d      	lsls	r5, r3, #30
 800a13e:	4606      	mov	r6, r0
 800a140:	460c      	mov	r4, r1
 800a142:	d507      	bpl.n	800a154 <__smakebuf_r+0x1c>
 800a144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	2301      	movs	r3, #1
 800a14e:	6163      	str	r3, [r4, #20]
 800a150:	b002      	add	sp, #8
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	ab01      	add	r3, sp, #4
 800a156:	466a      	mov	r2, sp
 800a158:	f7ff ffc8 	bl	800a0ec <__swhatbuf_r>
 800a15c:	9900      	ldr	r1, [sp, #0]
 800a15e:	4605      	mov	r5, r0
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff f913 	bl	800938c <_malloc_r>
 800a166:	b948      	cbnz	r0, 800a17c <__smakebuf_r+0x44>
 800a168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16c:	059a      	lsls	r2, r3, #22
 800a16e:	d4ef      	bmi.n	800a150 <__smakebuf_r+0x18>
 800a170:	f023 0303 	bic.w	r3, r3, #3
 800a174:	f043 0302 	orr.w	r3, r3, #2
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	e7e3      	b.n	800a144 <__smakebuf_r+0xc>
 800a17c:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <__smakebuf_r+0x7c>)
 800a17e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	9b00      	ldr	r3, [sp, #0]
 800a18c:	6163      	str	r3, [r4, #20]
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	6120      	str	r0, [r4, #16]
 800a192:	b15b      	cbz	r3, 800a1ac <__smakebuf_r+0x74>
 800a194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a198:	4630      	mov	r0, r6
 800a19a:	f000 f8c9 	bl	800a330 <_isatty_r>
 800a19e:	b128      	cbz	r0, 800a1ac <__smakebuf_r+0x74>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	89a0      	ldrh	r0, [r4, #12]
 800a1ae:	4305      	orrs	r5, r0
 800a1b0:	81a5      	strh	r5, [r4, #12]
 800a1b2:	e7cd      	b.n	800a150 <__smakebuf_r+0x18>
 800a1b4:	08009f45 	.word	0x08009f45

0800a1b8 <_raise_r>:
 800a1b8:	291f      	cmp	r1, #31
 800a1ba:	b538      	push	{r3, r4, r5, lr}
 800a1bc:	4604      	mov	r4, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	d904      	bls.n	800a1cc <_raise_r+0x14>
 800a1c2:	2316      	movs	r3, #22
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1ce:	b112      	cbz	r2, 800a1d6 <_raise_r+0x1e>
 800a1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1d4:	b94b      	cbnz	r3, 800a1ea <_raise_r+0x32>
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 f830 	bl	800a23c <_getpid_r>
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4601      	mov	r1, r0
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e6:	f000 b817 	b.w	800a218 <_kill_r>
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d00a      	beq.n	800a204 <_raise_r+0x4c>
 800a1ee:	1c59      	adds	r1, r3, #1
 800a1f0:	d103      	bne.n	800a1fa <_raise_r+0x42>
 800a1f2:	2316      	movs	r3, #22
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	e7e7      	b.n	800a1ca <_raise_r+0x12>
 800a1fa:	2400      	movs	r4, #0
 800a1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a200:	4628      	mov	r0, r5
 800a202:	4798      	blx	r3
 800a204:	2000      	movs	r0, #0
 800a206:	e7e0      	b.n	800a1ca <_raise_r+0x12>

0800a208 <raise>:
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <raise+0xc>)
 800a20a:	4601      	mov	r1, r0
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	f7ff bfd3 	b.w	800a1b8 <_raise_r>
 800a212:	bf00      	nop
 800a214:	2000000c 	.word	0x2000000c

0800a218 <_kill_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d07      	ldr	r5, [pc, #28]	; (800a238 <_kill_r+0x20>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	4611      	mov	r1, r2
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	f7f7 fdc5 	bl	8001db4 <_kill>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	d102      	bne.n	800a234 <_kill_r+0x1c>
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	b103      	cbz	r3, 800a234 <_kill_r+0x1c>
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	bd38      	pop	{r3, r4, r5, pc}
 800a236:	bf00      	nop
 800a238:	200004e0 	.word	0x200004e0

0800a23c <_getpid_r>:
 800a23c:	f7f7 bdb2 	b.w	8001da4 <_getpid>

0800a240 <__sread>:
 800a240:	b510      	push	{r4, lr}
 800a242:	460c      	mov	r4, r1
 800a244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a248:	f000 f894 	bl	800a374 <_read_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	bfab      	itete	ge
 800a250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a252:	89a3      	ldrhlt	r3, [r4, #12]
 800a254:	181b      	addge	r3, r3, r0
 800a256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a25a:	bfac      	ite	ge
 800a25c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a25e:	81a3      	strhlt	r3, [r4, #12]
 800a260:	bd10      	pop	{r4, pc}

0800a262 <__swrite>:
 800a262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a266:	461f      	mov	r7, r3
 800a268:	898b      	ldrh	r3, [r1, #12]
 800a26a:	05db      	lsls	r3, r3, #23
 800a26c:	4605      	mov	r5, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	4616      	mov	r6, r2
 800a272:	d505      	bpl.n	800a280 <__swrite+0x1e>
 800a274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a278:	2302      	movs	r3, #2
 800a27a:	2200      	movs	r2, #0
 800a27c:	f000 f868 	bl	800a350 <_lseek_r>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	f000 b817 	b.w	800a2c8 <_write_r>

0800a29a <__sseek>:
 800a29a:	b510      	push	{r4, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a2:	f000 f855 	bl	800a350 <_lseek_r>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	bf15      	itete	ne
 800a2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2b6:	81a3      	strheq	r3, [r4, #12]
 800a2b8:	bf18      	it	ne
 800a2ba:	81a3      	strhne	r3, [r4, #12]
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <__sclose>:
 800a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c2:	f000 b813 	b.w	800a2ec <_close_r>
	...

0800a2c8 <_write_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d07      	ldr	r5, [pc, #28]	; (800a2e8 <_write_r+0x20>)
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	4608      	mov	r0, r1
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	602a      	str	r2, [r5, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f7f7 fda3 	bl	8001e22 <_write>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_write_r+0x1e>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_write_r+0x1e>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	200004e0 	.word	0x200004e0

0800a2ec <_close_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d06      	ldr	r5, [pc, #24]	; (800a308 <_close_r+0x1c>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	f7f7 fdaf 	bl	8001e5a <_close>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_close_r+0x1a>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_close_r+0x1a>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	200004e0 	.word	0x200004e0

0800a30c <_fstat_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d07      	ldr	r5, [pc, #28]	; (800a32c <_fstat_r+0x20>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	4611      	mov	r1, r2
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	f7f7 fdaa 	bl	8001e72 <_fstat>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d102      	bne.n	800a328 <_fstat_r+0x1c>
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	b103      	cbz	r3, 800a328 <_fstat_r+0x1c>
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	bf00      	nop
 800a32c:	200004e0 	.word	0x200004e0

0800a330 <_isatty_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4d06      	ldr	r5, [pc, #24]	; (800a34c <_isatty_r+0x1c>)
 800a334:	2300      	movs	r3, #0
 800a336:	4604      	mov	r4, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	f7f7 fda9 	bl	8001e92 <_isatty>
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d102      	bne.n	800a34a <_isatty_r+0x1a>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	b103      	cbz	r3, 800a34a <_isatty_r+0x1a>
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	200004e0 	.word	0x200004e0

0800a350 <_lseek_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_lseek_r+0x20>)
 800a354:	4604      	mov	r4, r0
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	f7f7 fda2 	bl	8001ea8 <_lseek>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_lseek_r+0x1e>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_lseek_r+0x1e>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	200004e0 	.word	0x200004e0

0800a374 <_read_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d07      	ldr	r5, [pc, #28]	; (800a394 <_read_r+0x20>)
 800a378:	4604      	mov	r4, r0
 800a37a:	4608      	mov	r0, r1
 800a37c:	4611      	mov	r1, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	602a      	str	r2, [r5, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	f7f7 fd30 	bl	8001de8 <_read>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_read_r+0x1e>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_read_r+0x1e>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	200004e0 	.word	0x200004e0

0800a398 <_init>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr

0800a3a4 <_fini>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr
